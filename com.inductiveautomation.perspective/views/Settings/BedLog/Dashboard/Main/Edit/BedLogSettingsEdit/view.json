{
  "custom": {
    "editData": {
      "age": "",
      "bed": "",
      "bedLogId": "",
      "checkInDate": "",
      "checkOutDate": "",
      "exitDestinationId": "",
      "exitdestination": "",
      "gender": "",
      "participantName": "",
      "programId": -1,
      "programName": "",
      "room": "",
      "shelter": ""
    },
    "reset": false
  },
  "params": {
    "rowData": {
      "age": "",
      "bed": "",
      "bedLogId": "",
      "checkInDate": "",
      "checkOutDate": "",
      "exitDestinationId": "",
      "exitdestination": "",
      "gender": "",
      "participantName": "",
      "programId": -1,
      "programName": "",
      "room": "",
      "shelter": ""
    }
  },
  "propConfig": {
    "custom.editData": {
      "persistent": true
    },
    "custom.reset": {
      "onChange": {
        "enabled": null,
        "script": "\tself.custom.reset \u003d False\n\tif currentValue.value \u003d\u003d True:\n\t\trowData \u003d self.params.rowData\n\t\tcheckInDate \u003d self.params.rowData[\u0027checkInDate\u0027]\n\t\tcheckOutDate \u003d self.params.rowData[\u0027checkOutDate\u0027]\n\t\tif checkInDate !\u003d None and checkInDate !\u003d \u0027\u0027:\n\t\t\tcheckInDate \u003d system.date.fromMillis(checkInDate)\n\t#\t\tcheckInDate \u003d system.date.format(checkInDate,\u0027yyyy-MM-dd hh:mm:ss.S\u0027)\n\t\telse:\n\t\t\tcheckInDate \u003d checkInDate\n\t\tif checkOutDate !\u003d None and checkOutDate !\u003d \u0027\u0027:\n\t\t\tcheckOutDate \u003d system.date.fromMillis(checkOutDate)\n\t#\t\tcheckOutDate \u003d system.date.format(checkOutDate,\u0027yyyy-MM-dd hh:mm:ss.S\u0027)\n\t\telse:\n\t\t\tcheckOutDate \u003d checkOutDate\n\t\t\n\t\tself.custom.editData \u003d {\n\t\t\t\t\t\t\t  \"age\": self.params.rowData[\u0027age\u0027],\n\t\t\t\t\t\t\t  \"bed\": self.params.rowData[\u0027bed\u0027],\n\t\t\t\t\t\t\t  \"checkInDate\": checkInDate,\n\t\t\t\t\t\t\t  \"checkOutDate\": checkOutDate,\n\t\t\t\t\t\t\t  \"exitdestination\": self.params.rowData[\u0027exitdestination\u0027],\n\t\t\t\t\t\t\t  \"gender\": self.params.rowData[\u0027gender\u0027],\n\t\t\t\t\t\t\t  \"participantName\": self.params.rowData[\u0027participantName\u0027],\n\t\t\t\t\t\t\t  \"programName\": self.params.rowData[\u0027programName\u0027],\n\t\t\t\t\t\t\t  \"programId\": self.params.rowData[\u0027programId\u0027],\n\t\t\t\t\t\t\t  \"room\": self.params.rowData[\u0027room\u0027],\n\t\t\t\t\t\t\t  \"shelter\": self.params.rowData[\u0027shelter\u0027],\n\t\t\t\t\t\t\t  \"bedLogId\": self.params.rowData[\u0027bedLogId\u0027],\n\t\t\t\t\t\t\t  \"exitDestinationId\": self.params.rowData[\u0027exitDestinationId\u0027]\n\t\t\t\t\t\t\t}\n"
      },
      "persistent": true
    },
    "params.rowData": {
      "onChange": {
        "enabled": null,
        "script": "\tself.custom.reset \u003d True\n#\tsystem.perspective.print(currentValue.value)"
      },
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 262,
      "width": 1531
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView Header"
        },
        "position": {
          "basis": "25px",
          "shrink": 0
        },
        "props": {
          "params": {
            "Text": "Bed Log Administration"
          },
          "path": "1_TEMPLATES/Header/Header"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedView Row1"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.age": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.age"
              },
              "type": "property"
            }
          },
          "props.params.checkInDate": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.checkInDate"
              },
              "type": "property"
            }
          },
          "props.params.checkOutDate": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.checkOutDate"
              },
              "type": "property"
            }
          },
          "props.params.exitDestination": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.exitdestination"
              },
              "type": "property"
            }
          },
          "props.params.exitDestinationId": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.exitDestinationId"
              },
              "type": "property"
            }
          },
          "props.params.gender": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.gender"
              },
              "type": "property"
            }
          },
          "props.params.participantName": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.participantName"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Settings/BedLog/Dashboard/Main/Edit/Row1",
          "style": {
            "marginLeft": 25,
            "marginRight": 25
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedView Row2"
        },
        "position": {
          "basis": "120px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.bed": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.bed"
              },
              "type": "property"
            }
          },
          "props.params.programId": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.programId"
              },
              "type": "property"
            }
          },
          "props.params.programName": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.programName"
              },
              "type": "property"
            }
          },
          "props.params.room": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.room"
              },
              "type": "property"
            }
          },
          "props.params.shelter": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.shelter"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Settings/BedLog/Dashboard/Main/Edit/Row2",
          "style": {
            "marginLeft": 25,
            "marginRight": 25
          }
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "script": "\timport traceback\n\ttry:\n\t\tproject \u003d \"HMS\"\n\t\tbedLogId \u003d self.view.params.rowData.bedLogId\n\t\teventStart \u003d self.parent.parent.getChild(\"EmbeddedView Row1\").props.params.checkInDate\n\t\teventEnd \u003d self.parent.parent.getChild(\"EmbeddedView Row1\").props.params.checkOutDate\n\t\tExitDestinationId \u003d self.parent.parent.getChild(\"EmbeddedView Row1\").props.params.exitDestinationId\n\t\tExitDestinationId \u003d ExitDestinationId if ExitDestinationId !\u003d -1 else None\n\t\tprogramId \u003d self.parent.parent.getChild(\"EmbeddedView Row2\").props.params.programId\n\t\tsystem.perspective.print(eventStart)\n\t\tsystem.perspective.print(eventEnd)\n\t\t# if eventStart not null/empty then format date\n\t\tif eventStart !\u003d None and eventStart !\u003d \u0027\u0027:\n\t\t\teventStart \u003d system.date.parse(eventStart,\u0027yyyy-MM-dd HH:mm:ss.S\u0027)\n\t\t\teventStart \u003d system.date.format(eventStart,\u0027yyyy-MM-dd HH:mm:ss\u0027) \n\t\telse:\n\t\t\teventStart \u003d None\n\t\t# if eventEnd not null/empty then format date\n\t\tif eventEnd !\u003d None and eventEnd !\u003d \u0027\u0027:\n\t\t\teventEnd \u003d system.date.parse(eventEnd,\u0027yyyy-MM-dd HH:mm:ss.S\u0027)\n\t\t\teventEnd \u003d system.date.format(eventEnd,\u0027yyyy-MM-dd HH:mm:ss\u0027) \n\t\telse:\n\t\t\teventEnd \u003d None\n\t\t\n\t\tsystem.perspective.print(eventStart)\n\t\tsystem.perspective.print(eventEnd)\n#\t\t# check check-out date can not be prior to check-in date\n#\t\tselectQ \u003d \"SELECT * FROM lodging.bedLog where id \u003d ? and eventStart \u003c ?\"\n#\t\tCompareCheckoutDate \u003d system.db.runPrepQuery(selectQ, [bedLogId,eventEnd])\n#\t\t# check check-in date must be prior to check-out date\n#\t\tselectQ \u003d \"SELECT * FROM lodging.bedLog where id \u003d ? and eventEnd \u003e ?\"\n#\t\tCompareCheckinDate \u003d system.db.runPrepQuery(selectQ, [bedLogId,eventStart])\n\t\t#if (CompareCheckoutDate.getRowCount()\u003e0 and CompareCheckinDate.getRowCount()\u003e0) or eventEnd \u003d\u003d None:\t\n\t\t## check if any participant with same bed checkIn for same date range\n\t\tquery \u003d \u0027\u0027\u0027\n\t\t\t\tSELECT * FROM lodging.bedLog where (\n\t\t\t\t(eventStart between ? and ?) or (eventEnd between ? and ?)\n\t\t\t\tor (? between eventStart and eventEnd) or (? between eventStart and eventEnd)\n\t\t\t\t)\n\t\t\t\tand bedId \u003d (SELECT bedId FROM lodging.bedLog where id \u003d ?)\n\t\t\t\tand id !\u003d ?\n\t\t\t\t\u0027\u0027\u0027\n\t\tmultiParticipant_sameDate \u003d system.db.runPrepQuery(query,[eventStart,eventEnd,eventStart,eventEnd,eventStart,eventEnd,bedLogId,bedLogId], \"HMSOps\")\t\n\t\t## check if same participant with different bed checkIn same date range\n\t\tquery \u003d \u0027\u0027\u0027\n\t\t\t\tSELECT * FROM lodging.bedLog where (\n\t\t\t\t(eventStart between ? and ?) or (eventEnd between ? and ?)\n\t\t\t\tor (? between eventStart and eventEnd) or (? between eventStart and eventEnd)\n\t\t\t\t)\n\t\t\t\tand participantId \u003d (SELECT participantId FROM lodging.bedLog where id \u003d ?)\n\t\t\t\tand id !\u003d ?\n\t\t\t\t\u0027\u0027\u0027\n\t\tsameParticipant_multiDate \u003d system.db.runPrepQuery(query,[eventStart,eventEnd,eventStart,eventEnd,eventStart,eventEnd,bedLogId,bedLogId], \"HMSOps\")\t\n\t\tcompareDate \u003d False\n\t\tif eventEnd !\u003d None:\n\t\t\tcompareDate \u003d system.date.isBefore(system.date.parse(eventStart,\u0027yyyy-MM-dd hh:mm:ss\u0027), system.date.parse(eventEnd,\u0027yyyy-MM-dd hh:mm:ss\u0027))\n\t\tif compareDate \u003d\u003d True or eventEnd \u003d\u003d None:\t\n\t\t\tif multiParticipant_sameDate.getRowCount() \u003c 1:\t\t\n\t\t\t\tif sameParticipant_multiDate.getRowCount() \u003c 1:\t\t\t\t\n\t\t\t\t\tpath \u003d \"Settings/BedLog/UpdateBedLogEntry\"\n\t\t\t\t\tparameters \u003d {\"eventStart\":eventStart,\n\t\t\t\t\t\t\t\t\"eventEnd\":eventEnd,\n\t\t\t\t\t\t\t\t\"bedLogId\":bedLogId,\n\t\t\t\t\t\t\t\t\"exitDestinationId\":ExitDestinationId,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\tsystem.perspective.print(parameters)\n\t\t\t\t\tBedLogUpdate \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\n\t\t\t\t\tpath \u003d \"Settings/BedLog/UpdateReservationProgram\"\n\t\t\t\t\tparameters \u003d {\"programId\": programId,\n\t\t\t\t\t\t\t\t\t\"bedLogId\": bedLogId,}\n\t\t\t\t\tProgramUpdate \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\n\t\t\t\t\tsystem.perspective.sendMessage(\u0027refreshBedLogTable\u0027,{},\u0027session\u0027)\n\t\t\t\t\tsystem.perspective.print(ExitDestinationId)\n\t\t\t\t\tself.getSibling(\"Label\").showMessage(\"BedLog entry updated successfully.\")\n\t\t\t\telse:\n\t\t\t\t\tsystem.perspective.print(sameParticipant_multiDate.getValueAt(0,\u0027id\u0027))\n\t\t\t\t\tsystem.perspective.print(eventStart)\n\t\t\t\t\tsystem.perspective.print(eventEnd)\n\t\t\t\t\tself.getSibling(\"Label\").showMessage(\u0027participant is checked into another Bed for selected start and end date\u0027)\n\t\t\telse:\n\t\t\t\tself.getSibling(\"Label\").showMessage(\u0027Bed is occupied for selected start and end date\u0027)\n\t\telse:\n\t\t\tself.getSibling(\"Label\").showMessage(\u0027Checkout date can not be prior to check-in date\u0027)\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"BedLog Settings Update Button\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)\n\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_save"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              },
              "text": "Update Bed Log Entry"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "dom": {
                "onClick": [
                  {
                    "config": {
                      "script": "\tpass\n#\tbedLogId \u003d self.view.params.rowData.bedLogId\n#\tsystem.perspective.openPopup(\"Settings/BedLog/Dashboard/Main/template/DeleteWarning\", params \u003d {\u0027bedLogId\u0027:bedLogId}, showCloseIcon \u003d False, resizable \u003d True, draggable \u003d False, overlayDismiss \u003d True, modal  \u003d True)\n#\tself.getSibling(\"Label\").showMessage(\"BedLog entry deleted successfully.\")\n\t\n#\timport traceback\n#\ttry:\n#\t\tproject \u003d \"HMS\"\n#\t\tbedLogId \u003d self.view.params.rowData.bedLogId\n#\t\tpath \u003d \"Settings/BedLog/DeleteBedLogEntry\"\n#\t\tparameters \u003d {\n#\t\t\t\t\t\"bedLogId\":bedLogId,\n#\t\t\t\t\t}\n#\t\tBedLogUpdate \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\n#\t\tsystem.perspective.sendMessage(\u0027refreshBedLogTable\u0027,{},\u0027session\u0027)\n#\t\tself.getSibling(\"Label\").showMessage(\"BedLog entry deleted successfully.\")\n#\texcept:\n#\t\tlogger \u003d system.util.getLogger(\"BedLog Settings Delete Button\")\n#\t\tmsg \u003d traceback.format_exc()\n#\t\tlogger.error(msg)\n#\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while deleting data. Please try again.\")"
                    },
                    "scope": "G",
                    "type": "script"
                  },
                  {
                    "config": {
                      "draggable": false,
                      "id": "DeleteWarning",
                      "modal": true,
                      "overlayDismiss": false,
                      "resizable": true,
                      "showCloseIcon": false,
                      "type": "open",
                      "viewParams": {
                        "bedLogId": "{view.params.rowData.bedLogId}"
                      },
                      "viewPath": "Settings/BedLog/Dashboard/Main/template/DeleteWarning",
                      "viewportBound": false
                    },
                    "scope": "C",
                    "type": "popup"
                  }
                ]
              }
            },
            "meta": {
              "name": "button_save_0"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Delete",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              },
              "text": "Delete Bed Log Entry"
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "Label",
              "visible": false
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Text/Error_Message"
              },
              "text": "Please fill in all the fields correctly before saving."
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "showMessage",
                  "params": [
                    "message"
                  ],
                  "script": "\timport time\n\tself.props.text \u003d message\n\tself.meta.visible \u003d True\n\ttime.sleep(5)\n\tself.meta.visible \u003d False\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": [
                {
                  "messageType": "displayMessage",
                  "pageScope": true,
                  "script": "\t# implement your handler here\n#\tsystem.perspective.print(\u0027deleted\u0027)\n\tself.showMessage(payload[\u0027message\u0027])",
                  "sessionScope": true,
                  "viewScope": true
                }
              ]
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "root Actions"
        },
        "position": {
          "basis": "50px",
          "shrink": 0
        },
        "props": {
          "style": {
            "borderTopColor": "#9db8d1",
            "borderTopStyle": "solid",
            "borderTopWidth": "1px",
            "classes": "Background/Default",
            "marginTop": "5px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "32px",
          "display": false
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "\"Active: \" + {view.custom.editData.active}\r\n+ \" Name: \" + {view.custom.editData.congregationName}\r\n+ \" Add1: \" + {view.custom.editData.congregationAddressLine1}\r\n+ \" Add2: \" + {view.custom.editData.congregationAddressLine2}\r\n+ \" City: \" + {view.custom.editData.congregationCity}\r\n+ \" Zip: \" + {view.custom.editData.congregationZipCode}\r\n+ \" Phone: \" + {view.custom.editData.congregationPhone}\r\n+ \" Leader: \" + {view.custom.editData.leader}\r\n+ \" Notes: \" + {view.custom.editData.notes}"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "type": "ia.container.flex"
  }
}