{
  "custom": {
    "selectedShelterIds": "()"
  },
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\tself.getChild(\"root\").getChild(\"Filter\").getChild(\"filter\").props.value \u003d \u0027Current\u0027"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "SelectedValue": "Current",
    "searchText": "",
    "selectedBed": null,
    "selectedDateRange": " 2025-06-06 16:14:23.783 to 2025-06-06 16:14:23.783",
    "selectedRoom": null,
    "selectedShelter": "(\u0027Test New Shelter\u0027, \u0027Test New Shelter\u0027)"
  },
  "propConfig": {
    "custom.selectedShelterIds": {
      "binding": {
        "config": {
          "parameters": {
            "shelterList": "{view.params.selectedShelter}"
          },
          "queryPath": "Settings/BedLog/Get_FacilityId_FromName"
        },
        "transforms": [
          {
            "code": "\tidList \u003d \"\"\n\tselectedShelter_FromDropdown \u003d self.getChild(\"root\").getChild(\"emvShelter\").props.params.selection\n\tif selectedShelter_FromDropdown !\u003d None:\n\t\tif value !\u003d None and value.getRowCount()\u003e0:\n\t\t\tfor i in range(0,value.getRowCount()):\n\t\t\t\tid \u003d value.getValueAt(i,0)\n\t\t\t\tidList \u003d idList + str(id) + \",\"\n\t\t\tidList \u003d \"(\" + idList[:-1] + \")\"\n\telse:\n\t\tidList \u003d \"()\"\n\treturn idList",
            "type": "script"
          }
        ],
        "type": "query"
      },
      "persistent": true
    },
    "params.SelectedValue": {
      "binding": {
        "config": {
          "path": "/root/Filter/filter.props.value"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.searchText": {
      "binding": {
        "config": {
          "path": "/root/emvSearch.props.params.searchText"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.selectedBed": {
      "binding": {
        "config": {
          "path": "/root/emvBed.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.selectedDateRange": {
      "binding": {
        "config": {
          "path": "/root/emvDateRange.props.params.selectedDateRange"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.selectedRoom": {
      "binding": {
        "config": {
          "path": "/root/emvRoom.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.selectedShelter": {
      "binding": {
        "config": {
          "path": "/root/emvShelter.props.params.selection"
        },
        "transforms": [
          {
            "code": "\t# get shelter list\n\tquery_shelter \u003d \"\"\"\n\tSELECT facilityName FROM lodging.Facility WHERE facilityName IS NOT NULL AND timeRetired IS NULL ORDER BY facilityName\n\t\t\"\"\"\n\tresult_shelter \u003d system.db.runPrepQuery(query_shelter,[],\u0027HMSOps\u0027)\n\tshelterList \u003d \u0027\u0027\n\tif value !\u003d None and value !\u003d \u0027\u0027:\n\t\tfor shelter in value:\n\t\t\tsystem.perspective.print(shelter)\n\t\t\tif shelter \u003d\u003d \u0027All Guest House\u0027:\n\t\t\t\tquery \u003d \"\"\"\n\t\t\t\tSELECT facilityName FROM lodging.Facility WHERE facilityName IS NOT NULL AND facilityName NOT IN (\u0027532 Apartments\u0027,\u0027705 Apartments\u0027) AND timeRetired IS NULL ORDER BY facilityName\n\t\t\t\t\t\"\"\"\n\t\t\t\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\t\t\tshelter_All \u003d [ dict(shelter_one \u003d x[0]) for x in result]\n\t\t\t\tfor shelter_one in shelter_All:\n\t\t\t\t\tif shelterList !\u003d \u0027\u0027:\n\t\t\t\t\t\tshelterList \u003d shelterList + \", \u0027\" + (str(shelter_one[\u0027shelter_one\u0027])).replace(\"\u0027\",\"\u0027\u0027\") + \"\u0027\"\n\t\t\t\t\telse:\n\t\t\t\t\t\tshelterList \u003d shelterList + \"\u0027\" + (str(shelter_one[\u0027shelter_one\u0027])).replace(\"\u0027\",\"\u0027\u0027\") + \"\u0027\"\n\t\t\t\tsystem.perspective.print(shelterList)\n\t\t\telse:\n\t\t\t\tif shelterList !\u003d \u0027\u0027:\n\t\t\t\t\tshelterList \u003d shelterList + \", \u0027\" + (str(shelter)).replace(\"\u0027\",\"\u0027\u0027\") + \"\u0027\"\n\t\t\t\telse:\n\t\t\t\t\tshelterList \u003d shelterList + \"\u0027\" + (str(shelter)).replace(\"\u0027\",\"\u0027\u0027\") + \"\u0027\"\n\t\tif shelterList \u003d\u003d None or shelterList \u003d\u003d \u0027\u0027:\n\t\t\tshelterList \u003d \"\u0027\u0027\"\n\t\tshelterList \u003d \u0027(\u0027 + str(shelterList) + \u0027)\u0027\n\telse:\n\t\tshelterAll \u003d [ dict(shelter \u003d x[0]) for x in result_shelter]\n\t\tfor shelter in shelterAll:\n\t\t\tif shelterList !\u003d \u0027\u0027:\n\t\t\t\tshelterList \u003d shelterList + \", \u0027\" + (str(shelter[\u0027shelter\u0027])).replace(\"\u0027\",\"\u0027\u0027\") + \"\u0027\"\n\t\t\telse:\n\t\t\t\tshelterList \u003d shelterList + \"\u0027\" + (str(shelter[\u0027shelter\u0027])).replace(\"\u0027\",\"\u0027\u0027\") + \"\u0027\"\n\t\tif shelterList \u003d\u003d None or shelterList \u003d\u003d \u0027\u0027:\n\t\t\tshelterList \u003d \"\u0027\u0027\"\n\t\tshelterList \u003d \u0027(\u0027 + str(shelterList) + \u0027)\u0027\n\treturn shelterList",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 30,
      "width": 1208
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "meta": {
              "name": "filter"
            },
            "position": {
              "basis": "100%"
            },
            "propConfig": {
              "props.options": {
                "binding": {
                  "config": {
                    "queryPath": "WinterShelterGlobal/getCurrentSeason"
                  },
                  "enabled": false,
                  "transforms": [
                    {
                      "code": "\tresult1 \u003d value\n\tresult2 \u003d system.db.runNamedQuery(\"WinterShelterGlobal/GetLastSeason\")\n\tcurrentSeasonId \u003d result1.getValueAt(0,\u0027id\u0027)\n\tcurrentSeason \u003d result1.getValueAt(0,\u0027Seasons\u0027)\n\tlastSeasonId \u003d result2.getValueAt(0,\u0027id\u0027)\n\tlastSeason \u003d result2.getValueAt(0,\u0027Seasons\u0027)\n\toption \u003d [{\"label\":lastSeason,\"value\":lastSeasonId},{\"label\":currentSeason,\"value\":currentSeasonId}]\n\treturn option",
                      "type": "script"
                    }
                  ],
                  "type": "query"
                }
              },
              "props.style.classes": {
                "binding": {
                  "config": {
                    "path": "view.params.selection"
                  },
                  "transforms": [
                    {
                      "code": "\ttext \u003d \"Filter/Filter_Text_Default\"\n\tif value !\u003d None:\n\t\tif value !\u003d \"\" and value \u003e -1:\n\t\t\ttext \u003d \"Filter/Filter_Text_TeelBlue\"\n\treturn text",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "dropdownOptionStyle": {
                "classes": "Dropdowns/DD_Options"
              },
              "options": [
                {
                  "label": "Current",
                  "value": "Current"
                },
                {
                  "label": "Past",
                  "value": "Past"
                }
              ],
              "placeholder": {
                "color": "#AAAAAA",
                "text": "Select"
              },
              "style": {},
              "value": "Current",
              "wrapMultiSelectValues": false
            },
            "type": "ia.input.dropdown"
          }
        ],
        "meta": {
          "name": "Filter"
        },
        "position": {
          "basis": "160px"
        },
        "propConfig": {
          "props.style.classes": {
            "binding": {
              "config": {
                "path": "./filter.props.value"
              },
              "transforms": [
                {
                  "code": "\tborder \u003d \"Filter/Filter_Border_Default\"\n\tif value !\u003d None:\n\t\tborder \u003d \"Filter/Filter_Border_TeelBlue\"\n\treturn border",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "marginRight": 0
          }
        },
        "scripts": {
          "customMethods": [],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "clearFilter",
              "pageScope": true,
              "script": "\tself.getChild(\"filter\").props.value \u003d \u0027Current\u0027",
              "sessionScope": false,
              "viewScope": true
            },
            {
              "messageType": "SetDropdown",
              "pageScope": true,
              "script": "\t# implement your handler here\n\tself.getChild(\"filter\").props.value \u003d \"Current\"",
              "sessionScope": true,
              "viewScope": true
            }
          ]
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Filler_1"
        },
        "position": {
          "basis": "10px",
          "display": false,
          "shrink": 0
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "emvShelter"
        },
        "position": {
          "basis": "220px",
          "shrink": 0
        },
        "props": {
          "params": {
            "actionPerformedPulse": true,
            "clear": false,
            "multiSelect": true,
            "options": [
              {
                "label": "All Guest House",
                "value": "All Guest House"
              },
              {
                "label": "532 Apartments",
                "value": "532 Apartments"
              },
              {
                "label": "705 Apartments",
                "value": "705 Apartments"
              },
              {
                "label": "Hallway",
                "value": "Hallway"
              },
              {
                "label": "Next Steps Dorm",
                "value": "Next Steps Dorm"
              },
              {
                "label": "Night Shift Dorm",
                "value": "Night Shift Dorm"
              },
              {
                "label": "Respite Dorm (Men)",
                "value": "Respite Dorm (Men)"
              },
              {
                "label": "Respite Dorm (Women)",
                "value": "Respite Dorm (Women)"
              },
              {
                "label": "Special Dorm",
                "value": "Special Dorm"
              },
              {
                "label": "Veteran Service Intensive Dorm",
                "value": "Veteran Service Intensive Dorm"
              },
              {
                "label": "Veteran\u0027s Dorm",
                "value": "Veteran\u0027s Dorm"
              },
              {
                "label": "Vine Hill",
                "value": "Vine Hill"
              },
              {
                "label": "Welcome Dorm",
                "value": "Welcome Dorm"
              },
              {
                "label": "Women\u0027s Welcome Dorm",
                "value": "Women\u0027s Welcome Dorm"
              }
            ],
            "placeholder": "Shelter",
            "selection": null
          },
          "path": "Settings/BedLog/Dashboard/Main/Filter/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container",
            "marginLeft": "10px"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\t\n\tquery \u003d \"\"\" \nSELECT facilityName FROM lodging.Facility WHERE facilityName IS NOT NULL AND timeRetired IS NULL ORDER BY facilityName\n\t\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tfacilityNameList \u003d [ dict(value \u003d x[0],label \u003d x[0]) for x in result]\n\tfacilityNameList.insert(0,{\u0027value\u0027:\u0027All Guest House\u0027,\u0027label\u0027:\u0027All Guest House\u0027})\n\t\n\t\n\tself.props.params.options \u003d facilityNameList\n#\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[0]) for x in result]\n\t\n"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "clearFilter",
              "pageScope": true,
              "script": "\tself.props.params.selection \u003d None\n\tself.props.params.clear \u003d True",
              "sessionScope": false,
              "viewScope": true
            }
          ]
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvRoom"
        },
        "position": {
          "basis": "320px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.options": {
            "binding": {
              "config": {
                "parameters": {
                  "facilityIdList": "{view.custom.selectedShelterIds}"
                },
                "queryPath": "Settings/BedLog/GetRooms_FromFacility"
              },
              "type": "query"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "placeholder": "Room",
            "selection": null
          },
          "path": "Settings/BedLog/Dashboard/Main/Filter/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container",
            "marginLeft": "10px"
          }
        },
        "scripts": {
          "customMethods": [],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "clearFilter",
              "pageScope": true,
              "script": "\tself.props.params.selection \u003d None\n\tself.props.params.clear \u003d True",
              "sessionScope": false,
              "viewScope": true
            }
          ]
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvBed"
        },
        "position": {
          "basis": "150px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.options": {
            "binding": {
              "config": {
                "parameters": {
                  "roomId": "{../emvRoom.props.params.selection}"
                },
                "queryPath": "Settings/BedLog/GetBeds_FromRoom"
              },
              "type": "query"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "placeholder": "Bed",
            "selection": null
          },
          "path": "Settings/BedLog/Dashboard/Main/Filter/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container",
            "marginLeft": "10px"
          }
        },
        "scripts": {
          "customMethods": [],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "clearFilter",
              "pageScope": true,
              "script": "\tself.props.params.selection \u003d None\n\tself.props.params.clear \u003d True",
              "sessionScope": false,
              "viewScope": true
            }
          ]
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvDateRange"
        },
        "position": {
          "basis": "170px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.selectedDateRange": {
            "onChange": {
              "enabled": null,
              "script": "\tpass\n#\troot \u003d self.parent\n#\troot.sendMsgCondition()"
            }
          }
        },
        "props": {
          "params": {
            "selectedDateRange": " 2025-06-06 16:14:23.783 to 2025-06-06 16:14:23.783"
          },
          "path": "Shelter/Templates/DateRange/DateInput",
          "style": {
            "classes": "Filter/Filter_Container",
            "marginLeft": "10px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "filler"
        },
        "position": {
          "basis": "400px",
          "grow": 1
        },
        "props": {
          "style": {
            "classes": "Table/Filter_Header_Detail",
            "paddingLeft": "40px"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "lblSearch"
        },
        "position": {
          "basis": "50px"
        },
        "props": {
          "style": {
            "classes": "Table/Filter_Header",
            "textAlign": "end"
          },
          "text": "Search:"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "emvSearch"
        },
        "position": {
          "basis": "220px",
          "shrink": 0
        },
        "props": {
          "params": {
            "clear": false,
            "keyUpPulse": true,
            "searchText": ""
          },
          "path": "Settings/BedLog/Dashboard/Main/Filter/Search_Bar",
          "style": {
            "classes": "Table/Search_Bar"
          },
          "useDefaultViewWidth": true
        },
        "scripts": {
          "customMethods": [],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "clearFilter",
              "pageScope": true,
              "script": "\tself.props.params.searchText \u003d \u0027\u0027\n\tself.props.params.clear \u003d True",
              "sessionScope": false,
              "viewScope": true
            }
          ]
        },
        "type": "ia.display.view"
      },
      {
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "script": "\t#Clear the filter components\n\tsystem.perspective.sendMessage(messageType\u003d\"clearFilter\")"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "ClearFilters"
        },
        "position": {
          "basis": "40px",
          "shrink": 0
        },
        "props": {
          "path": "1_TEMPLATES/Filtering/Filters/ClearFilters",
          "style": {
            "marginLeft": "10px"
          }
        },
        "type": "ia.display.view"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "style": {
        "classes": "Table/Filter_Header"
      }
    },
    "type": "ia.container.flex"
  }
}