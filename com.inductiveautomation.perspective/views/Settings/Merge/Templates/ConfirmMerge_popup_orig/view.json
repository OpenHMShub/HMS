{
  "custom": {},
  "params": {
    "KeepHumanId": "",
    "KeepParticipant": "",
    "KeepParticipantId": "",
    "MergeParticipants": [
      2,
      3
    ]
  },
  "propConfig": {
    "params.KeepHumanId": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.KeepParticipant": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.KeepParticipantId": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.MergeParticipants": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 400,
      "width": 680
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "60px"
        },
        "props": {
          "style": {
            "background": "linear-gradient(90deg, rgba(22,165,189,1) 0%, rgba(13,185,165,1) 100%)",
            "classes": "Text/Add_Header"
          },
          "text": "Confirm Merge Participants",
          "textStyle": {
            "fontSize": 20
          }
        },
        "type": "ia.display.label"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Placeholder"
            },
            "position": {
              "basis": "10px",
              "grow": 1
            },
            "props": {
              "path": "1_TEMPLATES/Filtering/Filter_Placeholder",
              "style": {
                "classes": "Background/Alternative"
              }
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "Placeholder_0"
            },
            "position": {
              "basis": "700px",
              "grow": 1
            },
            "props": {
              "path": "1_TEMPLATES/Filtering/Filter_Placeholder",
              "style": {
                "borderBottomColor": "#AAAAAA",
                "borderBottomStyle": "solid",
                "borderBottomWidth": "1px",
                "classes": "Background/Alternative"
              }
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "Placeholder_1"
            },
            "position": {
              "basis": "10px",
              "grow": 1
            },
            "props": {
              "path": "1_TEMPLATES/Filtering/Filter_Placeholder",
              "style": {
                "classes": "Background/Alternative"
              }
            },
            "type": "ia.display.view"
          }
        ],
        "meta": {
          "name": "Filler1"
        },
        "position": {
          "basis": "12px"
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Placeholder"
        },
        "position": {
          "basis": "1px",
          "grow": 1
        },
        "props": {
          "path": "1_TEMPLATES/Filtering/Filter_Placeholder",
          "style": {
            "classes": "Background/Alternative"
          }
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Placeholder1"
            },
            "position": {
              "basis": "10px"
            },
            "props": {
              "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "Title1"
            },
            "position": {
              "basis": "150px"
            },
            "props": {
              "style": {
                "backgroundColor": "#f3f4f8",
                "classes": "Dropdowns/DD_Options"
              },
              "text": "Participant To Keep:"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "ParticipantToKeep"
            },
            "position": {
              "basis": "200px",
              "grow": 1
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "path": "view.params.KeepParticipant"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "backgroundColor": "#f3f4f8",
                "classes": "Background/Alternative Text/Add_InfoText"
              }
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "Placeholder2"
            },
            "position": {
              "basis": "10px",
              "grow": 1
            },
            "props": {
              "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
            },
            "type": "ia.display.view"
          }
        ],
        "meta": {
          "name": "Keep_Participant"
        },
        "position": {
          "basis": "50px"
        },
        "props": {
          "style": {
            "marginTop": 10
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Placeholder1"
            },
            "position": {
              "basis": "10px"
            },
            "props": {
              "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "Title2"
            },
            "position": {
              "basis": "150px"
            },
            "props": {
              "alignVertical": "top",
              "style": {
                "backgroundColor": "#f3f4f8",
                "classes": "Dropdowns/DD_Options"
              },
              "text": "Participants To Delete:"
            },
            "type": "ia.display.label"
          },
          {
            "events": {
              "component": {
                "onRowClick": {
                  "config": {
                    "script": "\ttableData \u003d self.props.data\n\tselectedColumn \u003d self.props.selection.selectedColumn\n\tsystem.perspective.sendMessage(\"clearRowParticipant\", payload \u003d {}, scope \u003d \u0027session\u0027)\n\tif selectedColumn \u003d\u003d \"participant_id\": \n\t\tselectedData \u003d self.props.selection.data\n\t\tselectedID \u003d selectedData[0][\u0027participant_id\u0027]\n\t\t\n\t\tnewData \u003d []\n\t\tfor i in range(0,len(tableData)):\n\t\t\tparticipantId \u003d tableData[i].participant_id\n\t\t\tif participantId\u003d\u003dselectedID:\n\t\t\t\tpass\n\t\t\telse:\n\t\t\t\tnewData.append(tableData[i])\n\t\t\t\t\n\t\tself.props.data \u003d newData\n\t\t\n\telse:\n\t\tpass"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "MergeTable"
            },
            "position": {
              "basis": "500px"
            },
            "propConfig": {
              "custom.sql_data": {
                "binding": {
                  "config": {
                    "parameters": {
                      "firstName": "{../FlexContainer/FName.props.params.text}",
                      "lastName": "{../FlexContainer/LName.props.params.text}",
                      "middleName": "{../FlexContainer/MName.props.params.text}"
                    },
                    "queryPath": "Participants/Storage Bins/FindMatches"
                  },
                  "transforms": [
                    {
                      "code": "\tsearchResults \u003d value\n\ttableData \u003d []\n\tfor row in range(searchResults.getRowCount()):\n\t\trowStruct \u003d {}\n\t\trowData \u003d {}\n\t\tstyle \u003d {}\t\n\t\t\n\t\trowData[\u0027humanId\u0027] \u003d searchResults.getValueAt(row, \"humanId\")\n\t\trowData[\u0027participantId\u0027] \u003d searchResults.getValueAt(row, \"participantId\")\n\t\t\n\t\trowData[\u0027firstName\u0027] \u003d searchResults.getValueAt(row, \"firstName\")\n\t\trowData[\u0027middleName\u0027] \u003d searchResults.getValueAt(row, \"middleName\")\n\t\trowData[\u0027lastName\u0027] \u003d searchResults.getValueAt(row, \"lastName\")\n\t\trowData[\u0027dob\u0027] \u003d searchResults.getValueAt(row, \"dob\")\n\t\t\n\t\tstyle[\u0027classes\u0027] \u003d \"Table/Cell_Detail\"\n\t\trowStruct[\u0027value\u0027] \u003d rowData\n\t\trowStruct[\u0027style\u0027] \u003d style\n\t\t\n\t\ttableData.append(rowStruct)\n\t\t\t\t\n\treturn tableData",
                      "type": "script"
                    }
                  ],
                  "type": "query"
                }
              },
              "props.data": {
                "binding": {
                  "config": {
                    "path": "view.params.MergeParticipants"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "cells": {
                "style": {
                  "classes": "Table/Cell_Detail_NoBG"
                }
              },
              "columns": [
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "participant_id",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": "Table/Column_Header_Detail Background/Default"
                    },
                    "title": " "
                  },
                  "justify": "center",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "max": 100,
                    "min": 0,
                    "track": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "value": {
                      "enabled": true,
                      "format": "0,0.##",
                      "justify": "center",
                      "style": {
                        "classes": ""
                      }
                    }
                  },
                  "render": "auto",
                  "resizable": true,
                  "sort": "none",
                  "sortable": false,
                  "strictWidth": true,
                  "style": {
                    "classes": "Table/Column_Normal_Detail"
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "",
                      "unselected": ""
                    }
                  },
                  "viewParams": {},
                  "viewPath": "Participants/Templates/Table/TableRemove",
                  "visible": false,
                  "width": 30
                },
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "first_name",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": "Table/Column_Header_Detail Background/Default"
                    },
                    "title": "First Name"
                  },
                  "justify": "left",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "max": 100,
                    "min": 0,
                    "track": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "value": {
                      "enabled": true,
                      "format": "0,0.##",
                      "justify": "center",
                      "style": {
                        "classes": ""
                      }
                    }
                  },
                  "render": "auto",
                  "resizable": true,
                  "sort": "none",
                  "sortable": true,
                  "strictWidth": false,
                  "style": {
                    "classes": "Table/Column_Normal_Detail"
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "",
                      "unselected": ""
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": true,
                  "width": ""
                },
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "middle_name",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": "Table/Column_Header_Detail Background/Default"
                    },
                    "title": "Middle Name"
                  },
                  "justify": "left",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "max": 100,
                    "min": 0,
                    "track": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "value": {
                      "enabled": true,
                      "format": "0,0.##",
                      "justify": "center",
                      "style": {
                        "classes": ""
                      }
                    }
                  },
                  "render": "auto",
                  "resizable": true,
                  "sort": "none",
                  "sortable": true,
                  "strictWidth": false,
                  "style": {
                    "classes": "Table/Column_Normal_Detail"
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "",
                      "unselected": ""
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": true,
                  "width": ""
                },
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "last_name",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": "Table/Column_Header_Detail Background/Default"
                    },
                    "title": "Last Name"
                  },
                  "justify": "left",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "max": 100,
                    "min": 0,
                    "track": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "value": {
                      "enabled": true,
                      "format": "0,0.##",
                      "justify": "center",
                      "style": {
                        "classes": ""
                      }
                    }
                  },
                  "render": "auto",
                  "resizable": true,
                  "sort": "none",
                  "sortable": true,
                  "strictWidth": false,
                  "style": {
                    "classes": "Table/Column_Normal_Detail"
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "",
                      "unselected": ""
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": true,
                  "width": ""
                },
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "nick_name",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": "Table/Column_Header_Detail Background/Default"
                    },
                    "title": "Nickname"
                  },
                  "justify": "left",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "max": 100,
                    "min": 0,
                    "track": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "value": {
                      "enabled": true,
                      "format": "0,0.##",
                      "justify": "center",
                      "style": {
                        "classes": ""
                      }
                    }
                  },
                  "render": "auto",
                  "resizable": true,
                  "sort": "none",
                  "sortable": true,
                  "strictWidth": true,
                  "style": {
                    "classes": "Table/Column_Normal_Detail"
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "",
                      "unselected": ""
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": false,
                  "width": 100
                },
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "ssn",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "center",
                    "style": {
                      "classes": "Table/Column_Header_Detail Background/Default"
                    },
                    "title": "SSN"
                  },
                  "justify": "center",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "max": 100,
                    "min": 0,
                    "track": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "value": {
                      "enabled": true,
                      "format": "0,0.##",
                      "justify": "center",
                      "style": {
                        "classes": ""
                      }
                    }
                  },
                  "render": "auto",
                  "resizable": true,
                  "sort": "none",
                  "sortable": true,
                  "strictWidth": true,
                  "style": {
                    "classes": "Table/Column_Normal_Detail"
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "",
                      "unselected": ""
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": true,
                  "width": ""
                },
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "race",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": "Table/Column_Header_Detail Background/Default"
                    },
                    "title": "Race"
                  },
                  "justify": "auto",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "max": 100,
                    "min": 0,
                    "track": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "value": {
                      "enabled": true,
                      "format": "0,0.##",
                      "justify": "center",
                      "style": {
                        "classes": ""
                      }
                    }
                  },
                  "render": "auto",
                  "resizable": true,
                  "sort": "none",
                  "sortable": true,
                  "strictWidth": true,
                  "style": {
                    "classes": "Table/Column_Normal_Detail"
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "",
                      "unselected": ""
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": false,
                  "width": 130
                },
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "dob",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "center",
                    "style": {
                      "classes": "Table/Column_Header_Detail Background/Default"
                    },
                    "title": "DOB"
                  },
                  "justify": "center",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "max": 100,
                    "min": 0,
                    "track": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "value": {
                      "enabled": true,
                      "format": "0,0.##",
                      "justify": "center",
                      "style": {
                        "classes": ""
                      }
                    }
                  },
                  "render": "auto",
                  "resizable": true,
                  "sort": "none",
                  "sortable": true,
                  "strictWidth": true,
                  "style": {
                    "classes": "Table/Column_Normal_Detail"
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "",
                      "unselected": ""
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": true,
                  "width": ""
                },
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "NoOfServices",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "center",
                    "style": {
                      "classes": "Table/Column_Header_Detail Background/Default"
                    },
                    "title": "# of Services"
                  },
                  "justify": "center",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "max": 100,
                    "min": 0,
                    "track": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "value": {
                      "enabled": true,
                      "format": "0,0.##",
                      "justify": "center",
                      "style": {
                        "classes": ""
                      }
                    }
                  },
                  "render": "auto",
                  "resizable": true,
                  "sort": "none",
                  "sortable": false,
                  "strictWidth": true,
                  "style": {
                    "classes": "Table/Column_Normal_Detail"
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "",
                      "unselected": ""
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": false,
                  "width": 90
                },
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "NoOfShelters",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "center",
                    "style": {
                      "classes": "Table/Column_Header_Detail Background/Default"
                    },
                    "title": "# of Shelter Stay"
                  },
                  "justify": "center",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "max": 100,
                    "min": 0,
                    "track": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "value": {
                      "enabled": true,
                      "format": "0,0.##",
                      "justify": "center",
                      "style": {
                        "classes": ""
                      }
                    }
                  },
                  "render": "auto",
                  "resizable": true,
                  "sort": "none",
                  "sortable": false,
                  "strictWidth": true,
                  "style": {
                    "classes": "Table/Column_Normal_Detail"
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "",
                      "unselected": ""
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": false,
                  "width": 110
                }
              ],
              "emptyMessage": {
                "noData": {
                  "text": "No participants selected to merge",
                  "textStyle": {
                    "classes": "Text/About_Title"
                  }
                }
              },
              "pager": {
                "bottom": false
              },
              "rows": {
                "highlight": {
                  "color": "#ccffff",
                  "enabled": false
                },
                "striped": {
                  "color": {
                    "even": "#000000",
                    "odd": "#F9F9F9"
                  },
                  "enabled": false
                },
                "style": {
                  "cursor": "default",
                  "marginLeft": "7px"
                }
              },
              "selection": {
                "style": {
                  "backgroundColor": "#FFFFFF00"
                }
              },
              "style": {
                "classes": "Background/Default"
              }
            },
            "type": "ia.display.table"
          },
          {
            "meta": {
              "name": "Placeholder2"
            },
            "position": {
              "basis": "20px",
              "grow": 1
            },
            "props": {
              "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
            },
            "type": "ia.display.view"
          }
        ],
        "meta": {
          "name": "Merge_Participants"
        },
        "position": {
          "basis": "200px",
          "grow": 1
        },
        "props": {
          "style": {
            "marginTop": 10
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Placeholder1"
        },
        "position": {
          "basis": "5px",
          "grow": 1
        },
        "props": {
          "path": "1_TEMPLATES/Filtering/Filter_Placeholder",
          "style": {
            "classes": "Background/Alternative"
          }
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Placeholder_0"
            },
            "position": {
              "basis": "50%",
              "grow": 1
            },
            "props": {
              "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
            },
            "type": "ia.display.view"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tparticipantIdToKeep \u003d self.view.params.KeepParticipantId\n\tsystem.perspective.print(participantIdToKeep)\t\n\thumanIdToKeep \u003d self.view.params.KeepHumanId\n\tsystem.perspective.print(humanIdToKeep)\n\tparticipantsToDelete \u003d self.view.params.MergeParticipants #list of participants to merge\n\t\n\t\n\tif participantsToDelete is not None and len(participantsToDelete) \u003e 0:\n\t\t## disable ok button until processing completed\n\t\tself.props.enabled \u003d False\n\t\tfor i in range(len(participantsToDelete)):\n\t\t\ttxId \u003d system.db.beginTransaction(timeout\u003d50000)\n\t\t\tcommitTransaction \u003d True \n\t\t\tupdateActionStr \u003d \u0027\u0027\n\t\t\tdeleteActionStr \u003d \u0027\u0027\n\t\t\tparticpantToDelete \u003d participantsToDelete[i][\u0027participant_id\u0027]\n\t\t\thumanToDelete \u003d participantsToDelete[i][\u0027human_id\u0027]\n\t\t\tmiddleName \u003d participantsToDelete[i][\u0027middle_name\u0027]\n\t\t\tif middleName !\u003d None and middleName !\u003d \u0027\u0027:\n\t\t\t\tparticipantName \u003d str(participantsToDelete[i][\u0027first_name\u0027]) + \u0027 \u0027 + str(participantsToDelete[i][\u0027middle_name\u0027]) + \u0027 \u0027 + str(participantsToDelete[i][\u0027last_name\u0027])\n\t\t\telse:\n\t\t\t\tparticipantName \u003d str(participantsToDelete[i][\u0027first_name\u0027]) + \u0027 \u0027 + str(participantsToDelete[i][\u0027last_name\u0027])\n\n\t\t## update all the participant Ids \n\t\t\ttry:\n\t\t\t\t# update participantId of particpantToDelete to participantIdToKeep for lodging.AuditLog table\n\t\t\t\tupdateLodgingAuditLog \u003d \"UPDATE lodging.AuditLog set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete) \n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateLodgingAuditLog, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027lodging.AuditLog participantId,\u0027\t\t\t\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\n\t\t\ttry:\n\t\t\t\t# if participantIdToKeep is already checkIn before particpantToDelete checkIn date then while merging it create duplicate check-in in same daterange\n\t\t\t\t# so, delete record of particpantIdToDelete from lodging.BedLog\n\t\t\t\t\tdeleteQ \u003d \u0027\u0027\u0027\n\t\t\t\t\t\t\t\tDELETE FROM lodging.BedLog where participantId \u003d ? and id in (\n\t\t\t\t\t\t\t\tSELECT id from lodging.BedLog WHERE participantId \u003d ?\n\t\t\t\t\t\t\t\tAND eventStart \u003e\u003d (SELECT eventStart from lodging.bedlog where participantId \u003d ? and eventEnd is null)\n\t\t\t\t\t\t\t\tAND eventEnd IS NULL)\n\t\t\t\t\t\t\t\u0027\u0027\u0027\n\t\t\t\t\tresult \u003d system.db.runPrepUpdate(deleteQ, [particpantToDelete,particpantToDelete,participantIdToKeep], tx \u003d txId)\n\t\t\t\t\tsystem.perspective.print(\u0027bedlog:\u0027+str(result))\n\t\t\t\t\tif result \u003e0:\n\t\t\t\t\t\tdeleteActionStr \u003d str(deleteActionStr) + \u0027lodging.BedLog,\u0027\n\t\t\t\t# if participantIdToKeep is not already checkIn before particpantToDelete checkIn date then update partcipantId of particpantToDelete with participantIdToKeep\t\t\n\t\t\t\t\tupdateQ \u003d \u0027\u0027\u0027\n\t\t\t\t\t\t\t\tUPDATE lodging.BedLog set participantId \u003d ? where participantId \u003d ? and id not in (\n\t\t\t\t\t\t\t\tSELECT id from lodging.BedLog WHERE participantId \u003d ?\n\t\t\t\t\t\t\t\tAND eventStart \u003e\u003d (SELECT eventStart from lodging.bedlog where participantId \u003d ? and eventEnd is null)\n\t\t\t\t\t\t\t\tAND eventEnd IS NULL)\n\t\t\t\t\t\t\t\u0027\u0027\u0027\n\t\t\t\t\tresult \u003d system.db.runPrepUpdate(updateQ, [participantIdToKeep,particpantToDelete,particpantToDelete,participantIdToKeep], tx \u003d txId)\n\t\t\t\t\tsystem.perspective.print(\u0027bedlog:\u0027+str(result))\n\t\t\t\t\tif result \u003e0:\n\t\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027lodging.BedLog participantId,\u0027\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\ttry:\n\t\t\t\t\n\t\t\t\t\t#DuplicateEntry \u003d system.db.runPrepQuery(query,[participantIdToKeep,beginDate,participantIdToKeep, participantIdToKeep, endDate,participantIdToKeep,participantIdToKeep,participantIdToKeep, beginDate, endDate,participantIdToKeep, beginDate, endDate], \"HMSOps\")\n\t\t\t\t\t# if duplicate entry of same participant in same daterange then delete record for participantIdToDelete from lodging.reservation table\n\t\t\t\t\tdeleteQ \u003d \u0027\u0027\u0027\n\t\t\t\t\t\t\t\tDELETE FROM lodging.Reservation where participantId \u003d ? and id in(\n\t\t\t\t\t\t\t\tSELECT a.id FROM(\n\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t(SELECT id FROM (SELECT * FROM lodging.Reservation WHERE participantId \u003d ? AND timeRetired IS NULL) a\n\t\t\t\t\t\t\t\tWHERE a.participantId \u003d ?\n\t\t\t\t\t\t\t\tAND ((SELECT reservationStart from lodging.Reservation where id \u003d r.id)\n\t\t\t\t\t\t\t\tBETWEEN (SELECT MIN(reservationStart) FROM lodging.Reservation WHERE id \u003d a.id AND timeRetired IS NULL AND reservationExpiration IS NULL) AND \n\t\t\t\t\t\t\t\t(SELECT MAX(reservationEnd) FROM lodging.Reservation WHERE id \u003d a.id AND timeRetired IS NULL AND reservationExpiration IS NULL)\n\t\t\t\t\t\t\t\tOR\n\t\t\t\t\t\t\t\t(SELECT reservationEnd from lodging.Reservation where id \u003d r.id)\n\t\t\t\t\t\t\t\tBETWEEN (SELECT MIN(reservationStart) FROM lodging.Reservation WHERE id \u003d a.id AND timeRetired IS NULL AND reservationExpiration IS NULL) AND \n\t\t\t\t\t\t\t\t(SELECT MAX(reservationEnd) FROM lodging.Reservation WHERE id \u003d a.id AND timeRetired IS NULL AND reservationExpiration IS NULL)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tOR\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t(SELECT MIN(reservationStart) FROM lodging.Reservation WHERE id \u003d a.id AND timeRetired IS NULL AND reservationExpiration IS NULL)\n\t\t\t\t\t\t\t\tBETWEEN (SELECT reservationStart from lodging.Reservation where id \u003d r.id) AND (SELECT reservationEnd from lodging.Reservation where id \u003d r.id))\n\t\t\t\t\t\t\t\tOR\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t(SELECT MAX(reservationEnd) FROM lodging.Reservation WHERE id \u003d a.id AND timeRetired IS NULL AND reservationExpiration IS NULL)\n\t\t\t\t\t\t\t\tBETWEEN (SELECT reservationStart from lodging.Reservation where id \u003d r.id) AND (SELECT reservationEnd from lodging.Reservation where id \u003d r.id))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tAND timeRetired IS NULL\n\t\t\t\t\t\t\t\tAND reservationExpiration IS NULL) as isDuplicate ,id\n\t\t\t\t\t\t\t\tFROM lodging.Reservation r where participantId \u003d ?) a where a.isDuplicate IS NOT NULL)\n\t\t\t\t\t\t\t\u0027\u0027\u0027\n\t\t\t\t\tresult \u003d system.db.runPrepUpdate(deleteQ, [particpantToDelete,participantIdToKeep,participantIdToKeep,particpantToDelete], tx \u003d txId)\n\t\t\t\t\tsystem.perspective.print(result)\n\t\t\t\t\tif result \u003e0:\n\t\t\t\t\t\tdeleteActionStr \u003d str(deleteActionStr) + \u0027lodging.Reservation,\u0027\n\t\t\t\t\t# if there is no duplicate entry then update participantIdToDelete with participantIdToKeep\n\t\t\t\t\tupdateQ \u003d \u0027\u0027\u0027\n\t\t\t\t\t\t\t\tUPDATE lodging.Reservation SET participantId \u003d ? where participantId \u003d ? and id in(\n\t\t\t\t\t\t\t\tSELECT a.id FROM(\n\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t(SELECT id FROM (SELECT * FROM lodging.Reservation WHERE participantId \u003d ? AND timeRetired IS NULL) a\n\t\t\t\t\t\t\t\tWHERE a.participantId \u003d ?\n\t\t\t\t\t\t\t\tAND ((SELECT reservationStart from lodging.Reservation where id \u003d r.id)\n\t\t\t\t\t\t\t\tBETWEEN (SELECT MIN(reservationStart) FROM lodging.Reservation WHERE id \u003d a.id AND timeRetired IS NULL AND reservationExpiration IS NULL) AND \n\t\t\t\t\t\t\t\t(SELECT MAX(reservationEnd) FROM lodging.Reservation WHERE id \u003d a.id AND timeRetired IS NULL AND reservationExpiration IS NULL)\n\t\t\t\t\t\t\t\tOR\n\t\t\t\t\t\t\t\t(SELECT reservationEnd from lodging.Reservation where id \u003d r.id)\n\t\t\t\t\t\t\t\tBETWEEN (SELECT MIN(reservationStart) FROM lodging.Reservation WHERE id \u003d a.id AND timeRetired IS NULL AND reservationExpiration IS NULL) AND \n\t\t\t\t\t\t\t\t(SELECT MAX(reservationEnd) FROM lodging.Reservation WHERE id \u003d a.id AND timeRetired IS NULL AND reservationExpiration IS NULL)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tOR\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t(SELECT MIN(reservationStart) FROM lodging.Reservation WHERE id \u003d a.id AND timeRetired IS NULL AND reservationExpiration IS NULL)\n\t\t\t\t\t\t\t\tBETWEEN (SELECT reservationStart from lodging.Reservation where id \u003d r.id) AND (SELECT reservationEnd from lodging.Reservation where id \u003d r.id))\n\t\t\t\t\t\t\t\tOR\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t(SELECT MAX(reservationEnd) FROM lodging.Reservation WHERE id \u003d a.id AND timeRetired IS NULL AND reservationExpiration IS NULL)\n\t\t\t\t\t\t\t\tBETWEEN (SELECT reservationStart from lodging.Reservation where id \u003d r.id) AND (SELECT reservationEnd from lodging.Reservation where id \u003d r.id))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tAND timeRetired IS NULL\n\t\t\t\t\t\t\t\tAND reservationExpiration IS NULL) as isDuplicate ,id\n\t\t\t\t\t\t\t\tFROM lodging.Reservation r where participantId \u003d ?) a where a.isDuplicate IS NULL)\n\t\t\t\t\t\t\t\u0027\u0027\u0027\n\t\t\t\t\tresult \u003d system.db.runPrepUpdate(updateQ, [participantIdToKeep,particpantToDelete,participantIdToKeep,participantIdToKeep,particpantToDelete], tx \u003d txId)\n\t\t\t\t\tsystem.perspective.print(result)\n\t\t\t\t\tif result \u003e0:\n\t\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027lodging.Reservation participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# update participantId of particpantToDelete to participantIdToKeep for organization.ApplicantStatus table\t\n\t\t\ttry:\n\t\t\t\tupdateOrganizationApplicantStatus \u003d \"UPDATE organization.ApplicantStatus set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateOrganizationApplicantStatus, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027organization.ApplicantStatus participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# organization.JobParticipant table currently not in use\n\t\t\t# update participantId of particpantToDelete to participantIdToKeep for organization.JobParticipant table\n\t\t\ttry:\n\t\t\t\tupdateOrganizationJobParticipant \u003d \"UPDATE organization.JobParticipant set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateOrganizationJobParticipant, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027organization.JobParticipant participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# update participantId of particpantToDelete to participantIdToKeep for participant.CampusStore table\n\t\t\ttry:\n\t\t\t\t# get totalPoint count of particpants To be Delete\n\t\t\t\tgetTotalPointsQ \u003d \"SELECT TOP 1 store.TotalPoints FROM participant.CampusStore AS store WHERE store.ParticipantId \u003d \" + str(particpantToDelete) + \" ORDER BY timeCreated DESC\"\n\t\t\t\tgetTotalPoints \u003d system.db.runPrepQuery(getTotalPointsQ, tx \u003d txId)\n\t\t\t\t# check if there is record in campus store for participant to delete\n\t\t\t\tif getTotalPoints.getRowCount() \u003e 0:\n\t\t\t\t\tTotalPoints \u003d getTotalPoints.getValueAt(0,0)\n\t\t\t\t\t# insert record for participant to keep with totalPoints count of participant to delete\n\t\t\t\t\tinsertQ \u003d \u0027\u0027\u0027\n\t\t\t\t\t\t\t\t INSERT INTO participant.CampusStore(Category,ParticipantId,timeCreated,TotalPoints,TransactionPoints,Notes)\n\t\t\t\t\t\t\t\t VALUES(2,?,GETDATE(),\n\t\t\t\t\t\t\t\t    /* Retrieve the point total from last transaction and add the point difference */\n\t\t\t\t\t\t\t\t    (SELECT COALESCE(\n\t\t\t\t\t\t\t\t      (SELECT TOP 1 store.TotalPoints\n\t\t\t\t\t\t\t\t        FROM participant.CampusStore AS store\n\t\t\t\t\t\t\t\t        WHERE store.ParticipantId \u003d ?\n\t\t\t\t\t\t\t\t        ORDER BY timeCreated DESC),\n\t\t\t\t\t\t\t\t      0) AS points) + ?,\n\t\t\t\t\t\t\t\t    ?,? )\n\t\t\t\t\t\t\t\u0027\u0027\u0027\n\t\t\t\t\tresult \u003d system.db.runPrepUpdate(insertQ, [participantIdToKeep,participantIdToKeep,TotalPoints,TotalPoints,\u0027(Merged \u0027+str(participantName)+\u0027)\u0027], tx \u003d txId)\n\t\t\t\t\t# delete records from campus store for participant to delete\n\t\t\t\t\tdeleteQ \u003d \"DELETE FROM participant.CampusStore WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\t\tresult \u003d system.db.runPrepUpdate(deleteQ, tx \u003d txId)\n\t\t\t\t\tif result \u003e0:\n\t\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.CampusStore participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# update participantId of particpantToDelete to participantIdToKeep for participant.CaseNotes table\t\n\t\t\ttry:\n\t\t\t\tupdateParticipantCaseNotes \u003d \"UPDATE participant.CaseNotes set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateParticipantCaseNotes,tx \u003d txId)\n\t\t#\t\tsystem.perspective.print(\u0027resultCaseNote:\u0027+str(result))\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.CaseNotes participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# update participantId of particpantToDelete to participantIdToKeep for participant.DrugScreen table\t\n\t\t\ttry:\n\t\t\t\tupdateParticipantDrugScreenLog \u003d \"UPDATE participant.DrugScreenLog set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateParticipantDrugScreenLog, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.DrugScreenLog participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\ttry:\n\t\t\t\t# delete record of particpantToDelete for those programs which are alraedy included in participantIdToKeep \n\t\t\t\tdeleteEnrollmentQ \u003d \u0027\u0027\u0027\n\t\t\t\t\t\t\t\t\tDELETE FROM participant.Enrollments WHERE particpantId \u003d ? AND id IN(\n\t\t\t\t\t\t\t\t\tSELECT a.id FROM(\n\t\t\t\t\t\t\t\t\t\t\t\t\t(SELECT * FROM participant.Enrollments WHERE particpantId \u003d ?) a\n\t\t\t\t\t\t\t\t\t\t\t\t\tJOIN(SELECT * FROM participant.Enrollments WHERE particpantId \u003d ?) b ON a.programId \u003d b.programId\n\t\t\t\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t\u0027\u0027\u0027\n\t\t\t\tresult \u003d system.db.runPrepUpdate(deleteEnrollmentQ, [particpantToDelete,particpantToDelete,participantIdToKeep], tx \u003d txId)\n\t\t\t\tsystem.perspective.print(\u0027result1:\u0027+str(result))\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tdeleteActionStr \u003d str(deleteActionStr) + \u0027participant.Enrollments participantId,\u0027\n\t\t\t\t# update participantId of particpantToDelete with participantIdToKeep for those programs which are not included in participantIdToKeep \n\t\t\t\tupdateEnrollmentQ \u003d \u0027\u0027\u0027\n\t\t\t\t\t\t\t\t\tUPDATE participant.Enrollments set particpantId \u003d ? WHERE particpantId \u003d ? AND id NOT IN(\n\t\t\t\t\t\t\t\t\tSELECT a.id FROM(\n\t\t\t\t\t\t\t\t\t\t\t\t\t(SELECT * FROM participant.Enrollments WHERE particpantId \u003d ?) a\n\t\t\t\t\t\t\t\t\t\t\t\t\tJOIN(SELECT * FROM participant.Enrollments WHERE particpantId \u003d ?) b ON a.programId \u003d b.programId\n\t\t\t\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t\u0027\u0027\u0027\n\t\t\t\tresult \u003d system.db.runPrepUpdate(updateEnrollmentQ, [participantIdToKeep,particpantToDelete,particpantToDelete,participantIdToKeep], tx \u003d txId)\n\t\t\t\tsystem.perspective.print(\u0027result1:\u0027+str(result))\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.Enrollments participantId,\u0027\t\t\t\t\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# update participantId of particpantToDelete with participantIdToKeep for participant.IncidentLog table \n\t\t\ttry:\n\t\t\t\tupdateParticipantIncidentLog \u003d \"UPDATE participant.IncidentLog set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateParticipantIncidentLog, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.IncidentLog participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# update participantId of particpantToDelete with participantIdToKeep for participant.MedicationBinLog table \n\t\t\ttry:\n\t\t\t\tupdateParticipantMedicationBinsLog \u003d \"UPDATE participant.MedicationBinsLog set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateParticipantMedicationBinsLog, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.IncidentLog participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# update participantId of particpantToDelete with participantIdToKeep for participant.Referral table \n\t\t\ttry:\n\t\t\t\tupdateParticipantReferral \u003d \"UPDATE participant.Referral set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateParticipantReferral, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.Referral participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# update participantId of particpantToDelete with participantIdToKeep for participant.ReinstatemetLog table \t\n\t\t\ttry:\n\t\t\t\tupdateParticipantReinstatementLog \u003d \"UPDATE participant.ReinstatementLog set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateParticipantReinstatementLog, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.ReinstatementLog participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# update participantId of particpantToDelete with participantIdToKeep for participant.StorageBinLog table \n\t\t\ttry:\n\t\t\t\tupdateParticipantStorageBinsLog \u003d \"UPDATE participant.StorageBinsLog set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateParticipantStorageBinsLog, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.StorageBinsLog participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# update participantId of particpantToDelete with participantIdToKeep for participant.Suspension table \t\n\t\t\ttry:\n\t\t\t\tupdateParticipantSuspension \u003d \"UPDATE participant.Suspension set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateParticipantSuspension, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.Suspension participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# update participantId of particpantToDelete with participantIdToKeep for participant.service table \t\n\t\t\ttry:\n\t\t\t\tupdateParticipantServices \u003d \"UPDATE participant.services set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateParticipantServices, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.services participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\ttry:\n\t\t\t\t# delete record of particpantToDelete with participantIdToKeep if particpantIdToDelete check-in for same date \u0026 location of participantIdToKeep\n\t\t\t\tdeleteQ \u003d \"\"\"\n\t\t\t\t\t\tDELETE FROM shelter.ScheduleParticipant where participantId \u003d ? and id in\n\t\t\t\t\t\t(SELECT b.id FROM \n\t\t\t\t\t\t(SELECT id,participantId,seasonId,dayOfYear FROM shelter.ScheduleParticipant where timeRetired IS NULL and participantId \u003d ?) b\n\t\t\t\t\t\tJOIN (SELECT id,participantId,seasonId,dayOfYear FROM shelter.ScheduleParticipant WHERE participantId \u003d ? and timeRetired IS NULL) a ON a.seasonId \u003d b.seasonId AND a.dayOfYear \u003d b.dayOfYear) \n\t\t\t\t\t\t\"\"\"\n\t\t\t\tdeleteScheduleParticipant \u003d system.db.runPrepUpdate(deleteQ, [particpantToDelete,particpantToDelete,participantIdToKeep], tx \u003d txId)\n\t\t\t\tif deleteScheduleParticipant \u003e 0:\n\t\t\t\t\tdeleteActionStr \u003d str(deleteActionStr) + \u0027shelter.ScheduleParticipant,\u0027\n\t\t\t\t# update participantId of particpantToDelete with participantIdToKeep if particpantIdToDelete not check-in for same date \u0026 location of participantIdToKeep\n\t\t\t\tupdateQ \u003d \"\"\"\n\t\t\t\t\t\tUPDATE shelter.ScheduleParticipant set participantId \u003d ? where participantId \u003d ? and id NOT in\n\t\t\t\t\t\t(SELECT b.id FROM \n\t\t\t\t\t\t(SELECT id,participantId,seasonId,dayOfYear FROM shelter.ScheduleParticipant where timeRetired IS NULL and participantId \u003d ?) b\n\t\t\t\t\t\tJOIN (SELECT id,participantId,seasonId,dayOfYear FROM shelter.ScheduleParticipant WHERE participantId \u003d ? and timeRetired IS NULL) a ON a.seasonId \u003d b.seasonId AND a.dayOfYear \u003d b.dayOfYear) \n\t\t\t\t\t\t\"\"\"\n\t\t\t\tupdateScheduleParticipant \u003d system.db.runPrepUpdate(updateQ, [participantIdToKeep,particpantToDelete,particpantToDelete,participantIdToKeep], tx \u003d txId)\n\t\t\t\tif updateScheduleParticipant \u003e 0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027shelter.ScheduleParticipant participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# update participantId of particpantToDelete with participantIdToKeep for participant.WaitingList table \n\t\t\ttry:\n\t\t\t\tupdateShelterWaitList \u003d \"UPDATE shelter.WaitList set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateShelterWaitList, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027shelter.WaitList participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\n\t\t\t# update participantId of particpantToDelete with participantIdToKeep for participant.ChronicHomelssHistory table \n\t\t\ttry:\n\t\t\t\tupdateChronicHomelssHistory \u003d \"UPDATE participant.ChronicHomelssHistory set participantID \u003d \" + str(participantIdToKeep) + \" WHERE participantID \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateChronicHomelssHistory, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.ChronicHomelssHistory participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\n\t\t\t# update participantId of particpantToDelete with participantIdToKeep for participant.SORegistryHistory table \n\t\t\ttry:\t\n\t\t\t\t# delete record of particpantToDelete if there is already so registry for participantToKeep\n\t\t\t\tdeleteQ \u003d \"\"\"\n\t\t\t\t\t\tDELETE FROM participant.SORegistryHistory WHERE participantId \u003d ? and ?  \n\t\t\t\t\t\tIN (SELECT participantId FROM participant.SORegistryHistory WHERE participantId \u003d ?)\n\t\t\t\t\t\t\"\"\"\n\t\t\t\tdeleteSORegistryHistory \u003d system.db.runPrepUpdate(deleteQ, [particpantToDelete,participantIdToKeep,participantIdToKeep], tx \u003d txId)\n\t\t\t\tif deleteSORegistryHistory \u003e 0:\n\t\t\t\t\tdeleteActionStr \u003d str(deleteActionStr) + \u0027participant.SORegistryHistory,\u0027\n\t\t\t\t# update record of particpantToDelete if there is already so registry for participantToKeep\n\t\t\t\tupdateQ \u003d \"\"\"\n\t\t\t\t\t\tUPDATE participant.SORegistryHistory SET participantId \u003d ? WHERE participantId \u003d ? and ?  \n\t\t\t\t\t\tNOT IN (SELECT participantId FROM participant.SORegistryHistory WHERE participantId \u003d ?)\n\t\t\t\t\t\t\"\"\"\n\t\t\t\tupdateSORegistryHistory \u003d system.db.runPrepUpdate(updateQ, [participantIdToKeep,particpantToDelete,participantIdToKeep,participantIdToKeep], tx \u003d txId)\n\t\t\t\tif updateSORegistryHistory \u003e 0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.SORegistryHistory participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\n\t\t\t# update participantId of particpantToDelete with participantIdToKeep for participant.Tasks table \n\t\t\ttry:\n\t\t\t\tupdateParticipantTasks \u003d \"UPDATE participant.Tasks set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateParticipantTasks, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.Tasks participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\n\t\t\t# update participantId of particpantToDelete with participantIdToKeep for participant.TaskActivityLog table \n\t\t\ttry:\n\t\t\t\tupdateParticipantTaskActivityLog \u003d \"UPDATE participant.TaskActivityLog set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateParticipantTaskActivityLog, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.TaskActivityLog participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\n\t\t\t## update all the human Ids \n\t\t\t# update humanId of humanToDelete with humanIdToKeep for calendar.EventAttendance table \n\t\t\ttry:\n\t\t\t\tupdateCalendarEventAttendance \u003d \"UPDATE calendar.EventAttendance set humanId \u003d \" + str(humanIdToKeep) + \" WHERE humanId \u003d \" + str(humanToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateCalendarEventAttendance, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027calendar.EventAttendance humanId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# update humanId of humanToDelete with humanIdToKeep for participant.IncidentAttendeeLog table \t\n\t\t\ttry:\n\t\t\t\tupdateParticipantIncidentAttendeeLog \u003d \"UPDATE participant.IncidentAttendeeLog set humanId \u003d \" + str(humanIdToKeep) + \" WHERE humanId \u003d \" + str(humanToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateParticipantIncidentAttendeeLog, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.IncidentAttendeeLog humanId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t# update participantId of participantToDelete with humanIdToKeep for calendar.EventAttendance table \n\t\t\ttry:\n\t\t\t\tupdateParticipantEventAttendance \u003d \"UPDATE participant.EventAttendance set participantId \u003d \" + str(participantIdToKeep) + \" WHERE participantId \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runUpdateQuery(updateParticipantEventAttendance, tx \u003d txId)\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tupdateActionStr \u003d str(updateActionStr) + \u0027participant.EventAttendance participantId,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\t\n\t\t\t## delete record from participant and human table\n\t\t\tbreezeID \u003d system.db.runScalarPrepQuery(\"select breezeID from humans.human where id \u003d ?\", [humanToDelete])\n\t\t\t# delete record of particpantToDelete for participant.Participant table\n\t\t\ttry:\n\t\t\t\tsystem.perspective.print(\u0027particpantToDelete:\u0027+str(particpantToDelete))\n\t\t\t\tupdateParticipantIncidentAttendeeLog \u003d \"DELETE FROM participant.Participant WHERE id \u003d \" + str(particpantToDelete)\n\t\t\t\tresult \u003d system.db.runPrepUpdate(updateParticipantIncidentAttendeeLog, tx \u003d txId)\n\t\t\t\tsystem.perspective.print(\u0027DeleteP:\u0027+str(result))\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tdeleteActionStr \u003d str(deleteActionStr) + \u0027participant.Participant,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\t\n\t\t\t# delete record of humanToDelete for humans.Human table\t\n\t\t\ttry:\n\t\t\t\tsystem.perspective.print(\u0027humanToDelete:\u0027+str(humanToDelete))\n\t\t\t\tupdateParticipantIncidentAttendeeLog \u003d \"DELETE FROM humans.Human WHERE id \u003d \" + str(humanToDelete)\n\t\t\t\tresult \u003d system.db.runPrepUpdate(updateParticipantIncidentAttendeeLog, tx \u003d txId)\n\t\t\t\tsystem.perspective.print(\u0027DeleteH:\u0027+str(result))\n\t\t\t\tif result \u003e0:\n\t\t\t\t\tdeleteActionStr \u003d str(deleteActionStr) + \u0027humans.Human,\u0027\n\t\t\texcept Exception as Argument:\n\t\t\t\tcommitTransaction \u003d False\n\t\t\t\tsystem.perspective.print(\u0027Argument:\u0027+str(Argument))\n\t\t\t\n\t\t\t\n\t\t\tstaffId \u003d self.session.custom.loggedInStaffEmployeeID\n\t\t\tusername \u003d self.session.props.auth.user.userName\n\t\t\tkeepParticipant \u003d participantIdToKeep\n\t\t\tmergeParticipants \u003d particpantToDelete\n\t\t\ttimestamp \u003d system.date.now()\n\t\t\t\n\t\t\t# if commitTransaction \u003d true then commitTransaction\t\t\n\t\t\tif commitTransaction:\n\t\t\t\tsystem.perspective.print(\u0027CommitTransaction\u0027)\n\t\t\t\tsystem.db.commitTransaction(txId)\n## Change for Partcipant Events - Remove Breeze INtegration\n\t\t\t\t# remove humans for events on breeze\n#\t\t\t\tIntegrations.breeze.helper.removeBreezePerson(humanID\u003dhumanToDelete,breezeID\u003dbreezeID)\n#\t\t\t\tdeleteActionStr \u003d str(deleteActionStr) + \u0027breeze human,\u0027\n## End Change\n\t\t\t\t# create audit log for merge action\n\t\t\t\tactions \u003d \u0027Updated columns:[\u0027 + str(updateActionStr[:-1]) + \u0027], Deleted records from:[\u0027 + str(deleteActionStr[:-1]) + \u0027]\u0027\n#\t\t\t\tsystem.perspective.print(\u0027actions:\u0027+str(actions))\n\t\t\t\tmergeAuditLog \u003d \"INSERT INTO [participant].[MergeAudit] ([staffId],[username],[keepParticipant],[mergeParticipants],[actions],[timestamp]) VALUES (\" + str(staffId) + \",\u0027\" + str(username) + \"\u0027,\"  + str(keepParticipant) + \",\u0027\" + str(mergeParticipants) + \"\u0027,\u0027\" + str(actions) + \"\u0027, GETDATE())\" #+ str(timestamp) +\")\"\n\t\t\t\t# create log entry for action performed\n\t\t\t\tsystem.db.runUpdateQuery(mergeAuditLog)\n\t\t\t\tlogger \u003d system.util.getLogger(\"mergeAuditLog\")\n\t\t\t\tlogger.info(actions)\n\t\t\telse:\n\t\t\t\tsystem.db.rollbackTransaction(txId)\n\t\t\t\tsystem.perspective.print(\u0027rollbackTransaction\u0027)\n\t\t\tsystem.db.closeTransaction(txId)\n\t\t\n\t\t## enable again ok button once processing completed\n\t\tself.props.enabled \u003d True\t\t\t\t\t\n\t\tsystem.perspective.closePopup(\"ConfirmMerge_Popup\")\n\t\tsystem.perspective.sendMessage(\"MergeCompleted\", payload \u003d {}, scope \u003d \"page\")"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "OK"
            },
            "position": {
              "basis": "150px"
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "0px",
                "marginLeft": "0px",
                "marginTop": "0px"
              },
              "text": "OK"
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "Placeholder"
            },
            "position": {
              "basis": "60px",
              "grow": 1
            },
            "props": {
              "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
            },
            "type": "ia.display.view"
          },
          {
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "draggable": true,
                    "id": "ConfirmMerge_Popup",
                    "modal": false,
                    "overlayDismiss": false,
                    "resizable": true,
                    "showCloseIcon": true,
                    "type": "close",
                    "viewPath": "Settings/Merge/Templates/ConfirmMerge_popup",
                    "viewportBound": false
                  },
                  "scope": "C",
                  "type": "popup"
                }
              }
            },
            "meta": {
              "name": "Cancel"
            },
            "position": {
              "basis": "150px"
            },
            "props": {
              "style": {
                "classes": "Buttons/Delete",
                "marginBottom": "0px",
                "marginLeft": "0px",
                "marginTop": "0px"
              },
              "text": "Cancel"
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "Placeholder_1"
            },
            "position": {
              "basis": "50%",
              "grow": 1
            },
            "props": {
              "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
            },
            "type": "ia.display.view"
          }
        ],
        "meta": {
          "name": "Root Actions"
        },
        "position": {
          "basis": "40px"
        },
        "props": {
          "style": {
            "marginTop": 10
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Placeholder_0"
            },
            "position": {
              "basis": "50%",
              "grow": 1
            },
            "props": {
              "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "basis": "400px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Background/Alternative"
              },
              "text": "*Note: This action can\u0027t be undone",
              "textStyle": {
                "classes": "Text/Error_Message"
              }
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "Placeholder"
            },
            "position": {
              "basis": "50%",
              "grow": 1
            },
            "props": {
              "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
            },
            "type": "ia.display.view"
          }
        ],
        "meta": {
          "name": "Error_Msg"
        },
        "position": {
          "basis": "40px"
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Alternative"
      }
    },
    "type": "ia.container.flex"
  }
}