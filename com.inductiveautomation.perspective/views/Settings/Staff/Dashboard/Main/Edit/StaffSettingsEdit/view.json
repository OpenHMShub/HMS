{
  "custom": {
    "editData": {
      "active": 1,
      "altPhone": "",
      "assignment": "",
      "breezeId": -1,
      "dob": "",
      "email": "",
      "firstName": "",
      "gender": "",
      "genderId": -1,
      "humanId": -1,
      "isFacilitator": 0,
      "jobTitle": "",
      "lastName": "",
      "middleName": "",
      "phone": "",
      "staffId": -1,
      "suffix": ""
    },
    "emailValid": false,
    "staffId": -1,
    "updateAll": true
  },
  "params": {
    "rowData": {
      "active": 1,
      "altPhone": "",
      "assignment": "",
      "breezeId": -1,
      "dob": "",
      "email": "",
      "firstName": "",
      "gender": "",
      "genderId": -1,
      "humanId": -1,
      "isFacilitator": 0,
      "jobTitle": "",
      "lastName": "",
      "middleName": "",
      "phone": "",
      "staffId": -1,
      "suffix": ""
    }
  },
  "propConfig": {
    "custom.editData.email": {
      "onChange": {
        "enabled": null,
        "script": "\tif self.custom.editData.email !\u003d self.params.rowData.email:\n\t\tself.custom.emailValid \u003d False"
      }
    },
    "custom.emailValid": {
      "persistent": true
    },
    "custom.staffId": {
      "binding": {
        "config": {
          "path": "view.params.rowData.staffId"
        },
        "type": "property"
      },
      "onChange": {
        "enabled": null,
        "script": "\t#Get a copy of the row data\n\tself.custom.editData \u003d self.params.rowData\n\t#Verify the email is valid\n\temail \u003d self.custom.editData.email\n\t#system.perspective.print(email)\n\tself.custom.emailValid \u003d pattern.verifyEmail(email)\t"
      },
      "persistent": true
    },
    "custom.updateAll": {
      "persistent": true
    },
    "params.rowData": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 297,
      "width": 1224
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView Header"
        },
        "position": {
          "basis": "25px",
          "shrink": 0
        },
        "props": {
          "params": {
            "Text": "Volunteer Administration"
          },
          "path": "Settings/Templates/Header"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedView Row1"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.active": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.active"
              },
              "type": "property"
            }
          },
          "props.params.breezeId": {
            "binding": {
              "config": {
                "path": "view.custom.editData.breezeId"
              },
              "type": "property"
            }
          },
          "props.params.dob": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.dob"
              },
              "type": "property"
            }
          },
          "props.params.firstName": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.firstName"
              },
              "type": "property"
            }
          },
          "props.params.genderId": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.genderId"
              },
              "type": "property"
            }
          },
          "props.params.humanId": {
            "binding": {
              "config": {
                "path": "view.custom.editData.humanId"
              },
              "type": "property"
            }
          },
          "props.params.isFacilitator": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.isFacilitator"
              },
              "type": "property"
            }
          },
          "props.params.lastName": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.lastName"
              },
              "type": "property"
            }
          },
          "props.params.middleName": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.middleName"
              },
              "type": "property"
            }
          },
          "props.params.nickname": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.nickName"
              },
              "type": "property"
            }
          },
          "props.params.staffId": {
            "binding": {
              "config": {
                "path": "view.custom.editData.staffId"
              },
              "type": "property"
            }
          },
          "props.params.suffix": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.suffix"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Settings/Staff/Dashboard/Main/Edit/Row1",
          "style": {
            "marginLeft": 25,
            "marginRight": 25
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedView Row2"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.altPhone": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.altPhone"
              },
              "type": "property"
            }
          },
          "props.params.breezeId": {
            "binding": {
              "config": {
                "path": "view.custom.editData.breezeId"
              },
              "type": "property"
            }
          },
          "props.params.email": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.email"
              },
              "type": "property"
            }
          },
          "props.params.humanId": {
            "binding": {
              "config": {
                "path": "view.custom.editData.humanId"
              },
              "type": "property"
            }
          },
          "props.params.jobTitle": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.jobTitle"
              },
              "type": "property"
            }
          },
          "props.params.phone": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.phone"
              },
              "type": "property"
            }
          },
          "props.params.staffId": {
            "binding": {
              "config": {
                "path": "view.custom.editData.staffId"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Settings/Staff/Dashboard/Main/Edit/Row2",
          "style": {
            "marginLeft": 25,
            "marginRight": 25
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedView Row3"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.assignment": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.assignment"
              },
              "type": "property"
            }
          },
          "props.params.email": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.editData.email"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Settings/Staff/Dashboard/Main/Edit/Row3",
          "style": {
            "marginLeft": 25,
            "marginRight": 25
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "32px",
          "display": false
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "\"StaffID: \" + {view.custom.staffId}\r\n+ \", Active: \" + {view.custom.editData.active}\r\n+ \", Facilitator: \" + {view.custom.editData.isFacilitator}\r\n+ \", First: \" + {view.custom.editData.firstName}\r\n+ \", Middle: \" + {view.custom.editData.middleName}\r\n+ \", Last: \" + {view.custom.editData.lastName}\r\n+ \", Suffix: \" + {view.custom.editData.suffix}\r\n+ \", DOB: \" + {view.custom.editData.dob}\r\n+ \", Gender: \" + {view.custom.editData.genderId}\r\n+ \", Phone: \" + {view.custom.editData.phone}\r\n+ \", Alt Phone: \" + {view.custom.editData.altPhone}\r\n+ \", email: \" + {view.custom.editData.email}\r\n+ \", Title: \" + {view.custom.editData.jobTitle}"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\t#Send the message to refresh the table\n\tmessageType \u003d \u0027refreshStaffSettings\u0027\n\tsystem.perspective.sendMessage(messageType)\n\tsystem.perspective.sendMessage(messageType\u003d\"Clear_StaffPanel\", payload\u003d{}, scope\u003d\"session\")\n"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_new"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Secondary",
                "marginBottom": "5px",
                "marginLeft": "20px",
                "marginTop": "5px"
              },
              "text": "New Staff"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\timport traceback\n\ttry:\n\t\tproject \u003d \"HMS\"\n\t\t### Declare parameters \n\t\tstaffId \u003d self.view.custom.staffId\n\t\thumanId \u003d self.view.custom.editData.humanId\n\t\tactive \u003d self.view.custom.editData.active\n\t\tisFacilitator \u003d self.view.custom.editData.isFacilitator\n\t\tfirstName \u003d self.view.custom.editData.firstName\n\t\tmiddleName \u003d self.view.custom.editData.middleName\n\t\tlastName \u003d self.view.custom.editData.lastName\n\t\tsuffix \u003d self.view.custom.editData.suffix\n\t\tdob \u003d self.view.custom.editData.dob\n\t\tgenderId \u003d self.view.custom.editData.genderId\n\t\tphone \u003d self.view.custom.editData.phone\n\t\tsystem.perspective.print(phone) \n\t\taltPhone \u003d self.view.custom.editData.altPhone\n\t\temail \u003d self.view.custom.editData.email\n\t\t##strip email address to avoid addition of any space or new line outside email address\n\t\temail \u003d email.strip()\n\t\tjobTitle \u003d self.view.custom.editData.jobTitle\n\t\tassignment \u003d self.view.custom.editData.assignment\n\t\t## Check if parameters are filled in correctly \n\t\tif None in [staffId,active,isFacilitator,firstName,lastName,genderId]:\n\t\t\tvalid \u003d False\n\t\t\t#system.perspective.print(\u0027Null Error\u0027)\n\t\t\terror_message \u003d \"Please fill in all the mandatory fields correctly before saving (Null Error)\"\n\t\telif firstName.strip() \u003d\u003d \"\":\n\t\t\tvalid \u003d False\n\t\t\t#system.perspective.print(\u0027First Name Error\u0027)\n\t\t\terror_message \u003d \"Please fill in the First Name before saving.\"\n\t\telif lastName.strip() \u003d\u003d \"\":\n\t\t\tvalid \u003d False\n\t\t\t#system.perspective.print(\u0027Last Name Error\u0027)\n\t\t\terror_message \u003d \"Please fill in the Last Name before saving.\"\n\t\telif genderId \u003c 0:\n\t\t\tvalid \u003d False\n\t\t\t#system.perspective.print(\u0027Gender Error\u0027)\n\t\t\terror_message \u003d \"Please select a Gender before saving.\"\n\t\telse:\n\t\t\tvalid \u003d True\n\t\t\tsystem.perspective.print(\"Staff Settings Data Valid\")\n\t\t\n\t\t### Check if data is valid otherwise show error message.\n\t\tif valid:\n\t\t\t## Convert Phone numbers to numeric value only\n\t\t\tphone \u003d normalize.phone(phone)\n\t\t\taltPhone \u003d normalize.phone(altPhone)\n\t\t\t#DOB validation\t\n\t\t\ttry:\n\t\t\t\tdob \u003d system.date.parse(dob)\n\t\t\t\t#system.perspective.print(\u0027DOB sucessfully parsed: \u0027 + str(dob))\n\t\t\texcept:\n\t\t\t\tdob \u003d \u00271900-01-01 00:00:00\u0027\n\t\t\t\t#system.perspective.print(\u0027DOB set to default: \u0027 + str(dob))\n\t\t\t##### Check if the user is editing existing data\n\t\t\tif staffId \u003d\u003d -1:\n\t\t\t\t### Create transaction\n\t\t\t\ttransactionFailed \u003d False\n\t\t\t\ttxId1 \u003d system.db.beginTransaction(timeout\u003d10000)\n\t\t\t\ttry:\n\t\t\t\t\t#Insert the Human Data\n\t\t\t\t\tpath \u003d \"Settings/Staff/Insert New Human\"\n\t\t\t\t\tparameters \u003d {\n\t\t\t\t\t\t\t\t\"firstName\":firstName,\n\t\t\t\t\t\t\t\t\"middleName\":middleName,\n\t\t\t\t\t\t\t\t\"lastName\":lastName,\n\t\t\t\t\t\t\t\t\"suffix\":suffix,\n\t\t\t\t\t\t\t\t\"dob\":dob,\n\t\t\t\t\t\t\t\t\"genderId\":genderId,\n\t\t\t\t\t\t\t\t\"phone\":phone,\n\t\t\t\t\t\t\t\t\"altPhone\":altPhone,\n\t\t\t\t\t\t\t\t\"email\":email\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\thumanId \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, tx\u003dtxId1, getKey\u003dTrue)\n\t\t\t\t\t#Insert the Staff Data\n\t\t\t\t\tpath \u003d \"Settings/Staff/InsertNewStaff\"\n\t\t\t\t\tparameters \u003d {\n\t\t\t\t\t\t\t\t\"humanId\":humanId,\n\t\t\t\t\t\t\t\t\"isFacilitator\":isFacilitator,\n\t\t\t\t\t\t\t\t\"jobTitle\":jobTitle,\n\t\t\t\t\t\t\t\t\"assignment\":assignment\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\tstaffId \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, tx\u003dtxId1, getKey\u003dTrue)\n\t\t\t\texcept:\n\t\t\t\t\ttransactionFailed \u003d True\n\t\t\t\t\tlogger \u003d system.util.getLogger(\"Settings Staff Button Save\")\n\t\t\t\t\tmsg \u003d traceback.format_exc()\n\t\t\t\t\tlogger.error(msg)\n\t\t\t\t### Check if an error occured rollback the transaction\n\t\t\t\tif transactionFailed:\n\t\t\t\t\tsystem.db.rollbackTransaction(txId1)\n\t\t\t\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\n\t\t\t\t\tRefresh \u003d 0\n\t\t\t\t### Otherwise commit and refresh\n\t\t\t\telse:\n\t\t\t\t\tsystem.db.commitTransaction(txId1)\n\t\t\t\t\t#Send to Breeze\n\t\t\t\t\tif isFacilitator:\n\t\t\t\t\t\tIntegrations.breeze.helper.addHumanToBreeze(humanId, tags \u003d [\u0027Staff\u0027,\u0027Facilitator\u0027])\n\t\t\t\t\telse:\n\t\t\t\t\t\tIntegrations.breeze.helper.addHumanToBreeze(humanId, tags \u003d [\u0027Staff\u0027])\n\t\t\t\t\t#Show the success message\n\t\t\t\t\tself.getSibling(\"Label\").showMessage(\"New Staff Created Successfully\")\n\t\t\t\t\t#Refresh the table\n\t\t\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshStaffSettings\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshStaffSettingsQuery\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\t\tsystem.perspective.sendMessage(messageType\u003d\"Clear_StaffPanel\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\t### Always close the transaction\t\n\t\t\t\tsystem.db.closeTransaction(txId1)\n\t\t\telif staffId \u003e\u003d 0:\n\t\t\t\t#If not active or email has changed remove the user credentials first\n\t\t\t\toldEmail \u003d self.view.params.rowData.email\n\t\t\t\t\n\t\t\t\tif not active or oldEmail !\u003d email:\n\t\t\t\t\ttry:\n\t\t\t\t\t\t# check if email not used by another active staff\n\t\t\t\t\t\tresult \u003d system.db.runPrepQuery(\"SELECT e.ID as \u0027staffId\u0027 FROM staff.Employee e INNER JOIN  humans.Human h on e.humanId \u003d h.id WHERE e.timeRetired is null AND h.email \u003d \u0027\"+str(oldEmail)+\"\u0027 AND e.ID !\u003d \"+str(staffId))\n\t\t\t\t\t\tif result.getRowCount()\u003c1:\t\t\t\t\n\t\t\t\t\t\t\tremoveUser \u003d system.user.removeUser(\u0027default\u0027,oldEmail)\n\t\t\t\t\texcept:\n\t\t\t\t\t\tpass\n\t\t\t\t\ttry:\n\t\t\t\t\t\t# check if email not used by another active staff\n\t\t\t\t\t\tresult \u003d system.db.runPrepQuery(\"SELECT e.ID as \u0027staffId\u0027 FROM staff.Employee e INNER JOIN  humans.Human h on e.humanId \u003d h.id WHERE e.timeRetired is null AND h.email \u003d \u0027\"+str(email)+\"\u0027 AND e.ID !\u003d \"+str(staffId))\n\t\t\t\t\t\tif result.getRowCount()\u003c1:\n\t\t\t\t\t\t\tremoveUser \u003d system.user.removeUser(\u0027default\u0027,email)\n\t\t\t\t\texcept:\n\t\t\t\t\t\tpass\n\t\t\t\t### Create transaction\n\t\t\t\ttransactionFailed \u003d False\n\t\t\t\ttxId1 \u003d system.db.beginTransaction(timeout\u003d10000)\n\t\t\t\ttry:\n\t\t\t\t\tif active:\n\t\t\t\t\t\ttimeRetired \u003d None\n\t\t\t\t\telse:\n\t\t\t\t\t\ttimeRetired \u003d system.date.now()\n\t\t\t\t\t#Update the Human Data\n\t\t\t\t\tpath \u003d \"Settings/Staff/UpdateStaffHuman\"\n\t\t\t\t\tparameters \u003d {\n\t\t\t\t\t\t\t\t\"humanId\":humanId,\n\t\t\t\t\t\t\t\t\"firstName\":firstName,\n\t\t\t\t\t\t\t\t\"middleName\":middleName,\n\t\t\t\t\t\t\t\t\"lastName\":lastName,\n\t\t\t\t\t\t\t\t\"suffix\":suffix,\n\t\t\t\t\t\t\t\t\"dob\":dob,\n\t\t\t\t\t\t\t\t\"genderId\":genderId,\n\t\t\t\t\t\t\t\t\"phone\":phone,\n\t\t\t\t\t\t\t\t\"altPhone\":altPhone,\n\t\t\t\t\t\t\t\t\"email\":email,\n\t\t\t\t\t\t\t\t\"timeRetired\":timeRetired\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\tsuccess \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, tx\u003dtxId1, getKey\u003dTrue)\n\t\t\t\t\t#Update the Staff Data\n\n\t\t\t\t\tpath \u003d \"Settings/Staff/UpdateStaff\"\n\t\t\t\t\tparameters \u003d {\n\t\t\t\t\t\t\t\t\"staffId\":staffId,\n\t\t\t\t\t\t\t\t\"isFacilitator\":isFacilitator,\n\t\t\t\t\t\t\t\t\"jobTitle\":jobTitle,\n\t\t\t\t\t\t\t\t\"timeRetired\":timeRetired,\n\t\t\t\t\t\t\t\t\"assignment\":assignment\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\tstaffId \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, tx\u003dtxId1, getKey\u003dTrue)\n\t\t\t\texcept:\n\t\t\t\t\ttransactionFailed \u003d True\n\t\t\t\t\tlogger \u003d system.util.getLogger(\"Settings Staff Button Save\")\n\t\t\t\t\tmsg \u003d traceback.format_exc()\n\t\t\t\t\tlogger.error(msg)\n\t\t\t\t### Check if an error occured rollback the transaction\n\t\t\t\tif transactionFailed:\n\t\t\t\t\tsystem.db.rollbackTransaction(txId1)\n\t\t\t\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\n\t\t\t\t\tRefresh \u003d 0\n\t\t\t\t### Otherwise commit and refresh\n\t\t\t\telse:\n\t\t\t\t\tsystem.db.commitTransaction(txId1)#Update existing data on specified row_id\n\t\t\t\t\t#Send to Breeze if necessary\n\t\t\t\t\tupdateBreeze \u003d False\n\t\t\t\t\tactiveSQL \u003d self.view.params.rowData.active\n\t\t\t\t\tisFacilitatorSQL \u003d self.view.params.rowData.isFacilitator\n\t\t\t\t\tfirstNameSQL \u003d self.view.params.rowData.firstName\n\t\t\t\t\tlastNameSQL \u003d self.view.params.rowData.lastName\n\t\t\t\t\tphoneSQL \u003d self.view.params.rowData.phone\n\t\t\t\t\temailSQL \u003d self.view.params.rowData.email\n\t\t\t\t\tif (\n\t\t\t\t\t\tfirstNameSQL !\u003d firstName\n\t\t\t\t\t\tor lastNameSQL !\u003d lastName\n\t\t\t\t\t\tor phoneSQL !\u003d phone\n\t\t\t\t\t\tor emailSQL !\u003d email\n\t\t\t\t\t\tor activeSQL !\u003d active\n\t\t\t\t\t\tor isFacilitatorSQL !\u003d isFacilitator\n\t\t\t\t\t\tor active \u003d\u003d False\n\t\t\t\t\t\t):\n\t\t\t\t\t\tupdateBreeze \u003d False\n\t\t\t\t\tif updateBreeze:\n\t\t\t\t\t\tsystem.perspective.print(\u0027Breeze Update Required\u0027)\n\t\t\t\t\t\tIntegrations.breeze.helper.removeBreezePerson(humanID\u003dhumanId)\n\t\t\t\t\t\tif active:\n\t\t\t\t\t\t\tif isFacilitator:\n\t\t\t\t\t\t\t\tIntegrations.breeze.helper.addHumanToBreeze(humanId, tags \u003d [\u0027Staff\u0027,\u0027Facilitator\u0027])\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tIntegrations.breeze.helper.addHumanToBreeze(humanId, tags \u003d [\u0027Staff\u0027])\n\t\t\t\t\t#Show the success message\n\t\t\t\t\tself.getSibling(\"Label\").showMessage(\"Staff Updated Successfully\")\n\t\t\t\t\t#Refresh the table\n\t\t\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshStaffSettings\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshStaffSettingsQuery\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\t\tsystem.perspective.sendMessage(messageType\u003d\"Clear_StaffPanel\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\t### Always close the transaction\t\n\t\t\t\tsystem.db.closeTransaction(txId1)\n\t\telse:\n\t\t\t#Show the error message\n\t\t\tself.getSibling(\"Label\").showMessage(error_message)\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"Staff Settings button_save\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)\n\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_save"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "expression": "if({view.custom.editData.staffId} \u003d -1,\u0027Save Staff\u0027,\u0027Update Staff\u0027)"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              }
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\t#Individual user names are the email address\n\temail \u003d self.view.custom.editData.email\n\tfirstName \u003d self.view.custom.editData.firstName\n\tlastName \u003d self.view.custom.editData.lastName\n\tstaffId \u003d self.view.custom.staffId\n\t#if the email is not valid then stop here\n\tif not self.view.custom.emailValid:\n\t\treturn\n\t#Determine if this is a new user or existing user\n\tusers \u003d system.user.getUsers(\u0027default\u0027)\n\tnewUser \u003d True\n\tuserRoles \u003d None\n\tfor user in users:\n\t\ttestUsername \u003d user.get(\u0027username\u0027)\n\t\tif testUsername \u003d\u003d email:\n\t\t\t#If existing user then get existing roles\n\t\t\tnewUser \u003d False\n\t\t\tbreak\n\t\n\tparameters \u003d {\n\t\t\t\t\u0027messageName\u0027:None,\n\t\t\t\t\u0027dockName\u0027:\u0027UserCredentials\u0027,\n\t\t\t\t\u0027firstName\u0027:firstName,\n\t\t\t\t\u0027lastName\u0027:lastName,\n\t\t\t\t\u0027email\u0027:email,\n\t\t\t\t\u0027staffId\u0027:staffId,\n\t\t\t\t\u0027newUser\u0027:newUser\n\t\t\t\t}\n\tsystem.perspective.openDock(\u0027UserCredentials\u0027,params \u003d parameters)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_setUser"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "expression": "{view.custom.editData.staffId} \u003e -1 \r\n\u0026\u0026 {view.custom.emailValid} \r\n\u0026\u0026 {view.params.rowData.active}"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Delete",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              },
              "text": "User Credentials"
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "Label",
              "visible": false
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Text/Error_Message"
              },
              "text": "Please fill in all the fields correctly before saving."
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "showMessage",
                  "params": [
                    "message"
                  ],
                  "script": "\timport time\n\tself.props.text \u003d message\n\tself.meta.visible \u003d True\n\ttime.sleep(3)\n\tself.meta.visible \u003d False\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "root Actions"
        },
        "position": {
          "basis": "50px",
          "shrink": 0
        },
        "props": {
          "style": {
            "borderTopColor": "#9db8d1",
            "borderTopStyle": "solid",
            "borderTopWidth": "1px",
            "classes": "Background/Default",
            "marginTop": "5px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "Clear_StaffPanel",
          "pageScope": true,
          "script": "\tself.getChild(\"EmbeddedView Row1\").props.params.lastName \u003d \u0027\u0027\n\tself.getChild(\"EmbeddedView Row1\").props.params.dob \u003d \u0027\u0027\n\tself.getChild(\"EmbeddedView Row1\").props.params.genderId \u003d -1\n\tself.getChild(\"EmbeddedView Row1\").props.params.staffId \u003d -1\n\tself.getChild(\"EmbeddedView Row1\").props.params.suffix \u003d \u0027\u0027\n\tself.getChild(\"EmbeddedView Row1\").props.params.breezeId \u003d -1\n\tself.getChild(\"EmbeddedView Row1\").props.params.firstName \u003d \u0027\u0027\n\tself.getChild(\"EmbeddedView Row1\").props.params.humanId \u003d -1\n\tself.getChild(\"EmbeddedView Row1\").props.params.middleName \u003d \u0027\u0027\n\tself.getChild(\"EmbeddedView Row1\").props.params.active \u003d 1\n\tself.getChild(\"EmbeddedView Row1\").props.params.nickname \u003d \u0027\u0027\n\tself.getChild(\"EmbeddedView Row1\").props.params.isFacilitator \u003d 0\n\t\n\tself.getChild(\"EmbeddedView Row2\").props.params.email \u003d \u0027\u0027\n\tself.getChild(\"EmbeddedView Row2\").props.params.phone \u003d \u0027\u0027\n\tself.getChild(\"EmbeddedView Row2\").props.params.staffId \u003d -1\n\tself.getChild(\"EmbeddedView Row2\").props.params.breezeId \u003d -1\n\tself.getChild(\"EmbeddedView Row2\").props.params.humanId \u003d -1\n\tself.getChild(\"EmbeddedView Row2\").props.params.altPhone \u003d \u0027\u0027\n\tself.getChild(\"EmbeddedView Row2\").props.params.jobTitle \u003d \u0027\u0027\n\t\n\tself.getChild(\"EmbeddedView Row3\").props.params.email \u003d \u0027\u0027\n\t\n\t",
          "sessionScope": true,
          "viewScope": true
        }
      ]
    },
    "type": "ia.container.flex"
  }
}