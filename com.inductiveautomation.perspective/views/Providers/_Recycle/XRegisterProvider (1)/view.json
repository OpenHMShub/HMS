{
  "custom": {
    "_devPulse": true
  },
  "params": {
    "providerInfo": {
      "providerId": 227,
      "providerName": "someName",
      "street": "street01"
    }
  },
  "propConfig": {
    "custom._devPulse": {
      "onChange": {
        "enabled": null,
        "script": "\troot \u003d self.getChild(\"root\")\n\tif currentValue.value:\n\t\troot.insertProviderDb()\n\t\t#root.updateProviderDb()\n\t\tpass"
      },
      "persistent": true
    },
    "params.providerInfo": {
      "onChange": {
        "enabled": null,
        "script": "\troot \u003d self.getChild(\"root\")\n\t\n\tproviderInfo \u003d {\t\n\t\t\u0027providerId\u0027: currentValue.value[\u0027providerId\u0027].value, \n\t\t\u0027providerName\u0027: currentValue.value[\u0027providerName\u0027].value,\n\t\t\u0027street\u0027: currentValue.value[\u0027street\u0027].value\n\t}\n\tsystem.perspective.print((\u0027provInfo:\u0027,providerInfo))\n\troot.setFormComponents(providerInfo)\n\n"
      },
      "paramDirection": "input",
      "persistent": true
    },
    "params.providerInfo.providerId": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.providerInfo.providerName": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.providerInfo.street": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 900,
      "width": 600
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "emvHeader"
        },
        "position": {
          "shrink": 0
        },
        "props": {
          "params": {
            "text": "Edit Provider"
          },
          "path": "Providers/Registration/Cards/RegistrationHeader",
          "useDefaultViewHeight": true
        },
        "scripts": {
          "customMethods": [
            {
              "name": "cleanForm",
              "params": [],
              "script": "\tself.parent.getChild(\"FlexContainer Basic\").getChild(\"FlexContainer Left\").getChild(\"ProviderName\").props.params.inputText \u003d \"\"\n\tself.parent.getChild(\"FlexContainer Basic\").getChild(\"FlexContainer Left\").getChild(\"Address\").props.params.inputText \u003d \"\"\n\tself.parent.getChild(\"FlexContainer Basic\").getChild(\"FlexContainer Left\").getChild(\"State\").props.params.inputText \u003d \"\"\n\tself.parent.getChild(\"FlexContainer Basic\").getChild(\"FlexContainer Left\").getChild(\"Zip\").props.params.inputText \u003d \"\"\n\t\n\tself.parent.getChild(\"FlexContainer Basic\").getChild(\"FlexContainer Right\").getChild(\"LocationDesc\").props.params.inputText \u003d \"\"\n\t\n\tself.parent.getChild(\"FlexContainer Contact\").getChild(\"FlexContainer Left\").getChild(\"Phone\").props.params.inputText \u003d \"\"\n\tself.parent.getChild(\"FlexContainer Contact\").getChild(\"FlexContainer Left\").getChild(\"Email\").props.params.inputText \u003d \"\"\n\t\n\tself.parent.getChild(\"FlexContainer Contact\").getChild(\"FlexContainer Right\").getChild(\"ContactName\").props.params.inputText \u003d \"\"\n\tself.parent.getChild(\"FlexContainer Contact\").getChild(\"FlexContainer Right\").getChild(\"ContactPhone\").props.params.inputText \u003d \"\"\n\tself.view.params.provId \u003d 0"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "children": [
              {
                "meta": {
                  "name": "ProviderName"
                },
                "position": {
                  "shrink": 0
                },
                "props": {
                  "params": {
                    "inputText": "",
                    "text": "Provider Name*"
                  },
                  "path": "Providers/Registration/Cards/TextInput",
                  "style": {
                    "marginTop": "5px"
                  },
                  "useDefaultViewHeight": true
                },
                "type": "ia.display.view"
              },
              {
                "meta": {
                  "name": "Street"
                },
                "position": {
                  "shrink": 0
                },
                "props": {
                  "params": {
                    "inputText": "",
                    "text": "Address*"
                  },
                  "path": "Providers/Registration/Cards/TextInput",
                  "style": {
                    "marginTop": "5px"
                  },
                  "useDefaultViewHeight": true
                },
                "type": "ia.display.view"
              },
              {
                "meta": {
                  "name": "City"
                },
                "props": {
                  "params": {
                    "inputText": "",
                    "text": "City"
                  },
                  "path": "Providers/Registration/Cards/TextInput",
                  "style": {
                    "marginTop": "5px"
                  },
                  "useDefaultViewHeight": true
                },
                "type": "ia.display.view"
              },
              {
                "meta": {
                  "name": "State"
                },
                "position": {
                  "shrink": 0
                },
                "props": {
                  "params": {
                    "inputText": "",
                    "text": "State"
                  },
                  "path": "Providers/Registration/Cards/TextInput",
                  "style": {
                    "marginTop": "5px"
                  },
                  "useDefaultViewHeight": true
                },
                "type": "ia.display.view"
              },
              {
                "meta": {
                  "name": "ZipCode"
                },
                "position": {
                  "shrink": 0
                },
                "props": {
                  "params": {
                    "inputText": "",
                    "text": "Zip Code"
                  },
                  "path": "Participants/Registration/Cards/TextInput",
                  "style": {
                    "marginTop": "5px"
                  },
                  "useDefaultViewHeight": true
                },
                "type": "ia.display.view"
              }
            ],
            "meta": {
              "name": "FlexContainer Left"
            },
            "position": {
              "basis": "200px",
              "grow": 1
            },
            "props": {
              "direction": "column",
              "style": {
                "paddingLeft": "25px",
                "paddingRight": "20px"
              }
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "custom": {
                  "_devPulse": true
                },
                "meta": {
                  "name": "ProviderTypeId"
                },
                "propConfig": {
                  "custom._devPulse": {
                    "onChange": {
                      "enabled": null,
                      "script": "\tif currentValue.value is True:\n\t\tself.setOptions()\n\telif currentValue.value is False:\n\t\tself.props.params.options \u003d []"
                    }
                  }
                },
                "props": {
                  "params": {
                    "options": [
                      {
                        "label": "Community Partner",
                        "value": 0
                      },
                      {
                        "label": "Law Enforcement",
                        "value": 3
                      },
                      {
                        "label": "Medical Facility",
                        "value": 2
                      },
                      {
                        "label": "Other",
                        "value": 5
                      }
                    ],
                    "selectedValue": null,
                    "text": "Provider Type"
                  },
                  "path": "Providers/Registration/Cards/SelectionInput",
                  "style": {
                    "marginTop": "5px"
                  },
                  "useDefaultViewHeight": true
                },
                "scripts": {
                  "customMethods": [
                    {
                      "name": "setOptions",
                      "params": [],
                      "script": "\tquery \u003d \"\"\"\nSELECT [id]\n\t,[providerTypeName]\nFROM [HMSOps].[organization].[ProviderType]\nWHERE providerTypeName NOT IN (\u0027Presenter-Volunteer\u0027,\u0027Insurance\u0027)\nORDER BY [providerTypeName]\n\t\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[1]) for x in result]\n\n\t# Version 2 set options as dataset\n\t#self.props.params.options \u003d result"
                    }
                  ],
                  "extensionFunctions": null,
                  "messageHandlers": []
                },
                "type": "ia.display.view"
              },
              {
                "meta": {
                  "name": "LocationDescription"
                },
                "position": {
                  "shrink": 0
                },
                "props": {
                  "params": {
                    "inputText": "",
                    "text": "Location Description"
                  },
                  "path": "Providers/Registration/Cards/TextInput",
                  "style": {
                    "marginTop": "5px"
                  },
                  "useDefaultViewHeight": true
                },
                "type": "ia.display.view"
              },
              {
                "custom": {
                  "changed": false
                },
                "meta": {
                  "name": "Active"
                },
                "position": {
                  "basis": "36px"
                },
                "props": {
                  "style": {
                    "classes": "Text/Add_HeaderText"
                  },
                  "text": "Active",
                  "textPosition": "left"
                },
                "type": "ia.input.checkbox"
              }
            ],
            "meta": {
              "name": "FlexContainer Right"
            },
            "position": {
              "basis": "200px",
              "grow": 1
            },
            "props": {
              "direction": "column",
              "style": {
                "paddingLeft": "15px",
                "paddingRight": "30px"
              }
            },
            "type": "ia.container.flex"
          }
        ],
        "meta": {
          "name": "FlexContainer Basic"
        },
        "position": {
          "shrink": 0
        },
        "props": {
          "style": {
            "borderBottomColor": "#e6e6e6",
            "borderBottomStyle": "solid",
            "borderBottomWidth": 1,
            "paddingBottom": "20px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "children": [
              {
                "meta": {
                  "name": "Phone"
                },
                "position": {
                  "shrink": 0
                },
                "props": {
                  "params": {
                    "inputText": "",
                    "text": "Provider Phone"
                  },
                  "path": "Participants/Registration/Cards/TextInput",
                  "style": {
                    "marginTop": "5px"
                  },
                  "useDefaultViewHeight": true
                },
                "type": "ia.display.view"
              },
              {
                "meta": {
                  "name": "Email"
                },
                "position": {
                  "shrink": 0
                },
                "props": {
                  "params": {
                    "inputText": "",
                    "text": "Email Address"
                  },
                  "path": "Participants/Registration/Cards/TextInput",
                  "style": {
                    "marginTop": "5px"
                  },
                  "useDefaultViewHeight": true
                },
                "type": "ia.display.view"
              },
              {
                "meta": {
                  "name": "Website"
                },
                "position": {
                  "basis": "320px"
                },
                "props": {
                  "params": {
                    "inputText": "",
                    "text": "Website"
                  },
                  "path": "Participants/Registration/Cards/TextInput",
                  "style": {
                    "marginTop": "5px"
                  },
                  "useDefaultViewHeight": true
                },
                "type": "ia.display.view"
              }
            ],
            "meta": {
              "name": "FlexContainer Left"
            },
            "position": {
              "basis": "200px",
              "grow": 1
            },
            "props": {
              "direction": "column",
              "style": {
                "paddingLeft": "25px",
                "paddingRight": "20px"
              }
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "ContactName"
                },
                "position": {
                  "shrink": 0
                },
                "props": {
                  "params": {
                    "inputText": "",
                    "text": "Contact Name"
                  },
                  "path": "Participants/Registration/Cards/TextInput",
                  "style": {
                    "marginTop": "5px"
                  },
                  "useDefaultViewHeight": true
                },
                "type": "ia.display.view"
              },
              {
                "meta": {
                  "name": "ContactPhone"
                },
                "position": {
                  "shrink": 0
                },
                "props": {
                  "params": {
                    "inputText": "",
                    "text": "Contact Phone"
                  },
                  "path": "Participants/Registration/Cards/TextInput",
                  "style": {
                    "marginTop": "5px"
                  },
                  "useDefaultViewHeight": true
                },
                "type": "ia.display.view"
              }
            ],
            "meta": {
              "name": "FlexContainer Right"
            },
            "position": {
              "basis": "200px",
              "grow": 1
            },
            "props": {
              "direction": "column",
              "style": {
                "paddingLeft": "15px",
                "paddingRight": "30px"
              }
            },
            "type": "ia.container.flex"
          }
        ],
        "meta": {
          "name": "FlexContainer Contact"
        },
        "position": {
          "basis": "221px",
          "shrink": 0
        },
        "props": {
          "style": {
            "borderBottomColor": "#e6e6e6",
            "borderBottomStyle": "solid",
            "borderBottomWidth": 1,
            "paddingBottom": "20px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "FlexContainer Left"
            },
            "position": {
              "basis": "200px",
              "grow": 1
            },
            "props": {
              "direction": "column",
              "style": {
                "paddingLeft": "25px",
                "paddingRight": "20px"
              }
            },
            "type": "ia.container.flex"
          },
          {
            "meta": {
              "name": "FlexContainer Right"
            },
            "position": {
              "basis": "200px",
              "grow": 1
            },
            "props": {
              "direction": "column",
              "style": {
                "paddingLeft": "15px",
                "paddingRight": "30px"
              }
            },
            "type": "ia.container.flex"
          }
        ],
        "meta": {
          "name": "FlexContainer Extra"
        },
        "position": {
          "shrink": 0
        },
        "props": {
          "style": {
            "borderBottomColor": "#e6e6e6",
            "borderBottomStyle": "solid",
            "borderBottomWidth": 1,
            "paddingBottom": "20px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": [
                  {
                    "config": {
                      "script": "\troot \u003d self.view.getChild(\"root\")\n\t_providerId \u003d self.view.params.providerInfo.providerId\n\tif _providerId \u003e -1:\n\t\troot.updateProviderDb(_providerId)\n\telse:\n\t\tself.view.params.providerInfo.providerId \u003d root.insertProviderDb()\n\t\t\n\t\n\t\n\t_toDelete \u003d \"\"\"\n\timport re\n\tproject \u003d \"HMS\"\n\t### Declare parameters \n\tproviderId \u003d self.view.params.provId\n\tfunction \u003d self.view.params.Function\n\t\n\tproviderName \u003d self.parent.parent.getChild(\"FlexContainer Basic\").getChild(\"FlexContainer Left\").getChild(\"ProviderName\").props.params.inputText\n\taddr \u003d self.parent.parent.getChild(\"FlexContainer Basic\").getChild(\"FlexContainer Left\").getChild(\"Address\").props.params.inputText\n\tstate \u003d self.parent.parent.getChild(\"FlexContainer Basic\").getChild(\"FlexContainer Left\").getChild(\"State\").props.params.inputText\n\tcity \u003d self.parent.parent.getChild(\"FlexContainer Basic\").getChild(\"FlexContainer Left\").getChild(\"City\").props.params.inputText\n\tzip \u003d self.parent.parent.getChild(\"FlexContainer Basic\").getChild(\"FlexContainer Left\").getChild(\"Zip\").props.params.inputText\n\t\n\tlocDesc \u003d self.parent.parent.getChild(\"FlexContainer Basic\").getChild(\"FlexContainer Right\").getChild(\"LocationDesc\").props.params.inputText\n\tprovType \u003d self.parent.parent.getChild(\"FlexContainer Basic\").getChild(\"FlexContainer Right\").getChild(\"ProviderType\").props.params.SelectedValue\n\t\n\t\n\temail \u003d self.parent.parent.getChild(\"FlexContainer Contact\").getChild(\"FlexContainer Left\").getChild(\"Email\").props.params.inputText\n\tphone \u003d self.parent.parent.getChild(\"FlexContainer Contact\").getChild(\"FlexContainer Left\").getChild(\"Phone\").props.params.inputText\n\t\n\t\t\n\tcontactName \u003d self.parent.parent.getChild(\"FlexContainer Contact\").getChild(\"FlexContainer Right\").getChild(\"ContactName\").props.params.inputText\n\tcontactPhone \u003d self.parent.parent.getChild(\"FlexContainer Contact\").getChild(\"FlexContainer Right\").getChild(\"ContactPhone\").props.params.inputText\n\twebsite \u003d self.parent.parent.getChild(\"FlexContainer Contact\").getChild(\"FlexContainer Left\").getChild(\"Website\").props.params.inputText\n\t\n\t\n\t## Check if parameters are filled in correctly \n\tif None in [state,zip]:\n\t\tvalid \u003d False\n\telif providerName.strip() \u003d\u003d \"\":\n\t\tvalid \u003d False\n\telif addr.strip() \u003d\u003d \"\":\n\t\tvalid \u003d False\n\telse:\n\t\tvalid \u003d True\n\t## Convert Phone number to numeric value only\n\tphone \u003d phone.replace(\u0027(\u0027,\u0027\u0027)\n\tphone \u003d phone.replace(\u0027)\u0027,\u0027\u0027)\n\tphone \u003d phone.replace(\u0027-\u0027,\u0027\u0027)\n\tphone \u003d phone.replace(\u0027 \u0027,\u0027\u0027)\n\tcontactPhone \u003d contactPhone.replace(\u0027(\u0027,\u0027\u0027)\n\tcontactPhone \u003d contactPhone.replace(\u0027)\u0027,\u0027\u0027)\n\tcontactPhone \u003d contactPhone.replace(\u0027-\u0027,\u0027\u0027)\n\tcontactPhone \u003d contactPhone.replace(\u0027 \u0027,\u0027\u0027)\t\n\t\n\t### Check if data is valid otherwise show error message.\n\tif valid:\n\t\t\n\t\t\t\n\t\tif valid:\n#\t\t\ttry:\n\t\t\t### Check if the user is creating new data\n\t\t\tif int(function) \u003d\u003d 0:\n\t\t\t\t### Create transaction\n\t\t\t\ttransactionFailed \u003d False\n\t\t\t\ttxId \u003d system.db.beginTransaction(timeout\u003d15000)\n\t\t\t\t\t\n\t\t\t\ttry:\n\t\t\t\t\t\n\t\t\t\t\torgId\u003d0\n\t\t\t\t\tid \u003d system.db.runNamedQuery(project\u003dproject,path\u003d\"Provider/Registration/Insert New Organization\",parameters \u003d{\"providerName\":providerName}, tx\u003dtxId, getKey\u003dTrue)\n#\t\t\t\t\tself.view.custom.key \u003d id.getValueAt(0,0)\n\t\t\t\t\tpath \u003d \"Provider/Registration/Insert New Provider\"\n\t\t\t\t\t#self.getSibling(\"Label\").showMessage(id)\n\t\t\t\t\tparameters \u003d {\"providerName\":providerName,\n\t\t\t\t\t\t\t\t\t\t\"addr\":addr,\n\t\t\t\t\t\t\t\t\t\t\"locationDesc\":locDesc,\n\t\t\t\t\t\t\t\t\t\t\"phone\":phone,\n\t\t\t\t\t\t\t\t\t\t\"email\":email,\n\t\t\t\t\t\t\t\t\t\t\"city\":city,\n\t\t\t\t\t\t\t\t\t\t\"state\":state,\n\t\t\t\t\t\t\t\t\t\t\"zip\":zip,\n\t\t\t\t\t\t\t\t\t\t\"contactName\":contactName,\n\t\t\t\t\t\t\t\t\t\t\"contactPhone\":contactPhone,\n\t\t\t\t\t\t\t\t\t\t\"nationalProvID\":\u0027\u0027,\n\t\t\t\t\t\t\t\t\t\t\"providerTypeId\":provType,\n\t\t\t\t\t\t\t\t\t\t\"organizationID\":id,\n\t\t\t\t\t\t\t\t\t\t\"website\":website\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, tx\u003dtxId, getKey\u003dTrue)\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t#refresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003d\"Provider/Registration/Update ProviderID\",parameters \u003d{\u0027organizationID\u0027:id}, tx\u003dtxId, getKey\u003dTrue)\n\t\t\t\t\t\n\t\t\t\texcept:\n\t\t\t\t\ttransactionFailed \u003d True\n\t\t\t\t\n\t\t\t\t### Check if an error occured rollback the transaction\n\t\t\t\tif transactionFailed:\n\t\t\t\t\tsystem.db.rollbackTransaction(txId)\n\t\t\t\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\n\t\t\t\t\tRefresh \u003d 0\n\t\t\t\t### Otherwise commit \n\t\t\t\telse:\n\t\t\t\t \tsystem.db.commitTransaction(txId)\n\t\t\t\t\tself.view.params.provId \u003d -1\n\t\t\t\t\tsystem.perspective.closeDock(\"RegisterProvider\")\n\t\t\t\t### Always close the transaction\t\n\t\t\t\tsystem.db.closeTransaction(txId)\n\t\t\t\t\n\t\t\t##### Check if the user is editing existing data\n\t\t\telif int(function) \u003d\u003d 1:\n\t\t\t\tproviderId \u003d self.view.custom.RegistrationData[0].organizationId\n\t\t\t\t### Create transaction\n\t\t\t\ttransactionFailed \u003d False\n\t\t\t\ttxId \u003d system.db.beginTransaction(timeout\u003d5000)\n\t\t\t\tif valid:\n\t\t\t\t\tpath \u003d \"Provider/Registration/Update Provider\"\n\t\t\t\t\tparameters \u003d {\"providerName\":providerName,\n\t\t\t\t\t\t\t\t\t\t\"provId\":providerId,\n\t\t\t\t\t\t\t\t\t\t\"street\":addr,\n\t\t\t\t\t\t\t\t\t\t\"locationDesc\":locDesc,\n\t\t\t\t\t\t\t\t\t\t\"phone\":phone,\n\t\t\t\t\t\t\t\t\t\t\"email\":email,\n\t\t\t\t\t\t\t\t\t\t\"city\":city,\n\t\t\t\t\t\t\t\t\t\t\"state\":state,\n\t\t\t\t\t\t\t\t\t\t\"zip\":zip,\n\t\t\t\t\t\t\t\t\t\t\"contactName\":contactName,\n\t\t\t\t\t\t\t\t\t\t\"contactPhone\":contactPhone,\n\t\t\t\t\t\t\t\t\t\t\"nationalProvID\":\u0027\u0027,\n\t\t\t\t\t\t\t\t\t\t\"providerTypeId\":provType,\n\t\t\t\t\t\t\t\t\t\t\"website\":website}\n\t\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\n\t\t\t\t\t\n\t\t\t\telse:\n\t\t\t\t\ttransactionFailed \u003d True\n\t\t\t\t\n\t\t\t\t### Check if an error occured rollback the transaction\n\t\t\t\tif transactionFailed:\n\t\t\t\t\tsystem.db.rollbackTransaction(txId)\n\t\t\t\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\n\t\t\t\t\tRefresh \u003d 0\n\t\t\t\t### Otherwise commit \n\t\t\t\telse:\n\t\t\t\t \tsystem.db.commitTransaction(txId)\n\t\t\t\t\tself.view.params.provId \u003d -1\n\t\t\t\t\tsystem.perspective.closeDock(\"RegisterProvider\")\n\t\t\t\t\tsystem.perspective.sendMessage(\"ResetSearch\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\t\tsystem.perspective.sendMessage(\"ResetRegistration\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\t### Always close the transaction\t\n\t\t\t\tsystem.db.closeTransaction(txId)\n\t\t\t\t\n\t\t\t##### The view is openend with a value in the Function parameter that isn\u0027t recognized\n\t\t\telse:\n\t\t\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\n\t\t\t\tRefresh \u003d 0\n\t\t\t\t\n\t\t\t##### Refresh the table\n\t\t\tif Refresh:\t\n\t\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshProviders\", payload\u003d{}, scope\u003d\"session\")\n\t#\t\texcept:\n\t#\t\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\n\t\telse:\n\t\t\tself.getSibling(\"Label\").showMessage(\"Please enter a valid info before saving\")\t\n\telse:\n\t\tself.getSibling(\"Label\").showMessage(\"Please fill in all the mandatory fields correctly before saving.\")\"\"\""
                    },
                    "scope": "G",
                    "type": "script"
                  },
                  {
                    "config": {
                      "id": "SearchProvider",
                      "type": "close"
                    },
                    "scope": "C",
                    "type": "dock"
                  },
                  {
                    "config": {
                      "id": "RegisterProvider",
                      "type": "close"
                    },
                    "scope": "C",
                    "type": "dock"
                  },
                  {
                    "config": {
                      "script": "\tsystem.perspective.sendMessage(\u0027refreshProviderTableFromFilter\u0027)\t"
                    },
                    "scope": "G",
                    "type": "script"
                  }
                ]
              }
            },
            "meta": {
              "name": "Button Save"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "15px",
                "marginLeft": "20px",
                "marginRight": "20px",
                "marginTop": "15px"
              },
              "text": "Save"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": [
                  {
                    "config": {
                      "script": "\tsystem.perspective.sendMessage(\"ResetSearch\", payload\u003d{}, scope\u003d\"session\")\n\tsystem.perspective.sendMessage(\"ResetRegistration\", payload\u003d{}, scope\u003d\"session\")\n\t\n\t"
                    },
                    "scope": "G",
                    "type": "script"
                  },
                  {
                    "config": {
                      "id": "RegisterProvider",
                      "type": "close"
                    },
                    "scope": "C",
                    "type": "dock"
                  }
                ]
              }
            },
            "meta": {
              "name": "Button Cancel"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "expression": "\u0027Clear\u0027"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Secondary_Orange",
                "marginBottom": "15px",
                "marginTop": "15px"
              }
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "lblMessage",
              "visible": false
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Text/Error_Message"
              },
              "text": 213
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "showMessage",
                  "params": [
                    "message"
                  ],
                  "script": "\timport time\n\tself.props.text \u003d message\n\tself.meta.visible \u003d True\n\ttime.sleep(5)\n\tself.meta.visible \u003d False\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "FlexContainer"
        },
        "position": {
          "basis": "65px",
          "shrink": 0
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "insertProviderDb",
          "params": [],
          "script": "\tquery \u003d \"\"\"\nINSERT INTO [organization].[Provider]\n\t\t([providerName]\n\t\t,[street]\n\t\t,[city]\n\t\t,[state]\n\t\t,[zipCode]\n\t\t,[providerTypeId]\n\t\t,[locationDescription]\n\t\t,[phone]\n\t\t,[email]\n\t\t,[website]\n\t\t,[contactName]\n\t\t,[contactPhone]\n\t\t,[timeRetired]\n\t\t,[timeCreated])\n\t     VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\n\"\"\"\n\targs \u003d self.getArgValues() + [system.date.now()]\n\t#errors \u003d False  # A flag to denote if we ran into a problem with a query during the transaction\n\t\n\tsystem.perspective.print((\u0027insertDb:\u0027, query.replace(\u0027\\n\u0027,\u0027 \u0027).replace(\u0027\\t\u0027,\u0027 \u0027), args))\n\n\t\n\tidInserted \u003d -1\n\t#try:       \n\t#txId \u003d system.db.beginTransaction(timeout\u003d5000)\n\t#idInserted \u003d system.db.runPrepUpdate(query,  args, \u0027HMSOps\u0027) #, tx\u003dtxId, getKey\u003d1)   \n\t#system.db.commitTransaction(txId) \n\t#system.db.closeTransaction(txId) \n\t#system.perspective.print((\u0027idInserted:\u0027, idInserted))\n\t#return idInserted\n\t#except:\n\t\t#system.db.rollbackTransaction(txId)\n\t\t#system.db.closeTransaction(txId)\n\t\t#raise\n\t\t##errors \u003d True  \n\ttry:\n\t\tidInserted \u003d system.db.runPrepUpdate(query,  args, \u0027HMSOps\u0027,getKey\u003d1)\n\texcept:\n\t\n\t\timport sys\n\t\tfrom java.lang import Exception\n\t\texceptionType, exception, stacktrace \u003d sys.exc_info()\n\t\tif exceptionType \u003d\u003d Exception:\n\t\t\texception \u003d exception.getCause()\n\t\texceptionName \u003d exception.__class__.__name__\n\t\tsystem.perspective.print((exceptionName+\" : \"+str(exception)))\n\t\t#logger.error(exceptionName+\" : \"+str(exception))\n"
        },
        {
          "name": "updateProviderDb",
          "params": [
            "providerId"
          ],
          "script": "\tquery \u003d \"\"\"\nUPDATE [organization].[Provider]\nSET  [providerName]\u003d ?\n\t,[street]\u003d ?\n\t,[city]\u003d ?\n\t,[state]\u003d ?\n\t,[zipCode]\u003d ?\n\t,[providerTypeId]\u003d ?\n\t,[locationDescription]\u003d ?\n\t,[phone]\u003d ?\n\t,[email] \u003d ?\n\t,[website]\u003d ?\n\t,[contactName]\u003d ?\n\t,[contactPhone]\u003d ?\n\t,[timeRetired]\u003d ?\nWHERE [id] \u003d ?\n\"\"\"\n\targs \u003d self.getArgValues() + [providerId]\n\t#errors \u003d False  # A flag to denote if we ran into a problem with a query during the transaction\n\t\n\t\n\tsystem.perspective.print((\u0027updateDb:\u0027, query.replace(\u0027\\n\u0027,\u0027 \u0027).replace(\u0027\\t\u0027,\u0027 \u0027), args))\n\n\ttry:       \n\t\ttxId \u003d system.db.beginTransaction(timeout\u003d5000)\n\t\tsystem.db.runPrepUpdate(query,  args, \u0027HMSOps\u0027, tx\u003dtxId)   \n\t\tsystem.db.commitTransaction(txId)  \n\t\tsystem.db.closeTransaction(txId)\n\texcept:\n\t\tsystem.db.rollbackTransaction(txId)\n\t\tsystem.db.closeTransaction(txId)\n\t\traise\n\t\t#errors \u003d True  \n"
        },
        {
          "name": "getArgValues",
          "params": [],
          "script": "\t\n\t_dictComp \u003d self.getDictComponents()\n\t\n\t_argKeys \u003d [ \n\t\t\u0027providerName\u0027\n\t\t,\u0027street\u0027\n\t\t,\u0027city\u0027\n\t\t,\u0027state\u0027\n\t\t,\u0027zipCode\u0027\n\t\t,\u0027providerTypeId\u0027\n\t\t,\u0027locationDescription\u0027\n\t\t,\u0027phone\u0027\n\t\t,\u0027email\u0027\n\t\t,\u0027website\u0027\n\t\t,\u0027contactName\u0027\n\t\t,\u0027contactPhone\u0027\n\t\t,\u0027timeRetired\u0027\t]\n\t\n\t\n\targValues \u003d []\t\n\tfor key in _argKeys:\n\t\n\t\tif key \u003d\u003d \u0027timeRetired\u0027:\n\t\t\ttimeRetired \u003d None if _dictComp[key].props.selected else system.date.now()\n\t\t\targValues.append(timeRetired)\t\n\t\telif \u0027inputText\u0027 in _dictComp[key].props.params:\n\t\t\tif _dictComp[key].props.params.inputText is None:\n\t\t\t\targValues.append(\u0027\u0027)\n\t\t\telse:\n\t\t\t\targValues.append(_dictComp[key].props.params.inputText)\n\t\telif \u0027selectedValue\u0027 in _dictComp[key].props.params:\n\t\t\targValues.append(_dictComp[key].props.params.selectedValue)\t\n\t\telse:\n\t\t\targValues.append(None)\n\n\treturn argValues\n\t\n\t_x \u003d \"\"\"\n\t_dict \u003d {}\n\tflexBasic \u003d self.getChild(\"FlexContainer Basic\")\n\t_dict[\u0027providerName\u0027] \u003d flexBasic.getChild(\"FlexContainer Left\").getChild(\"ProviderName\").props.params.inputText\n\t_dict[\u0027street\u0027] \u003d flexBasic.getChild(\"FlexContainer Left\").getChild(\"Street\").props.params.inputText\n\t_dict[\u0027state\u0027] \u003d flexBasic.getChild(\"FlexContainer Left\").getChild(\"State\").props.params.inputText\n\t_dict[\u0027city\u0027] \u003d flexBasic.getChild(\"FlexContainer Left\").getChild(\"City\").props.params.inputText\n\t_dict[\u0027zipCode\u0027] \u003d flexBasic.getChild(\"FlexContainer Left\").getChild(\"ZipCode\").props.params.inputText\n\t_dict[\u0027locationDescription\u0027] \u003d flexBasic.getChild(\"FlexContainer Right\").getChild(\"LocationDescription\").props.params.inputText\n\t_dict[\u0027providerTypeId\u0027] \u003d flexBasic.getChild(\"FlexContainer Right\").getChild(\"ProviderTypeId\").props.params.selectedValue\n\t\n\tflexContact \u003d self.getChild(\"FlexContainer Contact\")\n\t_dict[\u0027email\u0027] \u003d flexContact.getChild(\"FlexContainer Left\").getChild(\"Email\").props.params.inputText\n\t_dict[\u0027phone\u0027] \u003d flexContact.getChild(\"FlexContainer Left\").getChild(\"Phone\").props.params.inputText\n\t_dict[\u0027contactName\u0027] \u003d flexContact.getChild(\"FlexContainer Right\").getChild(\"ContactName\").props.params.inputText\n\t_dict[\u0027contactPhone\u0027] \u003d flexContact.getChild(\"FlexContainer Right\").getChild(\"ContactPhone\").props.params.inputText\n\t_dict[\u0027website\u0027] \u003d flexContact.getChild(\"FlexContainer Left\").getChild(\"Website\").props.params.inputText\n\t_dict[\u0027active\u0027] \u003d flexContact.getChild(\"FlexContainer Right\").getChild(\"Active\").props.selected\n\t\n\t# Correction for phone\n\t_dict[\u0027phone\u0027] \u003d \u0027\u0027.join([s for s in phone if s.isdigit()])\n\t_dict[\u0027contactPhone\u0027] \u003d \u0027\u0027.join([s for s in contactPhone if s.isdigit()])\n\t\n\targValues \u003d [_dict.get(key) for key in self.getArgKeys()]\n\t\n\treturn argValues\"\"\""
        },
        {
          "name": "setFormComponents",
          "params": [
            "providerInfo"
          ],
          "script": "\temvHeader \u003d self.getChild(\"emvHeader\")\n\t\n\t_dictComp \u003d self.getDictComponents()\n\t\t\n\t_dictComp[\u0027providerTypeId\u0027].setOptions()\n\t\n\tif providerInfo[\u0027providerId\u0027] \u003e -1:\n\t\temvHeader.props.params.text \u003d \u0027Edit Provider\u0027\n\t\n\t\t_providerId \u003d providerInfo[\u0027providerId\u0027]\n\t\tpyds \u003d self.getProviderDb(_providerId)\n\t\tsystem.perspective.print((\u0027pyds:\u0027, [list(x) for x in pyds]))\n\n\t\tfor key in _dictComp:\n\n\t\t\tif\tkey \u003d\u003d \u0027timeRetired\u0027: \n\t\t\t\t# If value \u0027timeRetired\u0027 is None provider is active\n\t\t\t\t_dictComp[key].props.selected \u003d False if pyds.rowCount \u003e 0 and pyds[0][key] else True\n\t\t\telif \u0027inputText\u0027 in _dictComp[key].props.params:\n\t\t\t\t_dictComp[key].props.params.inputText \u003d pyds[0][key] if pyds.rowCount \u003e 0 else \u0027\u0027\n\t\t\telif \u0027selectedValue\u0027 in _dictComp[key].props.params:\n\t\t\t\t_dictComp[key].props.params.selectedValue \u003d pyds[0][key] if pyds.rowCount \u003e 0 else None\n\t\t\telse:\n\t\t\t\tpass\n\telse:\n\t\temvHeader.props.params.text \u003d \u0027Register Provider\u0027\n\n\t\tfor key in _dictComp:\n\t\t\tif\tkey \u003d\u003d \u0027providerName\u0027: \n\t\t\t\t_dictComp[key].props.params.inputText \u003d providerInfo[\u0027providerName\u0027]\n\t\t\telif key \u003d\u003d \u0027street\u0027: \n\t\t\t\t\t_dictComp[key].props.params.inputText \u003d providerInfo[\u0027street\u0027]\n\t\t\telif\tkey \u003d\u003d \u0027timeRetired\u0027: \n\t\t\t\t# If value \u0027timeRetired\u0027 is None provider is active\n\t\t\t\t_dictComp[key].props.selected \u003d True\n\t\t\telif \u0027inputText\u0027 in _dictComp[key].props.params:\n\t\t\t\t_dictComp[key].props.params.inputText \u003d \u0027\u0027\n\t\t\telif \u0027selectedValue\u0027 in _dictComp[key].props.params:\n\t\t\t\t_dictComp[key].props.params.selectedValue \u003d None\n\t\t\telse:\n\t\t\t\tpass"
        },
        {
          "name": "getProviderDb",
          "params": [
            "providerId"
          ],
          "script": "\tquery \u003d \"\"\"\nSELECT \n\t [id]\n\t,[providerName]\n\t,[street]\n\t,[city]\n\t,[state]\n\t,[zipCode]\n\t,[providerTypeId]\n\t,[locationDescription]\n\t,[phone]\n\t,[email]\n\t,[website]\n\t,[contactName]\n\t,[contactPhone]\t\n\t,[timeRetired]\nFROM [HMSOps].[organization].[Provider]\nWHERE [id] \u003d ?\n\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[providerId], \u0027HMSOps\u0027)\n\t\n\treturn result\n\t\n\t\n\t\n\t\n\t\n\t"
        },
        {
          "name": "XgetArgKeys",
          "params": [],
          "script": "\t_lst \u003d[ \u0027providerName\u0027\n\t\t\t,\u0027street\u0027\n\t\t\t,\u0027city\u0027\n\t\t\t,\u0027state\u0027\n\t\t\t,\u0027zipCode\u0027\n\t\t\t,\u0027providerTypeId\u0027\n\t\t\t,\u0027locationDescription\u0027\n\t\t\t,\u0027phone\u0027\n\t\t\t,\u0027email\u0027\n\t\t\t,\u0027website\u0027\n\t\t\t,\u0027contactName\u0027\n\t\t\t,\u0027contactPhone\u0027\n\t\t\t,\u0027timeRetired\u0027\t]\n\t\n\treturn _lst\n"
        },
        {
          "name": "getDictComponents",
          "params": [],
          "script": "\t_dictComp \u003d {}\n\tflexBasic \u003d self.getChild(\"FlexContainer Basic\")\n\tflexContact \u003d self.getChild(\"FlexContainer Contact\")\n\t\n\t_dictComp[\u0027providerName\u0027] \u003d flexBasic.getChild(\"FlexContainer Left\").getChild(\"ProviderName\")\n\t_dictComp[\u0027street\u0027] \u003d flexBasic.getChild(\"FlexContainer Left\").getChild(\"Street\")\n\t_dictComp[\u0027state\u0027] \u003d flexBasic.getChild(\"FlexContainer Left\").getChild(\"State\")\n\t_dictComp[\u0027city\u0027] \u003d flexBasic.getChild(\"FlexContainer Left\").getChild(\"City\")\n\t_dictComp[\u0027zipCode\u0027] \u003d flexBasic.getChild(\"FlexContainer Left\").getChild(\"ZipCode\")\n\t_dictComp[\u0027locationDescription\u0027] \u003d flexBasic.getChild(\"FlexContainer Right\").getChild(\"LocationDescription\")\n\t_dictComp[\u0027providerTypeId\u0027] \u003d flexBasic.getChild(\"FlexContainer Right\").getChild(\"ProviderTypeId\")\n\t_dictComp[\u0027timeRetired\u0027] \u003d flexBasic.getChild(\"FlexContainer Right\").getChild(\"Active\")\n\t\n\t_dictComp[\u0027email\u0027] \u003d flexContact.getChild(\"FlexContainer Left\").getChild(\"Email\")\n\t_dictComp[\u0027phone\u0027] \u003d flexContact.getChild(\"FlexContainer Left\").getChild(\"Phone\")\n\t_dictComp[\u0027contactName\u0027] \u003d flexContact.getChild(\"FlexContainer Right\").getChild(\"ContactName\")\n\t_dictComp[\u0027contactPhone\u0027] \u003d flexContact.getChild(\"FlexContainer Right\").getChild(\"ContactPhone\")\n\t_dictComp[\u0027website\u0027] \u003d flexContact.getChild(\"FlexContainer Left\").getChild(\"Website\")\n\n\treturn _dictComp"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": []
    },
    "type": "ia.container.flex"
  }
}