{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\troot \u003d self.getChild(\"root\")\n\troot.setByJsonIn()\n\troot.setByJsonExpo()"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "jsonBase": "value",
    "jsonExpo": "value",
    "jsonIn": "value",
    "jsonOut": "value"
  },
  "propConfig": {
    "params.jsonBase": {
      "access": "PUBLIC",
      "paramDirection": "input",
      "persistent": true
    },
    "params.jsonExpo": {
      "access": "PUBLIC",
      "onChange": {
        "enabled": null,
        "script": "\troot \u003dself.getChild(\"root\")\n\troot.setByJsonExpo()\n\t"
      },
      "paramDirection": "inout",
      "persistent": true
    },
    "params.jsonIn": {
      "access": "PUBLIC",
      "onChange": {
        "enabled": null,
        "script": "\troot \u003d self.getChild(\"root\")\n\troot.setByJsonIn()\t\t"
      },
      "paramDirection": "input",
      "persistent": true
    },
    "params.jsonOut": {
      "access": "PUBLIC",
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 50,
      "width": 175
    }
  },
  "root": {
    "children": [
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\tsystem.perspective.print(\u0027aa\u0027)\n\tself.parent.setByJsonIn()\n\tself.parent.setByJsonExpo()\n\n\t\t"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Button"
        },
        "position": {
          "basis": 18,
          "shrink": 0
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "toStr({../Dropdown.props.value})+\u0027 \u0027 + toStr({view.params.jsonIn})"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "image": {
            "height": 8,
            "width": 8
          },
          "textStyle": {
            "fontSize": 8,
            "paddingLeft": 0,
            "paddingTop": 0,
            "textAlign": "left"
          }
        },
        "type": "ia.input.button"
      },
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "50px"
        },
        "props": {
          "style": {
            "classes": "Text/Add_HeaderText"
          },
          "text": "Participants"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Dropdown"
        },
        "position": {
          "basis": "50px"
        },
        "propConfig": {
          "props.options": {
            "persistent": false
          },
          "props.value": {
            "onChange": {
              "enabled": null,
              "script": "\tpyBase \u003d system.util.jsonDecode(self.view.params.jsonBase)\n\tpyOut \u003d system.util.jsonDecode(self.view.params.jsonOut) \n\n\tif not(isinstance(pyOut, dict)):\n\t\tpyOut \u003d {}\n\t\n\t# Add to jsonOut to node \u0027wherePlus\u0027 condition \u0027cnd\u0027 which is specified in jsonBase\n\t# \u0027cnd\u0027 is condition with full column name: \"[schema].[table].[column] \u003d ?\"\n\t# or if nothing is selected - special case \"always True\" like -1 \u003d ? (and arg is -1). \n\t# For example: \"cnd\":\"[lodging].[Room].[id] \u003d ?\"\n\t# example for jsonOut: {\"wherePlus\":[{\"arg\":7,\"cnd\":\"[lodging].[Room].[id] \u003d ?\"}]}\n\t# example for jsonOut: {\"wherePlus\":[{\"arg\": -1,\"cnd\":\"-1 \u003d ?\"}]}\n\t\n\tstrDate \u003d str(currentValue.value)\n\t\n\tformatedDate \u003d \u0027-\u0027.join([strDate[:4],strDate[4:6],strDate[6:]]) +\u0027 12:00:00\u0027\n\t\n\tif currentValue.value \u003e 0:\n\t    pyOut[\"wherePlus\"] \u003d [ {\u0027arg\u0027:formatedDate, \u0027cnd\u0027: pyBase[\u0027cnd\u0027], \u0027type\u0027:\u0027datetime\u0027} ]\n\telse:\n\t\tpyOut[\"wherePlus\"] \u003d [ {\u0027arg\u0027: currentValue.value, \u0027cnd\u0027: \u0027{} \u003d ?\u0027.format(currentValue.value)}]\n\t\n\tself.view.params.jsonOut \u003d system.util.jsonEncode(pyOut)\n\t\n\t#system.perspective.print((\u0027Dropdown  onvaluechanged jsonOut\u0027, self.view.params.jsonOut ))\n"
            }
          }
        },
        "props": {
          "dropdownOptionStyle": {
            "classes": "Text/Add_InfoText"
          },
          "placeholder": {
            "icon": {
              "color": "#0d80e3"
            },
            "text": "Select"
          },
          "style": {
            "classes": "Text/Add_InfoText"
          },
          "value": -1
        },
        "type": "ia.input.dropdown"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "overflow": "hidden"
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "setByJsonIn",
          "params": [],
          "script": "\tjsonBase \u003d self.view.params.jsonBase\n\tjsonIn \u003d self.view.params.jsonIn\n\t\n\t#system.perspective.print((\u0027setByJsonIn / jsonIn,jsonBase: \u0027,jsonIn, jsonBase))\n\t\n\tpyIn \u003d system.util.jsonDecode(jsonIn)\n\tpyBase \u003d system.util.jsonDecode(jsonBase)\n\t\n\t#system.perspective.print((\u0027setByJsonIn / pyIn,pyBase: \u0027,pyIn,pyBase))\n\t\n\tif not isinstance(pyIn,dict):\n\t\treturn\n\t\t\n\twherePlus \u003d pyIn.get(\u0027wherePlus\u0027, None)\n\tif \u0027prepQuery\u0027 in pyBase:\n\t\t\n\t\t# Return if \"wherePlus\": None or \"wherePlus\" doesn\u0027t exist inside in jsonIn. \n\t\t# Special case for query with no parameters is to set \"wherePlus\":[]\n\t\tif wherePlus is None:\n\t\t\treturn\n\t\t\n\t\torg \u003d \"\"\"\n\t\targs \u003d [x[\u0027arg\u0027] for x in pyIn[\u0027wherePlus\u0027]]\n\t\n\t\tquery \u003d (pyBase[\u0027prepQuery\u0027]).get(\u0027query\u0027, None)\n\t\t\n\t\tif isinstance(query, str):\n\t\t\tdrp \u003d self.getChild(\"Dropdown\")\n\t\t\t\n\t\t\t# If args[0] (usually it is id column in db table) is not positive integer avoid query execution, list of option is None\n\t\t\tif isinstance(args,list) and len(args) \u003d\u003d 1 and args[0] \u003c\u003d 0:\n\t\t\t\tdrp.props.options \u003d None\n\t\t\telse:\n\t\t\t\tdrp.props.options \u003d system.db.runPrepQuery(query,args,\u0027HMSOps\u0027) \n\t\t\t\t\n\t\t\tdrp.props.value \u003d -1\t\"\"\"\t\n\t\t\n\t\t\n\t\t\n\n\t\tsystem.perspective.print((\"pyIn[\u0027wherePlus\u0027]: \",pyIn[\u0027wherePlus\u0027]))\n\t\t\n\t\t\n\t\t#[{u\u0027type\u0027: \u0027datetime\u0027, u\u0027arg\u0027: \u00272020-11-19 12:00:00\u0027, u\u0027cnd\u0027: \u0027[lodging].[Reservation].[reservationStart] \u003e\u003d ?\u0027}]\n\t\tqueryArgs \u003d [ system.date.parse(x[\u0027arg\u0027]) if x.get(\u0027type\u0027, \u0027\u0027) \u003d\u003d \u0027datetime\u0027 else x[\u0027arg\u0027] for x in pyIn[\u0027wherePlus\u0027] ]\n\t\t\t\n\n\t\tquery \u003d (pyBase[\u0027prepQuery\u0027]).get(\u0027query\u0027, None)\n\t\t\n\t\tif isinstance(query, str):\n\t\t\tdrp \u003d self.getChild(\"Dropdown\")\n\t\t\t\n\t\t\t# If args[0] (usually it is id column in db table) is not positive integer avoid query execution, list of option is None\n\t\t\tif isinstance(queryArgs,list) and len(queryArgs) \u003d\u003d 1 and queryArgs[0] \u003c\u003d 0:\n\t\t\t\tdrp.props.options \u003d None\n\t\t\telse:\n\t\t\t\tsystem.perspective.print((\u0027q+a: \u0027,query, queryArgs))\n\t\t\t\tdrp.props.options \u003d system.db.runPrepQuery(query,queryArgs,\u0027HMSOps\u0027) \n\t\t\t\t\n\t\t\tdrp.props.value \u003d -1\n\n\t_doc \u003d \"\"\"\n\t###\n\tThis is example (1)\n\t-for jsonBase:\n\t{\n\t  \"cnd\": \"[participant].[Participant].[id] \u003d ?\",\n\t  \"prepQuery\": {\n\t    \"query\": \"SELECT [participant].[Participant].id AS [participantId], CONCAT_WS(\u0027 \u0027,[humans].[Human].lastName, [humans].[Human].middleName, [humans].[Human].firstName) AS [Participant] FROM [participant].[Participant] INNER JOIN [humans].[Human] ON [participant].[Participant].humanId \u003d [humans].[Human].id ORDER BY [humans].[Human].lastName\"\n\t  }\n\t}\n\t\n\t- for jsonIn :\t\t\n\t{\n\t  \"wherePlus\": []\n\t}\n\n\t###\n\tThis is example (2) \n\t- for jsonBase:\n\t{\n\t  \"cnd\": \"[lodging].[Room].[id] \u003d ?\",\n\t  \"prepQuery\": {\n\t    \"query\": \"SELECT [Room].[id] [roomId],[roomName] AS [Room] FROM [HMSOps].[lodging].[Room] WHERE facilityId \u003d  ? ORDER BY roomName \"\n\t  }\n\t}\n\t- for jsonIn \n\t{\n\t  \"wherePlus\": [{\"cnd\": \"[lodging].[Facility].[facilityId] \u003d  ?\",\"arg\": 3}]\n\t}\n\t\n\t###\n\tThis is example (3) for jsonIn (how to avoid update on StartUp, \"wherePlus\" is None or missing...):\t\t\n\t{\n\t  \"wherePlus\": None\n\t}\n\tor skip node \"wherePlus\" \n\t\"\"\"\n"
        },
        {
          "name": "setByJsonExpo",
          "params": [],
          "script": "\t# For example: jsonExpo \u003d \u0027{\"Label.text\":\"Participants\"}\u0027\n\tpyExpo \u003d system.util.jsonDecode(self.view.params.jsonExpo)\n\t\n\t#system.perspective.print(self.view.params.jsonExpo)\n\t#system.perspective.print(pyExpo)\n\t\n\tif isinstance(pyExpo,dict):\n\t\tlbl \u003d self.getChild(\"Label\")\n\t\tlbl.props.text \u003d pyExpo.get(\u0027Label.text\u0027,\u0027x\u0027)"
        },
        {
          "name": "mergeFavorizeB",
          "params": [
            "a",
            "b",
            "path\u003dNone"
          ],
          "script": "\t\n\t\"\"\" Merges dict b into dict a, favorize b (if node is same overwrite from b). \n\t\tWarning - function mutate a. To avoid mutating a use merge(dict(a), b)\"\"\"\n\t\n\tif path is None: \n\t\tpath \u003d []\n\t\t\n\tfor key in b:\n\t\tif key in a:\n\t\t\tif isinstance(a[key], dict) and isinstance(b[key], dict):\n\t\t\t\tmergeFavorizeB(a[key], b[key], path + [str(key)])\n\t\t\telif a[key] \u003d\u003d b[key]:\n\t\t\t\tpass # same node value\n\t\t\telse:\n\t\t\t\ta[key] \u003d b[key]\n\t\t\t\t# raise Exception(\u0027XConflict at %s\u0027 % \u0027.\u0027.join(path + [str(key)]))\n\t\telse:\n\t\t\ta[key] \u003d b[key]\n\treturn a"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": []
    },
    "type": "ia.container.flex"
  }
}