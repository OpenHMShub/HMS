{
  "custom": {
    "ProfileData": {
      "profile": {
        "availability_daily_afternoon": "Tuesday,Thursday",
        "availability_daily_evening": "Tuesday,Thursday",
        "availability_daily_morning": "Monday",
        "availability_seasonal_availability_type": 2,
        "availability_seasonal_end_date": 1759208400000,
        "availability_seasonal_start_date": 1756702800000,
        "availability_upto_hours": "12",
        "availability_upto_type": "weekly",
        "availability_weekly_selection": "1,3"
      },
      "status": "active",
      "volunteerGroupId": 2
    },
    "events": [
      2
    ],
    "func_refresh": true,
    "skills": [
      2
    ]
  },
  "params": {
    "volunteerId": 50
  },
  "propConfig": {
    "custom.ProfileData": {
      "binding": {
        "config": {
          "parameters": {
            "volunteerId": "{view.params.volunteerId}"
          },
          "queryPath": "Volunteers/Details/VolunteerProfile",
          "returnFormat": "json"
        },
        "transforms": [
          {
            "code": "\tdata \u003d {} \n\tif len(value) \u003e 0: \n\t\tdata \u003d value[0] \n\t\tif not data[\"profile\"]: \n\t\t\tdata[\"profile\"] \u003d { } \n\t\telse: data[\"profile\"] \u003d system.util.jsonDecode(data[\"profile\"]) \n\treturn data",
            "type": "script"
          }
        ],
        "type": "query"
      },
      "persistent": true
    },
    "custom.events": {
      "binding": {
        "config": {
          "parameters": {
            "volunteerId": "{view.params.volunteerId}"
          },
          "queryPath": "Volunteers/Volunteers/VolunteerProfileEvents",
          "returnFormat": "json"
        },
        "transforms": [
          {
            "code": "\tvals \u003d []\n\tfor row in value:\n\t\tvals.append(row[\"eventId\"])\n\treturn vals",
            "type": "script"
          }
        ],
        "type": "query"
      },
      "persistent": true
    },
    "custom.func_refresh": {
      "onChange": {
        "enabled": null,
        "script": "\timport traceback\n\ttry:\n\t\tif self.custom.func_refresh:\n\t\t\tdata \u003d self.custom.sql_data\n\t\t\t#ID\n\t\t\tself.custom.RegistrationData.human_id \u003d data.getValueAt(0,\u0027human_id\u0027)\n\t\t\tself.custom.RegistrationData.participant_id \u003d self.params.participant_id\n\t\t\t#Name\n\t\t\t#Set values to empty string as default\n\t\t\tself.custom.RegistrationData.first_name \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.middle_name \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.last_name \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.suffix_name \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.nick_name \u003d \u0027\u0027\n\t\t\t#Only load the data if not null\n\t\t\tif data.getValueAt(0,\u0027first_name\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.first_name \u003d data.getValueAt(0,\u0027first_name\u0027)\n\t\t\tif data.getValueAt(0,\u0027middle_name\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.middle_name \u003d data.getValueAt(0,\u0027middle_name\u0027)\n\t\t\tif data.getValueAt(0,\u0027last_name\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.last_name \u003d data.getValueAt(0,\u0027last_name\u0027)\n\t\t\tif data.getValueAt(0,\u0027suffix_name\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.suffix_name \u003d data.getValueAt(0,\u0027suffix_name\u0027)\n\t\t\tif data.getValueAt(0,\u0027nick_name\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.nick_name \u003d data.getValueAt(0,\u0027nick_name\u0027)\n\t\t\tself.custom.RegistrationData.gender_id \u003d data.getValueAt(0,\u0027gender_id\u0027)\n\t\t\t#Numbers\n\t\t\tactive \u003d data.getValueAt(0,\u0027time_retired\u0027)\n\t\t\tif active !\u003d None: #Participant is not active if time retired has a date\n\t\t\t\tself.custom.RegistrationData.active \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.active \u003d 1\n\t\t\tself.custom.RegistrationData.case_manager_id \u003d data.getValueAt(0,\u0027case_manager_id\u0027)\n\t\t\tssn \u003d data.getValueAt(0,\u0027ssn\u0027)[:3] + \u0027-\u0027 + data.getValueAt(0,\u0027ssn\u0027)[3:5] + \u0027-\u0027 + data.getValueAt(0,\u0027ssn\u0027)[5:]\n\t\t\tself.custom.RegistrationData.ssn \u003d ssn\n\t\t\tself.custom.RegistrationData.ssn_quality_id \u003d data.getValueAt(0,\u0027ssn_quality_id\u0027)\n\t\t\tdob \u003d data.getValueAt(0,\u0027dob\u0027)\n\t\t\tif dob \u003d\u003d None:\n\t\t\t\tself.custom.RegistrationData.dob \u003d None\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.dob \u003d system.date.fromMillis(system.date.toMillis(dob))\n\t\t\t\n\t\t\tself.custom.RegistrationData.dob_quality \u003d data.getValueAt(0,\u0027dob_quality_id\u0027)\n\n\t\t\t#Status\t\n\t\t\tself.custom.RegistrationData.race_id \u003d data.getValueAt(0,\u0027race_id\u0027)\n\t\t\tself.custom.RegistrationData.ethnicity_id \u003d data.getValueAt(0,\u0027ethnicity_id\u0027)\n\t\t\tself.custom.RegistrationData.veteran_id \u003d data.getValueAt(0,\u0027veteran_id\u0027)\n\t\t\tself.custom.RegistrationData.disability_id \u003d data.getValueAt(0,\u0027disability_id\u0027)\n\t\t\ttime_deceased \u003d data.getValueAt(0,\u0027time_deceased\u0027)\n\t\t\tif time_deceased \u003d\u003d None:\n\t\t\t\tself.custom.RegistrationData.time_deceased \u003d None\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.time_deceased \u003d system.date.toMillis(time_deceased)\n\t\t\t#Address\n\t\t\t#Set values to empty string as default\n\t\t\tself.custom.RegistrationData.street \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.city \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.state \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.zip_code \u003d \u0027\u0027\n\t\t\t#Only load the data if not null\n\t\t\tif data.getValueAt(0,\u0027street\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.street \u003d data.getValueAt(0,\u0027street\u0027)\n\t\t\tif data.getValueAt(0,\u0027city\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.city \u003d data.getValueAt(0,\u0027city\u0027)\n\t\t\tif data.getValueAt(0,\u0027state\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.state \u003d data.getValueAt(0,\u0027state\u0027)\n\t\t\tif data.getValueAt(0,\u0027zip_code\u0027) !\u003d None:\n\t\t\t\tif int(data.getValueAt(0,\u0027zip_code\u0027)) \u003e 0:\n\t\t\t\t\tself.custom.RegistrationData.zip_code \u003d data.getValueAt(0,\u0027zip_code\u0027)\n\t\t\t#Contact info\n\t\t\t#Set values to empty string as default\n\t\t\tself.custom.RegistrationData.phone \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.alt_phone \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.email \u003d \u0027\u0027\n\t\t\t#Only load the data if not null\n\t\t\tif data.getValueAt(0,\u0027phone\u0027) !\u003d None:\n\t\t\t\tphone \u003d data.getValueAt(0,\u0027phone\u0027)[:3] + \u0027-\u0027 + data.getValueAt(0,\u0027phone\u0027)[3:6] + \u0027-\u0027 + data.getValueAt(0,\u0027phone\u0027)[6:]\n\t\t\t\tself.custom.RegistrationData.phone \u003d phone\n\t\t\tif data.getValueAt(0,\u0027alt_phone\u0027) !\u003d None:\n\t\t\t\talt_phone \u003d data.getValueAt(0,\u0027alt_phone\u0027)[:3] + \u0027-\u0027 + data.getValueAt(0,\u0027alt_phone\u0027)[3:6] + \u0027-\u0027 + data.getValueAt(0,\u0027alt_phone\u0027)[6:]\n\t\t\t\tself.custom.RegistrationData.alt_phone \u003d alt_phone\n\t\t\tif data.getValueAt(0,\u0027email\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.email \u003d data.getValueAt(0,\u0027email\u0027)\n\t\t\tself.custom.RegistrationData.communication_type_id \u003d data.getValueAt(0,\u0027communication_type_id\u0027)\n\t\t\tself.custom.RegistrationData.insurance_type_id \u003d data.getValueAt(0,\u0027insurance_type_id\u0027)\n\t\t\t#Emergency Contact info\n\t\t\t#Set values to empty string as default\n\t\t\tself.custom.RegistrationData.emergency_contact_name \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.emergency_contact_phone \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.emergency_contact_email \u003d \u0027\u0027\n\t\t\t#Only load the data if not null\n\t\t\tif data.getValueAt(0,\u0027emergency_contact_name\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.emergency_contact_name \u003d data.getValueAt(0,\u0027emergency_contact_name\u0027)\n\t\t\tif data.getValueAt(0,\u0027emergency_contact_phone\u0027) !\u003d None:\n\t\t\t\tec_phone \u003d data.getValueAt(0,\u0027emergency_contact_phone\u0027)[:3] + \u0027-\u0027 + data.getValueAt(0,\u0027emergency_contact_phone\u0027)[3:6] + \u0027-\u0027 + data.getValueAt(0,\u0027emergency_contact_phone\u0027)[6:]\n\t\t\t\tself.custom.RegistrationData.emergency_contact_phone \u003d ec_phone\n\t\t\tif data.getValueAt(0,\u0027emergency_contact_email\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.emergency_contact_email \u003d data.getValueAt(0,\u0027emergency_contact_email\u0027)\n\t\t\tself.custom.RegistrationData.emergency_contact_type_id \u003d data.getValueAt(0,\u0027emergency_contact_type_id\u0027)\n\t\t\t#Misc info\t\t\t\n\t\t\tself.custom.RegistrationData.family_id \u003d data.getValueAt(0,\u0027family_id\u0027)\n\t\t\tself.custom.RegistrationData.hoh_relationship_id \u003d data.getValueAt(0,\u0027hoh_relationship_id\u0027)\n\t\t\t#Set values to empty string as default\n\t\t\tself.custom.RegistrationData.employer \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.school \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.congregation \u003d \u0027\u0027\n\t\t\t#Only load the data if not null\n\t\t\tif data.getValueAt(0,\u0027employer\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.employer \u003d data.getValueAt(0,\u0027employer\u0027)\n\t\t\tif data.getValueAt(0,\u0027school\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.school \u003d data.getValueAt(0,\u0027school\u0027)\n\t\t\tif data.getValueAt(0,\u0027congregation\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.congregation \u003d data.getValueAt(0,\u0027congregation\u0027)\n\t\t\n\t\t\n\t\t\n\t\t#set the refresh trigger to false when finished\n\t\tself.custom.func_refresh \u003d False\n\t\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"Participants Personal Detail Edit view.custom.func_refresh\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)"
      },
      "persistent": true
    },
    "custom.skills": {
      "binding": {
        "config": {
          "parameters": {
            "volunteerId": "{view.params.volunteerId}"
          },
          "queryPath": "Volunteers/Details/VolunteerSkills",
          "returnFormat": "json"
        },
        "transforms": [
          {
            "code": "\tselection \u003d []\n\tfor row in value:\n\t\tselection.append(row[\"skillId\"])\n\treturn selection",
            "type": "script"
          }
        ],
        "type": "query"
      },
      "persistent": true
    },
    "params.volunteerId": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 650,
      "width": 1344
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Header"
        },
        "position": {
          "shrink": 0
        },
        "props": {
          "params": {
            "Text": "Profile Information"
          },
          "path": "Volunteers/Templates/Header",
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Header_Label"
        },
        "position": {
          "basis": "100px",
          "display": false,
          "shrink": 0
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_Status"
        },
        "position": {
          "basis": "32px",
          "display": false
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "\u0027Status:\u0027"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Row_Status"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.status_selection": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.ProfileData.status"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Volunteers/Detail/Cards/Profile/Edit/Row_Status",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Label_Availability"
        },
        "position": {
          "basis": "32px",
          "display": false
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "\u0027Availability:\u0027"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_Skills"
        },
        "position": {
          "basis": "32px",
          "display": false
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "\u0027Skills:\u0027"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Row_Availability"
        },
        "position": {
          "basis": "120px"
        },
        "propConfig": {
          "props.params.availability_seasonal_availability_type": {
            "binding": {
              "config": {
                "path": "view.custom.ProfileData.profile.availability_seasonal_availability_type"
              },
              "transforms": [
                {
                  "code": "\tif value:\n\t\treturn value\n\treturn \u0027\u0027",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          },
          "props.params.availability_seasonal_end_date": {
            "binding": {
              "config": {
                "path": "view.custom.ProfileData.profile.availability_seasonal_end_date"
              },
              "transforms": [
                {
                  "code": "\tif value:\n\t\treturn value\n\treturn \u0027\u0027",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          },
          "props.params.availability_seasonal_start_date": {
            "binding": {
              "config": {
                "path": "view.custom.ProfileData.profile.availability_seasonal_start_date"
              },
              "transforms": [
                {
                  "code": "\tif value:\n\t\treturn value\n\treturn \u0027\u0027",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          },
          "props.params.availability_upto_hours": {
            "binding": {
              "config": {
                "path": "view.custom.ProfileData.profile.availability_upto_hours"
              },
              "transforms": [
                {
                  "code": "\tif value:\n\t\treturn value\n\treturn \u0027\u0027",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          },
          "props.params.availability_upto_type": {
            "binding": {
              "config": {
                "path": "view.custom.ProfileData.profile.availability_upto_type"
              },
              "transforms": [
                {
                  "code": "\tif value:\n\t\treturn value\n\treturn \u0027\u0027",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          },
          "props.params.availability_weekly_selection": {
            "binding": {
              "config": {
                "path": "view.custom.ProfileData.profile.availability_weekly_selection"
              },
              "transforms": [
                {
                  "code": "\tif value:\n\t\treturn [int(x) for x in value.split(\",\")]\n\treturn \u0027\u0027",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Volunteers/Detail/Cards/Profile/Edit/Row_Availability",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Row_Daily_Availability_Monring"
        },
        "position": {
          "basis": "60px"
        },
        "propConfig": {
          "props.params.availability_daily_selection": {
            "binding": {
              "config": {
                "path": "view.custom.ProfileData.profile.availability_daily_morning"
              },
              "transforms": [
                {
                  "code": "\tif value:\n\t\treturn [str(x) for x in value.split(\",\")]\n\treturn \u0027\u0027",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "text": "Monring Availabliity"
          },
          "path": "Volunteers/Detail/Cards/Profile/Edit/Row_Daily_Availablity",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Row_Daily_Availability_Afternoon"
        },
        "position": {
          "basis": "60px"
        },
        "propConfig": {
          "props.params.availability_daily_selection": {
            "binding": {
              "config": {
                "path": "view.custom.ProfileData.profile.availability_daily_afternoon"
              },
              "transforms": [
                {
                  "code": "\tif value:\n\t\treturn [str(x) for x in value.split(\",\")]\n\treturn \u0027\u0027",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "text": "Afternoon Availability"
          },
          "path": "Volunteers/Detail/Cards/Profile/Edit/Row_Daily_Availablity",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Row_Daily_Availability_Evening"
        },
        "position": {
          "basis": "60px"
        },
        "propConfig": {
          "props.params.availability_daily_selection": {
            "binding": {
              "config": {
                "path": "view.custom.ProfileData.profile.availability_daily_evening"
              },
              "transforms": [
                {
                  "code": "\tif value:\n\t\treturn [str(x) for x in value.split(\",\")]\n\treturn \u0027\u0027",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "text": "Evining Avablability"
          },
          "path": "Volunteers/Detail/Cards/Profile/Edit/Row_Daily_Availablity",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Row_Groups"
        },
        "position": {
          "basis": "60px"
        },
        "propConfig": {
          "props.params.group_selection": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.ProfileData.volunteerGroupId"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Volunteers/Detail/Cards/Profile/Edit/Row_Group",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Row_Events"
        },
        "position": {
          "basis": "60px"
        },
        "propConfig": {
          "props.params.events_selections": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.events"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Volunteers/Detail/Cards/Profile/Edit/Row_Events",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Row_Skills"
        },
        "position": {
          "basis": "60px"
        },
        "propConfig": {
          "props.params.skills_selection": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.skills"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Volunteers/Detail/Cards/Profile/Edit/Row_Skills",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": [
                  {
                    "config": {
                      "script": "\timport traceback\n\timport re\n#\ttry:\n\tproject \u003d \"HMS\"\n\t### Declare parameters \n\t#General Info\n\tvolunteerId \u003d self.view.params.volunteerId\n\tuser_name \u003d self.session.props.auth.user.userName\n\t\n\t#Status Row\t\t\n\tstatus_selection \u003d self.view.custom.ProfileData.status\n\t\n\t#Group\n\tgroupId \u003d self.view.custom.ProfileData.volunteerGroupId\n\t\n\t#Profile Row\n\tif (self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_start_date and \n\tnot isinstance(self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_start_date, long) and \n\tnot isinstance(self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_start_date, str)):\n\t\tstart_date \u003d system.date.toMillis(self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_start_date)\n\telse: \n\t\tstart_date \u003d \u0027\u0027\n\t\n\tif (self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_end_date and \n\tnot isinstance(self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_end_date, long) and \n\tnot isinstance(self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_end_date, str)):\n\t\tend_date \u003d system.date.toMillis(self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_end_date)\n\telse: \n\t\tend_date \u003d \u0027\u0027\n\t\n\t#availability_upto_hours \u003d \u0027\u0027\n\t#if(self.parent.parent.getChild(\"Row_Availability\").props.params.availability_upto_hours.isdigit()):\n\t#\tavailability_upto_hours \u003d int(self.parent.parent.getChild(\"Row_Availability\").props.params.availability_upto_hours)\n\tavailability_weekly_selection \u003d self.parent.parent.getChild(\"Row_Availability\").props.params.availability_weekly_selection \n\tavailability_weekly_str \u003d \",\".join([str(x) for x in availability_weekly_selection])\n\t\n\tavailability_daily_morning_selection \u003d self.parent.parent.getChild(\"Row_Daily_Availability_Monring\").props.params.availability_daily_selection\n\tavailability_daily_afternoon_selection \u003d self.parent.parent.getChild(\"Row_Daily_Availability_Afternoon\").props.params.availability_daily_selection\n\tavailability_daily_evening_selection \u003d self.parent.parent.getChild(\"Row_Daily_Availability_Evening\").props.params.availability_daily_selection\n\t\n\tavailability_daily_morning_str \u003d \",\".join([str(x) for x in availability_daily_morning_selection])\n\tavailability_daily_afternoon_str \u003d \",\".join([str(x) for x in availability_daily_afternoon_selection])\n\tavailability_daily_evening_str \u003d \",\".join([str(x) for x in availability_daily_evening_selection])\n\t\n\tprofile_pyObj \u003d {\n\t    \"availability_seasonal_start_date\": start_date,\n\t    \"availability_seasonal_end_date\": end_date,\n\t    \"availability_seasonal_availability_type\": self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_availability_type,\n\t    \"availability_upto_type\": self.parent.parent.getChild(\"Row_Availability\").props.params.availability_upto_type,\n\t    \"availability_upto_hours\": self.parent.parent.getChild(\"Row_Availability\").props.params.availability_upto_hours,\n\t    \"availability_weekly_selection\": availability_weekly_str,\n\t    \"availability_daily_morning\": availability_daily_morning_str,\n\t    \"availability_daily_afternoon\": availability_daily_afternoon_str,\n\t    \"availability_daily_evening\": availability_daily_evening_str\n\t}\n\t\n\tprofile \u003d system.util.jsonEncode(profile_pyObj)\n\t\n\t#Skills Row\n\tskills \u003d self.view.custom.skills if self.view.custom.skills is not None else []\n\told_skills \u003d system.db.runNamedQuery(project\u003dproject, path\u003d\"Volunteers/Details/VolunteerSkills\", parameters\u003d{\"volunteerId\":volunteerId})\n\told_skills \u003d system.dataset.toPyDataSet(old_skills)\n\told_skills_ids \u003d [x[\"skillId\"] for x in old_skills]\n\tdelete_skills \u003d [x[\"id\"] for x in old_skills if x[\"skillId\"] not in skills]\n\tadd_skills \u003d [x for x in skills if x not in old_skills_ids]\n\t\n\t\n\t\n\t\n\t#Events\n\tif self.view.custom.events:\n\t\tevents \u003d self.view.custom.events\n\telse:\n\t\tevents \u003d []\n\told_events \u003d system.db.runNamedQuery(project\u003dproject, path\u003d\"Volunteers/Volunteers/VolunteerProfileEvents\", parameters\u003d{\"volunteerId\":volunteerId})\n\told_events \u003d system.dataset.toPyDataSet(old_events)\n\told_event_ids \u003d [x[\"eventId\"] for x in old_events]\n\tdelete_events \u003d [x[\"id\"] for x in old_events if x[\"eventId\"] not in events]\n\tadd_events \u003d [x for x in events if x not in old_event_ids]\n\t\t\t\t\t\n\t## Check if parameters are filled in correctly \n\tif status_selection is None:\n\t\tvalid \u003d False\n\t\t#system.perspective.print(\u0027Null Error\u0027)\n\t\terror_message \u003d \"Please fill in all the mandatory fields correctly before saving.\"\n\telse:\n\t\tvalid \u003d True\n\t\tsystem.perspective.print(\u0027Data Valid\u0027)\n\t\t\n\t### Check if data is valid otherwise show error message.\n\tif valid:\n\t\n\t\t### Create transaction\n\t\ttransactionFailed \u003d False\n\t\ttxId \u003d system.db.beginTransaction(timeout\u003d5000)\n\t\ttry:\n\t\t\t#Update the Human Data\n\t\t\tpath \u003d \"Volunteers/Details/VolunteerSaveProfile\"\n\t\t\tparameters \u003d {\n\t\t\t\t\"volunteerId\": self.view.params.volunteerId,\n\t\t\t\t\"profile\": profile,\n\t\t\t\t\"volunteerGroupId\": groupId,\n\t\t\t\t\"status\": status_selection\n\t\t\t}\n\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, tx\u003dtxId, getKey\u003dTrue)\n\t\t\tif len(add_events) \u003e 0:\n\t\t\t\tpath \u003d \"Volunteers/Volunteers/VolunteerAddEvent\"\n\t\t\t\tfor event in add_events:\n\t\t\t\t\tparams \u003d {\n\t\t\t\t\t\t\"volunteerId\": self.view.params.volunteerId,\n\t\t\t\t\t\t\"eventId\": event\n\t\t\t\t\t}\n\t\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparams, tx\u003dtxId)\n\t\t\t\t\t\n\t\t\tif len(delete_events) \u003e 0:\n\t\t\t\tpath \u003d \"Volunteers/Volunteers/VolunteerDeleteEvent\"\n\t\t\t\tfor event in delete_events:\n\t\t\t\t\tparams \u003d {\n\t\t\t\t\t\t\"id\": event\n\t\t\t\t\t}\n\t\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparams, tx\u003dtxId)\n\t\t\tif len(add_skills) \u003e 0:\n\t\t\t\tpath \u003d \"Volunteers/Volunteers/VolunteerAddSkill\"\n\t\t\t\tfor skill in add_skills:\n\t\t\t\t\tparams \u003d {\n\t\t\t\t\t\t\"volunteerId\": self.view.params.volunteerId,\n\t\t\t\t\t\t\"skillId\": skill\n\t\t\t\t\t}\n\t\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparams, tx\u003dtxId)\n\t\t\t\t\t\n\t\t\tif len(delete_skills) \u003e 0:\n\t\t\t\tpath \u003d \"Volunteers/Volunteers/VolunteerDeleteSkill\"\n\t\t\t\tfor skill in delete_skills:\n\t\t\t\t\tparams \u003d {\n\t\t\t\t\t\t\"id\": skill\n\t\t\t\t\t}\n\t\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparams, tx\u003dtxId)\n\t\t\tif groupId:\n\t\t\t\t# Update Group\n\t\t\t\tpath \u003d \"Volunteers/Volunteers/VolunteerUpdateGroup\"\n\t\t\t\tparameters \u003d {\n\t\t\t\t\t\"volunteerId\": self.view.params.volunteerId,\n\t\t\t\t\t\"groupId\": groupId\n\t\t\t\t}\n\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, tx\u003dtxId, getKey\u003dTrue)\t\n\t\t\t\n\t\texcept:\n\t\t\ttransactionFailed \u003d True\n\t\t\tlogger \u003d system.util.getLogger(\"Volunteer Profile Button Save Error\")\n\t\t\tmsg \u003d traceback.format_exc()\n\t\t\tlogger.error(msg)\n\t\t\t\n\t\t### Check if an error occured rollback the transaction\n\t\tif transactionFailed:\n\t\t\tsystem.db.rollbackTransaction(txId)\n\t\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\n\t\t\tRefresh \u003d 0\n\t\t### Otherwise commit \n\t\telse:\n\t\t\tsystem.db.commitTransaction(txId)\n\t\t\t\n\t\t\tself.getSibling(\"Label\").showMessage(\"Volunteer Profile Updated Successfully\")\n\t\t\t#system.perspective.sendMessage(messageType\u003d\"refreshPersonalData\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t#system.perspective.sendMessage(messageType\u003d\"refreshPersonalInformation\", payload\u003d{}, scope\u003d\"session\")\n\t\t\n\t\t### Always close the transaction\t\n\t\tsystem.db.closeTransaction(txId)\n\n\telse:\n\t\tself.getSibling(\"Label\").showMessage(error_message)\n\t\t\t\n#\texcept:\n#\t\tlogger \u003d system.util.getLogger(\"Volunteer Profile Detail Edit Button Save\")\n#\t\tmsg \u003d traceback.format_exc()\n#\t\tlogger.error(msg)"
                    },
                    "scope": "G",
                    "type": "script"
                  },
                  {
                    "config": {
                      "script": "\tproject \u003d \"HMS\"  \n\tif (self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_start_date and \n\tnot isinstance(self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_start_date, long) and \n\tnot isinstance(self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_start_date, str)):\n\t\tstart_date \u003d system.date.toMillis(self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_start_date)\n\telse: \n\t\tstart_date \u003d \u0027\u0027\n\t\n\tif (self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_end_date and \n\tnot isinstance(self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_end_date, long) and \n\tnot isinstance(self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_end_date, str)):\n\t\tend_date \u003d system.date.toMillis(self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_end_date)\n\telse: \n\t\tend_date \u003d \u0027\u0027\n\t\n\tprofile \u003d {\n\t\"availability_seasonal_start_date\" : start_date,\n\t\"availability_seasonal_end_date\" : end_date,\n\t\"availability_seasonal_availability_type\" : self.parent.parent.getChild(\"Row_Availability\").props.params.availability_seasonal_availability_type,\n\t\"availability_upto_type\" : self.parent.parent.getChild(\"Row_Availability\").props.params.availability_upto_type,\n\t\"availability_upto_hours\" : self.parent.parent.getChild(\"Row_Availability\").props.params.availability_upto_hours,\n\t\"availability_weekly_selection\" : self.parent.parent.getChild(\"Row_Availability\").props.params.availability_weekly_selection,\n\t\"availability_daily_evening\" : str(self.parent.parent.getChild(\"Row_Daily_Availability_Evening\").props.params.availability_daily_selection)\n\t}\n\tsystem.perspective.print(message \u003d profile)\n\tprofile \u003d system.util.jsonEncode(profile)\n\tsystem.perspective.print(message \u003d profile)"
                    },
                    "enabled": false,
                    "scope": "G",
                    "type": "script"
                  }
                ]
              }
            },
            "meta": {
              "name": "Button Save"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "15px",
                "marginLeft": "20px",
                "marginRight": "20px",
                "marginTop": "15px"
              },
              "text": "Save"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tsystem.perspective.sendMessage(messageType\u003d\"refreshPersonalData\", payload\u003d{}, scope\u003d\"session\")"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button Cancel"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Secondary_Orange",
                "marginBottom": "15px",
                "marginTop": "15px"
              },
              "text": "Undo/Reload"
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "Label",
              "visible": false
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Text/Error_Message"
              },
              "text": "Volunteer Profile Updated Successfully"
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "showMessage",
                  "params": [
                    "message"
                  ],
                  "script": "\timport time\n\tself.props.text \u003d message\n\tself.meta.visible \u003d True\n\ttime.sleep(5)\n\tself.meta.visible \u003d False\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "root actions"
        },
        "position": {
          "basis": "65px",
          "shrink": 0
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "32px",
          "display": false
        },
        "props": {
          "text": "{\"availability_upto_type\":\"\",\"availability_upto_hours\":\"\",\"availability_seasonal_availability_type\":null,\"availability_seasonal_end_date\":\"\",\"availability_weekly_selection\":\"\",\"availability_seasonal_start_date\":1756702800000}"
        },
        "type": "ia.display.label"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "refreshPersonalData",
          "pageScope": true,
          "script": "\tview \u003d self.view\n\tview.refreshBinding(\"custom.sql_data\")",
          "sessionScope": true,
          "viewScope": true
        }
      ]
    },
    "type": "ia.container.flex"
  }
}