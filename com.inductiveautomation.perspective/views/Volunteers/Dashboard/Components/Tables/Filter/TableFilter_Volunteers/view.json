{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\tEvent \u003d self.getChild(\"root\").getChild(\"Event\")\n\tEvent.setOptions()"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "CalenderId": null,
    "Events": null,
    "Gender": null,
    "activity_range": 365,
    "exportDataset": {
      "$": [
        "ds",
        192,
        1630256994190
      ],
      "$columns": [
        {
          "data": [
            4,
            5,
            1,
            0,
            3,
            2
          ],
          "name": "id",
          "type": "Integer"
        },
        {
          "data": [
            "Client refused",
            "Data not collected",
            "Female",
            "Male",
            "Transgender Female to Male",
            "Transgender Male to Female"
          ],
          "name": "gender",
          "type": "String"
        }
      ]
    },
    "maxAge": null,
    "minAge": null,
    "partial": [
      {
        "label": "Partial",
        "value": 1
      }
    ],
    "search": ""
  },
  "propConfig": {
    "params.CalenderId": {
      "binding": {
        "config": {
          "path": "/root/emvCalendarId.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.Events": {
      "binding": {
        "config": {
          "path": "/root/Event.props.params.selectedValues"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.Gender": {
      "binding": {
        "config": {
          "path": "/root/Gender.props.params.selectedValue"
        },
        "transforms": [
          {
            "code": "\tretVal \u003d []\n\ttry:\n\t\tdata \u003d self.getChild(\"root\").getChild(\"Gender\").props.params.options\n\t\tfilterData \u003d system.dataset.toPyDataSet(data)\n\t\tfilterDict \u003d {}\n\t\tif value is None:\n\t\t\treturn retVal\n\t\tfor row in filterData:\n\t\t\tfilterDict[row[\"id\"]] \u003d row[\"gender\"]\t\n\t\treturn filterDict[value]\t\t\n\texcept:\n\t\treturn None\n",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.activity_range": {
      "binding": {
        "config": {
          "path": "/root/ActivityRange.props.params.selection"
        },
        "transforms": [
          {
            "code": "\tif value \u003d\u003d 0 or value \u003d\u003d None:\n\t\treturn 36500\n\telse:\n\t\treturn value",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.exportDataset": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.maxAge": {
      "binding": {
        "config": {
          "path": "/root/MaxAge.props.params.selectedValue"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.minAge": {
      "binding": {
        "config": {
          "path": "/root/MinAge.props.params.selectedValue"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.partial": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.search": {
      "binding": {
        "config": {
          "path": "/root/Search.props.params.searchText"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 30,
      "width": 1817
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "lblConditional"
        },
        "position": {
          "basis": "70px",
          "display": false,
          "shrink": 0
        },
        "props": {
          "style": {
            "classes": "Filter/Header_Text"
          },
          "text": "Last Activity:"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "ActivityRange"
        },
        "position": {
          "basis": "150px",
          "shrink": 0
        },
        "props": {
          "params": {
            "placeholder": "Activity Range",
            "selection": 365,
            "selection_in": 365
          },
          "path": "1_TEMPLATES/Filtering/Conditionals/Conditional_SingleDropDown_NoClear_ActivityRange",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "type": "ia.display.view"
      },
      {
        "events": {
          "system": {
            "onStartup": {
              "config": {
                "script": "\tself.setOptions()"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "emvCalendarId"
        },
        "position": {
          "basis": "300px"
        },
        "propConfig": {
          "props.params.actionPerformedPulse": {
            "onChange": {
              "enabled": false,
              "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\n"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [
              {
                "label": "Classes",
                "value": 4
              },
              {
                "label": "Daily Roles",
                "value": 5
              },
              {
                "label": "Main",
                "value": 3
              },
              {
                "label": "Orientation",
                "value": 6
              },
              {
                "label": "Other",
                "value": 7
              },
              {
                "label": "Special Events",
                "value": 8
              },
              {
                "label": "Training",
                "value": 9
              }
            ],
            "placeholder": "Calendar",
            "selection": null
          },
          "path": "Events/AttendanceHistory/Components/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\tquery \u003d \"\"\"\nSELECT [id]\n  ,[name]\nFROM [calendar].[calendars]\nORDER BY [name]\n\t\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[1]) for x in result]\n\t\n\t# Version 2 set options as dataset\n\t#self.props.params.options \u003d result\n\t\n\t"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Event"
        },
        "position": {
          "basis": "200px"
        },
        "props": {
          "params": {
            "column_name": "Event",
            "filter": "volunteerDashboard",
            "filterData": [
              {
                "label": "Benefit concert",
                "value": "Benefit concert"
              },
              {
                "label": "Community Cleanup",
                "value": "Community Cleanup"
              }
            ],
            "filterName": "Event",
            "key": "Event",
            "placeholder": "(All Events)",
            "searchType": "equals",
            "selectedValues": null
          },
          "path": "Volunteers/Templates/TableHeader/MultiselectFilter",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\t# implement your method here\n\tquery \u003d \"\"\"\n\tSELECT \n\t\t [name] AS [value]\n\t\t,[name] AS [label]\n\tFROM [calendar].[CalendarEvents]\n\tGROUP BY [name]\n\tORDER BY [name] \n\t\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.filterData \u003d [ dict(value \u003d x[0],label \u003d x[1]) for x in result]\n\t\n\t# Version 2 set options as dataset\n\t#self.props.params.filterData \u003d result"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "updateFilterOptions",
              "pageScope": true,
              "script": "\t# implement your handler here\n\tevents \u003d payload.get(\"Events\")\n\theader \u003d [\"Value\", \"Label\"]\n\tallRows \u003d []\n\tfor event in events:\n\t\tallRows.append([event,event])\n\t\n\t#self.props.params.filterData \u003d system.dataset.toDataSet(header, allRows)",
              "sessionScope": false,
              "viewScope": false
            }
          ]
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "serviceDate"
        },
        "position": {
          "basis": "180px",
          "shrink": 0
        },
        "props": {
          "params": {
            "column_name": "EventDate",
            "filter": "servicesHistory",
            "key": "serviceDate",
            "placeholder": "Date Range",
            "searchType": "dateRange"
          },
          "path": "1_TEMPLATES/Filtering/Session/DateRangePicker",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Gender"
        },
        "position": {
          "basis": "200px"
        },
        "propConfig": {
          "props.params.options": {
            "binding": {
              "config": {
                "queryPath": "Filter/getGenderId"
              },
              "type": "query"
            }
          }
        },
        "props": {
          "params": {
            "column_name": "Gender",
            "filter": "",
            "key": "",
            "placeholder": "Gender",
            "searchType": "match",
            "selectedValue": null
          },
          "path": "Volunteers/Templates/TableHeader/SingleDropDown",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "MinAge"
        },
        "position": {
          "basis": "100px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.options": {
            "binding": {
              "config": {
                "path": "parent.custom.ageDS"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "column_name": "Age",
            "filter": "",
            "key": "MinAge",
            "placeholder": "Min Age",
            "searchType": "match",
            "selectedValue": null
          },
          "path": "Volunteers/Templates/TableHeader/SingleDropDown",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "MaxAge"
        },
        "position": {
          "basis": "100px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.options": {
            "binding": {
              "config": {
                "path": "parent.custom.ageDS"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "column_name": "Age",
            "filter": "participantDashboard",
            "key": "MaxAge",
            "placeholder": "Max Age",
            "searchType": "upperBoundInclusive",
            "selectedValue": null
          },
          "path": "Volunteers/Templates/TableHeader/SingleDropDown",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "type": "ia.display.view"
      },
      {
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "script": "\txls \u003d system.dataset.toExcel(True, self.view.params.exportDataset)\n\tsystem.perspective.download(\"Volunteer Hours.xlsx\", xls)"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "toExcel"
        },
        "position": {
          "basis": "30px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.dataset": {
            "binding": {
              "config": {
                "path": "view.params.exportDataset"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "defaultFilePrefix": "Participants"
          },
          "path": "1_TEMPLATES/Tables/TableToExcel"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "toPDF",
          "visible": false
        },
        "position": {
          "basis": "30px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.dataset": {
            "binding": {
              "config": {
                "path": "view.params.exportDataset"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "defaultFilePrefix": "Participants"
          },
          "path": "1_TEMPLATES/Tables/TableToPDF"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Placeholder"
        },
        "position": {
          "basis": "1px",
          "grow": 1
        },
        "props": {
          "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "lblSearch"
        },
        "position": {
          "basis": "50px",
          "shrink": 0
        },
        "props": {
          "style": {
            "classes": "Table/Filter_Header",
            "textAlign": "end"
          },
          "text": "Search:"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Search"
        },
        "position": {
          "basis": "220px",
          "shrink": 0
        },
        "props": {
          "params": {
            "column_name": [
              "FirstName",
              "MiddleName",
              "LastName",
              "NickName",
              "BirthDate",
              "Gender",
              "Race",
              "veteran",
              "Shelter"
            ],
            "filter": "participantDashboard",
            "key": "Search",
            "placeholder": "Search",
            "searchText": "",
            "searchType": "like"
          },
          "path": "1_TEMPLATES/Filtering/Filters/Search_Bar",
          "style": {
            "classes": "Table/Search_Bar"
          },
          "useDefaultViewWidth": true
        },
        "type": "ia.display.view"
      },
      {
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "script": "\t#Clear the filter components\n\tsystem.perspective.sendMessage(messageType\u003d\"clearFilter\")"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "ClearFilters"
        },
        "position": {
          "basis": "40px",
          "shrink": 0
        },
        "props": {
          "path": "1_TEMPLATES/Filtering/Filters/ClearFilters"
        },
        "type": "ia.display.view"
      }
    ],
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "custom.ageDS": {
        "binding": {
          "config": {
            "expression": "1"
          },
          "transforms": [
            {
              "code": "\theader \u003d [\"value\",\"label\"]\n\tallRows\u003d []\n\tfor i in range(2,101):\n\t\tallRows.append([i,i])\n\treturn system.dataset.toDataSet(header, allRows)",
              "type": "script"
            }
          ],
          "type": "expr"
        }
      }
    },
    "props": {
      "style": {
        "classes": "Filter/Header_Text"
      }
    },
    "type": "ia.container.flex"
  }
}