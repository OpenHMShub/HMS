{
  "custom": {
    "bedInfo": {
      "$": [
        "ds",
        192,
        1609771398455
      ],
      "$columns": [
        {
          "data": [
            5
          ],
          "name": "facilityId",
          "type": "Integer"
        },
        {
          "data": [
            "Night Shift Dorm"
          ],
          "name": "facilityName",
          "type": "String"
        },
        {
          "data": [
            48
          ],
          "name": "roomId",
          "type": "Integer"
        },
        {
          "data": [
            "Night Shift Dorm"
          ],
          "name": "roomName",
          "type": "String"
        },
        {
          "data": [
            102
          ],
          "name": "bedId",
          "type": "Integer"
        },
        {
          "data": [
            "Bottom Bunk 1"
          ],
          "name": "bedName",
          "type": "String"
        }
      ]
    },
    "occupiedInfo": {
      "$": [
        "ds",
        192,
        1611964660473
      ],
      "$columns": [
        {
          "data": [
            1598170320000,
            1604273319000,
            1605005486000,
            1605005977000,
            1605006401000
          ],
          "name": "eventStart",
          "type": "Date"
        },
        {
          "data": [
            null,
            null,
            null,
            1611565900470,
            null
          ],
          "name": "eventEnd",
          "type": "Date"
        },
        {
          "data": [
            "Robert Green",
            "Jessica Alexandra Smith",
            "Jessie Frank Harris",
            "Richard John Smith",
            "James Elvis Bratchie"
          ],
          "name": "participantName",
          "type": "String"
        },
        {
          "data": [
            59,
            3,
            66,
            4,
            56
          ],
          "name": "participantId",
          "type": "Integer"
        }
      ]
    },
    "reservedInfo": {
      "$": [
        "ds",
        192,
        1611964660460
      ],
      "$columns": [
        {
          "data": [],
          "name": "reservationStart",
          "type": "Date"
        },
        {
          "data": [],
          "name": "reservationEnd",
          "type": "Date"
        },
        {
          "data": [],
          "name": "participantName",
          "type": "String"
        },
        {
          "data": [],
          "name": "participantId",
          "type": "Integer"
        }
      ]
    }
  },
  "params": {
    "endDate": "2021-01-25",
    "facilityId": 4,
    "startDate": "2021-01-25"
  },
  "propConfig": {
    "custom.bedInfo": {
      "persistent": true
    },
    "custom.occupiedInfo": {
      "persistent": true
    },
    "custom.reservedInfo": {
      "persistent": true
    },
    "params.endDate": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.facilityId": {
      "onChange": {
        "enabled": null,
        "script": "\troot \u003d self.getChild(\"root\")\n\t\n\ttry:\n\t\tbedId \u003d long(currentValue.value)\n\texcept:\n\t\tsystem.perspective.print((\u0027bedId :\u0027,bedId))\n\telse:\n\n\t\t#root.setBedInfo()\n\t\troot.setReservedInfo()\n\t\troot.setOccupiedInfo()"
      },
      "paramDirection": "input",
      "persistent": true
    },
    "params.startDate": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "width": 599
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView"
        },
        "position": {
          "basis": "62px"
        },
        "props": {
          "path": "Shelter/Schedule/PreviewForDashboard/Cards/PreviewHeader",
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "HeaderEmbeddedView"
        },
        "position": {
          "basis": "Auto",
          "shrink": 0
        },
        "propConfig": {
          "props.params.Text": {
            "binding": {
              "config": {
                "path": "view.custom.bedInfo"
              },
              "transforms": [
                {
                  "code": "\tfullInfo \u003d \"{} / {} / {}\".format(value.getValueAt(0,\"facilityName\"),value.getValueAt(0,\"roomName\"),value.getValueAt(0,\"bedName\"))\n\treturn fullInfo",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Shelter/Schedule/PreviewForDashboard/Cards/Header"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "IntervalEmbeddedView"
        },
        "position": {
          "basis": "Auto",
          "shrink": 0
        },
        "propConfig": {
          "props.params.endDate": {
            "binding": {
              "config": {
                "path": "view.params.endDate"
              },
              "transforms": [
                {
                  "code": "\treturn value[:10]",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          },
          "props.params.startDate": {
            "binding": {
              "config": {
                "path": "view.params.startDate"
              },
              "transforms": [
                {
                  "code": "\treturn value[:10]",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Shelter/Schedule/PreviewForDashboard/Cards/Interval",
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\troot \u003d self.parent\n\tpayload \u003d {\u0027dateIn\u0027: root.getAsClientTime(system.date.now()), \u0027facilityId\u0027: 5}\n\t\n\tsystem.perspective.sendMessage(\u0027mhSetPrevAvailabilityInit\u0027,payload) \t"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Button"
        },
        "position": {
          "basis": "16px",
          "shrink": 0
        },
        "props": {
          "image": {
            "height": 16
          },
          "style": {
            "classes": "Buttons/Main",
            "marginBottom": "15px",
            "marginLeft": "240px",
            "marginRight": "240px",
            "marginTop": "15px"
          },
          "text": "Test Init"
        },
        "type": "ia.input.button"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\troot \u003d self.parent\n\tpayload \u003d {\u0027dateIn\u0027: root.getAsClientTime(system.date.now()), \u0027facilityId\u0027:5}\n\t\n\tsystem.perspective.sendMessage(\u0027mhSetPrevAvailability\u0027,payload) \n\t\n\t\n\t\n\t#system.perspective.sendMessage(\u0027mhSetScheduleData\u0027, payload)\n\t#bedDict \u003d root.getBedAsDict(self.view.params.bedId)\n\t#system.perspective.navigate(page \u003d \u0027Shelter/Detail/{}\u0027.format(bedDict[\"facilityId\"]))\n\t\n\t#params \u003d {\n\t\t#\"bedId\":bedDict[\u0027bedId\u0027], \n\t\t#\"shelterID\": bedDict[\u0027facilityId\u0027], \n\t\t#\"roomId\": bedDict[\u0027roomId\u0027],\n\t\t#\"selectedTab\": \"Current Residents\"\n\t#}\n\t#system.perspective.navigate(page \u003d \u0027Shelter/Detail/{}\u0027.format(params[\"shelterID\"]), params \u003d params)\n"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Button_0"
        },
        "position": {
          "basis": "32px",
          "shrink": 0
        },
        "props": {
          "style": {
            "classes": "Buttons/Main",
            "marginBottom": "15px",
            "marginLeft": "240px",
            "marginRight": "240px",
            "marginTop": "15px"
          },
          "text": "Test View record"
        },
        "type": "ia.input.button"
      },
      {
        "events": {
          "system": {
            "onStartup": {
              "config": {
                "script": "\tsystem.perspective.print(\u0027sssstartUUUUUp\u0027)\n\t\n\t#root \u003d self.parent\n\t#payload \u003d {\u0027dateIn\u0027: root.getAsClientTime(system.date.now()), \u0027facilityId\u0027: 5}\n\t\n\t#system.perspective.sendMessage(\u0027mhSetPrevAvailabilityInit\u0027,payload) "
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "TableEmbeddedView_0"
        },
        "position": {
          "basis": "Auto"
        },
        "props": {
          "params": {
            "Description": "",
            "Info": ""
          },
          "path": "Shelter/Schedule/PreviewForDashboard/Cards/Availability_Table",
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "AboutHeader_EmbeddedView_3"
        },
        "position": {
          "basis": "Auto",
          "shrink": 0
        },
        "props": {
          "params": {
            "Text": "Reserved"
          },
          "path": "Shelter/Schedule/PreviewForDashboard/Cards/AboutHeader",
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Reserved_FlexRepeater"
        },
        "position": {
          "basis": "25%",
          "grow": 1
        },
        "props": {
          "direction": "column",
          "path": "Shelter/Schedule/PreviewForDashboard/Cards/IntervalParticipant",
          "style": {
            "overflow": "visible"
          }
        },
        "type": "ia.display.flex-repeater"
      },
      {
        "meta": {
          "name": "AboutHeader_EmbeddedView_4"
        },
        "position": {
          "basis": "Auto",
          "shrink": 0
        },
        "props": {
          "params": {
            "Text": "Occupied"
          },
          "path": "Shelter/Schedule/PreviewForDashboard/Cards/AboutHeader",
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Occupied_FlexRepeater"
        },
        "position": {
          "basis": "25%"
        },
        "props": {
          "direction": "column",
          "instances": [
            {
              "endDate": null,
              "instancePosition": {},
              "instanceStyle": {
                "classes": ""
              },
              "participantName": "Robert Green",
              "startDate": "2020-08-23 03:12:00"
            },
            {
              "endDate": null,
              "instancePosition": {},
              "instanceStyle": {
                "classes": ""
              },
              "participantName": "Jessica Alexandra Smith",
              "startDate": "2020-11-01 17:28:39"
            },
            {
              "endDate": null,
              "instancePosition": {},
              "instanceStyle": {
                "classes": ""
              },
              "participantName": "Jessie Frank Harris",
              "startDate": "2020-11-10 04:51:26"
            },
            {
              "endDate": "2021-01-25 03:11:40",
              "instancePosition": {},
              "instanceStyle": {
                "classes": ""
              },
              "participantName": "Richard John Smith",
              "startDate": "2020-11-10 04:59:37"
            },
            {
              "endDate": null,
              "instancePosition": {},
              "instanceStyle": {
                "classes": ""
              },
              "participantName": "James Elvis Bratchie",
              "startDate": "2020-11-10 05:06:41"
            }
          ],
          "path": "Shelter/Schedule/PreviewForDashboard/Cards/IntervalParticipant",
          "style": {
            "overflow": "visible"
          }
        },
        "type": "ia.display.flex-repeater"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "setBedInfo",
          "params": [],
          "script": "\tbedId \u003d self.view.params.bedId\n\t\n\tqueryBedInfo \u003d \"\"\"\n\tSELECT [Facility].[id] AS facilityId, [Facility].[facilityName], [Room].[id] AS roomId, [Room].[roomName], [Bed].[id] AS bedId,  [Bed].[bedName]\n\tFROM [HMSOps].[lodging].[Bed]\n\t\tINNER JOIN [HMSOps].[lodging].[Room] ON [Bed].[roomId] \u003d [Room].[id]\n\t\tINNER JOIN [HMSOps].[lodging].[Facility] ON [Room].[facilityId] \u003d [Facility].[id]\n\tWHERE [Bed].[id] \u003d ?\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(queryBedInfo,[bedId],\u0027HMSOps\u0027)\n\tself.view.custom.bedInfo \u003d result"
        },
        {
          "name": "setReservedInfo",
          "params": [],
          "script": "\tflrReserved \u003d self.getChild(\"Reserved_FlexRepeater\")\n\t#flrReserved.meta.visible \u003d False\n\t\n\t\n\tfacilityId \u003d self.view.params.facilityId\n\tstartDate \u003d self.view.params.startDate\n\tendDate \u003d self.view.params.endDate\n\n\tqueryReservedInfo \u003d \"\"\"\n\tDECLARE @StartInterval date \u003d ?   \n\tDECLARE @EndInterval date \u003d ?\n\t\n\tSELECT  [Reservation].[reservationStart] \n\t\t,[Reservation].[reservationEnd]\n\t\t,CONCAT_WS(\u0027 \u0027,[Human].[firstName],[Human].[middleName],[Human].[lastName]) AS participantName\n\t\t,[Reservation].participantId\n\tFROM [HMSOps].[lodging].[Reservation] \n\t\tINNER JOIN [HMSOps].[participant].[Participant] ON [Participant].[id] \u003d [Reservation].[participantId] \n\t\tINNER JOIN [HMSOps].[humans].[Human] ON [Participant].[humanId] \u003d [Human].[id] \n\t\tINNER JOIN [HMSOps].[lodging].[Bed] ON [Reservation].[bedId] \u003d [Bed].[id]\n\t\tINNER JOIN [HMSOps].[lodging].[Room] ON [Bed].[roomId] \u003d [Room].[id]\n\t\t\n\tWHERE ([Reservation].[timeRetired] IS NULL\n\t\tAND [Reservation].[reservationStart] IS NOT NULL    \n\t\tAND CAST([Reservation].[reservationStart] AS date) \u003c\u003d @EndInterval\n\t\tAND CAST(ISNULL([Reservation].[reservationEnd],@EndInterval) AS date) \u003e\u003d @StartInterval\n\t\tAND [Room].[facilityId] \u003d ?) \n\t\n\tORDER BY [Reservation].[reservationStart]\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(queryReservedInfo,[startDate,endDate, facilityId],\u0027HMSOps\u0027)\n\tself.view.custom.reservedInfo \u003d result\n\t\n\tauxList \u003d []\n\tfor item in system.dataset.toPyDataSet(result):\n\t\tauxDict \u003d {}\n\t\ttry:\n\t\t\tauxDict[\u0027startDate\u0027] \u003d system.date.format(item[\u0027reservationStart\u0027])\n\t\texcept:\n\t\t\tauxDict[\u0027startDate\u0027] \u003d None\n\t\t\t\n\t\ttry:\n\t\t\tauxDict[\u0027endDate\u0027] \u003d system.date.format(item[\u0027reservationEnd\u0027])\n\t\texcept:\n\t\t\tauxDict[\u0027endDate\u0027] \u003d None\t\t\t\t\n\n\t\tauxDict[\u0027participantName\u0027] \u003d item[\u0027participantName\u0027]\n\t\tauxDict[\u0027instanceStyle\u0027] \u003d {} \n\t\tauxDict[\u0027instanceStyle\u0027][\u0027classes\u0027] \u003d \u0027\u0027\n\t\tauxDict[\u0027instancePosition\u0027] \u003d {} \n\t\tauxList.append(auxDict)\n\n\n\tflrReserved.props.instances \u003d auxList\n\t#flrReserved.meta.visible \u003d True"
        },
        {
          "name": "setOccupiedInfo",
          "params": [],
          "script": "\tfacilityId \u003d self.view.params.facilityId\n\tstartDate \u003d self.view.params.startDate\n\tendDate \u003d self.view.params.endDate\n\n\tqueryOccupiedInfo \u003d \"\"\"\n\tDECLARE @StartInterval date \u003d ?\n\tDECLARE @EndInterval date \u003d ?\n\t\t\t\n\tSELECT eventStart\n\t\t,eventEnd\n\t\t,CONCAT_WS(\u0027 \u0027,[Human].[firstName],[Human].[middleName],[Human].[lastName]) AS participantName\n\t\t,[BedLog].participantId  \n\tFROM [HMSOps].[lodging].[BedLog]  \n\t\tINNER JOIN [HMSOps].[participant].[Participant] ON [Participant].[id] \u003d [BedLog].[participantId] \n\t\tINNER JOIN [HMSOps].[humans].[Human] ON [Participant].[humanId] \u003d [Human].[id]\n\t\tINNER JOIN [HMSOps].[lodging].[Bed] ON [BedLog].[bedId] \u003d [Bed].[id]\n\t\tINNER JOIN [HMSOps].[lodging].[Room] ON [Bed].[roomId] \u003d [Room].[id] \n\tWHERE ([BedLog].[eventStart] IS NOT NULL    \n\tAND CAST([BedLog].[eventStart] AS date) \u003c\u003d @EndInterval\n\tAND CAST(ISNULL([BedLog].[eventEnd],@EndInterval) AS date) \u003e\u003d @StartInterval\n\tAND [Room].[facilityId] \u003d ?) \n\t\n\tORDER BY [BedLog].[eventStart]\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(queryOccupiedInfo,[startDate,endDate, facilityId],\u0027HMSOps\u0027)\n\tself.view.custom.occupiedInfo \u003d result\n\t\n\t\n\tauxList \u003d []\n\tfor item in system.dataset.toPyDataSet(result):\n\t\tauxDict \u003d {}\n\t\ttry:\n\t\t\tauxDict[\u0027startDate\u0027] \u003d system.date.format(item[\u0027eventStart\u0027])\n\t\texcept:\n\t\t\tauxDict[\u0027startDate\u0027] \u003d None\n\t\t\t\n\t\ttry:\n\t\t\tauxDict[\u0027endDate\u0027] \u003d system.date.format(item[\u0027eventEnd\u0027])\n\t\texcept:\n\t\t\tauxDict[\u0027endDate\u0027] \u003d None\t\t\t\t\n\n\t\tauxDict[\u0027participantName\u0027] \u003d item[\u0027participantName\u0027]\n\t\tauxDict[\u0027instanceStyle\u0027] \u003d {} \n\t\tauxDict[\u0027instanceStyle\u0027][\u0027classes\u0027] \u003d \u0027\u0027\n\t\tauxDict[\u0027instancePosition\u0027] \u003d {} \n\t\tauxList.append(auxDict)\n\n\tflrOccupied \u003d self.getChild(\"Occupied_FlexRepeater\")\n\tflrOccupied.props.instances \u003d auxList"
        },
        {
          "name": "getBedAsDict",
          "params": [
            "bedId"
          ],
          "script": "\tquery \u003d \"\"\"\n\tSELECT [Room].[facilityId], [Room].[id] AS roomId\n\tFROM [HMSOps].[lodging].[Bed]\n\tINNER JOIN [HMSOps].[lodging].[Room] ON [Bed].[roomId] \u003d [Room].[id]\n\tWHERE [Bed].[id] \u003d ?\n\t\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[bedId], \"HMSOps\")\n\tbedDict \u003d {\n\t\t\"bedId\":bedId, \n\t\t\"facilityId\": result.getValueAt(0,\u0027facilityId\u0027), \n\t\t\"roomId\": result.getValueAt(0,\u0027roomId\u0027)\n\t}\n\t\n\treturn bedDict \n\t\n\t"
        },
        {
          "name": "getAsClientTime",
          "params": [
            "datetimeInput"
          ],
          "script": "\ttimeClientOffset \u003d self.session.props.device.timezone.utcOffset - system.date.getTimezoneOffset()\n\ttimeClient \u003d system.date.addMinutes(datetimeInput,int(timeClientOffset*60))\n\t\n\treturn timeClient\n\n\n"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": []
    },
    "type": "ia.container.flex"
  }
}