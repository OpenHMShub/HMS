{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\troot \u003d self.getChild(\"root\")\n\t\n\tdateIn \u003d root.getAsClientTime(system.date.now())\n\troot.setTableDataInit(dateIn)"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {},
  "props": {
    "defaultSize": {
      "height": 620,
      "width": 710
    },
    "loading": {
      "mode": "blocking"
    }
  },
  "root": {
    "children": [
      {
        "custom": {
          "dataZ": null
        },
        "meta": {
          "name": "Table"
        },
        "position": {
          "basis": "700px",
          "grow": 1
        },
        "propConfig": {
          "props.columns": {
            "persistent": false
          },
          "props.data": {
            "persistent": false
          },
          "props.selection.data": {
            "persistent": false
          }
        },
        "props": {
          "cells": {
            "allowEditOn": "single-click"
          },
          "enableHeader": false,
          "pager": {
            "bottom": false,
            "initialOption": 50
          },
          "rows": {
            "highlight": {
              "color": "#CCFFFF",
              "enabled": false
            },
            "striped": {
              "enabled": false
            }
          },
          "selection": {
            "enableColumnSelection": true,
            "selectedColumn": "x6",
            "selectedRow": 21
          },
          "virtualized": false
        },
        "type": "ia.display.table"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "style": {
        "classes": "Background/Default",
        "overflow": "visible"
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "setTableData",
          "params": [
            "dateIn"
          ],
          "script": "\t\n\ttbl \u003d self.getChild(\"Table\")\n\n\tbedsPerRow \u003d 5\n\t\n\ttry:\n\t\n\t\tbedList \u003d self.getBedListDb(dateIn)\n\t\t\n\t\tbedList \u003d self.correctRooms(bedList, [\u0027Apartments\u0027,\u0027Vine Hill\u0027])\n\t\t\n\t\tmatrix \u003d self.getMatrix(bedList,bedsPerRow)\n\t\tmatrixWide \u003d self.getMatrixWide(matrix)\n\t\n\t\tself.setColumns(tbl, matrixWide)\n\t\t\t\n\t\tdata \u003d self.getDataProps(matrixWide)\n\t\t\n\t\ttbl.props.data \u003d data\n\texcept:\n\t\timport traceback\n\t\ttbf \u003d traceback.format_exc()\n\t\tsystem.perspective.print((\u0027Custom Error Message:\u0027,tbf))\n\n\n\t\n\n\n\t\n"
        },
        {
          "name": "setTableData_Copy",
          "params": [],
          "script": "\t\n\ttbl \u003d self.getChild(\"Table\")\n\n\tbedsPerRow \u003d 5\n\t\n\ttry:\n\t\n\t\tbedList \u003d self.getBedListDb()\n\t\tmatrix \u003d self.getMatrix(bedList,bedsPerRow)\n\t\tmatrixWide \u003d self.getMatrixWide(matrix)\n\t\n\t\tself.setTableColumns(tbl, matrixWide)\n\t\t\t\n\t\tdata \u003d self.getDataProps(matrixWide)\n\t\t\n\t\ttbl.props.data \u003d data\n\texcept:\n\t\timport traceback\n\t\ttbf \u003d traceback.format_exc()\n\t\tsystem.perspective.print((\u0027Custom Error Message:\u0027,tbf))\n\n\n\t\n\n\n\t\n"
        },
        {
          "name": "setTableDataInit",
          "params": [
            "dateIn"
          ],
          "script": "\ttbl \u003d self.getChild(\"Table\")\n\t\n\tbedsPerRow \u003d 5\n\n\tbedList \u003d self.getBedListDb(dateIn)\n\tmatrix \u003d self.getMatrix(bedList,bedsPerRow)\n\tmatrixWide \u003d self.getMatrixWide(matrix)\n\n\tself.setColumns(tbl, matrixWide)\n\n\tdata0 \u003d self.getDataPropsInit(matrixWide)\n\t\n\ttbl.custom.dataZ \u003d None\n\ttbl.props.data \u003d data0\n\n\n\t\n"
        },
        {
          "name": "setColumns",
          "params": [
            "tbl",
            "matrixWide"
          ],
          "script": "\tsegmentCount \u003d len(matrixWide)\n\tcolNames \u003d [\u0027x{}\u0027.format(i) for i in range(segmentCount)]\t\n\t\n\tfields \u003d colNames\n\theaderTitles \u003d colNames\n\tcolCount \u003d len(colNames)\n\t\n\twidths \u003d colCount*[240] #180\n\tjustify \u003d colCount*[\u0027center\u0027]\n\t\n\tjsonAtom \u003d \"\"\"{\n\t  \"visible\": true,\n\t  \"resizable\": true,\n\t  \"dateFormat\": \"MM/DD/YYYY\",\n\t  \"footer\": {\n\t    \"justify\": \"left\",\n\t    \"style\": { \"classes\": \"\" },\n\t    \"title\": \"\",\n\t    \"align\": \"center\"\n\t  },\n\t  \"editable\": true,\n\t  \"sortable\": true,\n\t  \"sort\": \"none\",\n\t  \"align\": \"center\",\n\t  \"viewPath\": \"\",\n\t  \"number\": \"value\",\n\t  \"boolean\": \"checkbox\",\n\t  \"strictWidth\": false,\n\t  \"field\": \"bedId\",\n\t  \"numberFormat\": \"0,0.##\",\n\t  \"justify\": \"auto\",\n\t  \"progressBar\": {\n\t    \"bar\": { \"color\": \"\", \"style\": { \"classes\": \"\" } },\n\t    \"min\": 0,\n\t    \"max\": 100,\n\t    \"track\": { \"color\": \"\", \"style\": { \"classes\": \"\" } },\n\t    \"value\": {\n\t      \"justify\": \"center\",\n\t      \"format\": \"0,0.##\",\n\t      \"style\": { \"classes\": \"\" },\n\t      \"enabled\": true\n\t    }\n\t  },\n\t  \"width\": \"\",\n\t  \"header\": {\n\t    \"justify\": \"left\",\n\t    \"style\": { \"classes\": \"\" },\n\t    \"title\": \"\",\n\t    \"align\": \"center\"\n\t  },\n\t  \"toggleSwitch\": { \"color\": { \"unselected\": \"\", \"selected\": \"\" } },\n\t  \"style\": {},\n\t  \"viewParams\": {},\n\t  \"render\": \"auto\"\n\t}\"\"\"\n\t\n\tpyList \u003d []\n\tlstCol \u003d []\n\tfor i in range(colCount):\n\t\tpyAtom \u003d system.util.jsonDecode(jsonAtom)\n\t\tpyAtom[\u0027field\u0027] \u003d fields[i]\n\t\tpyAtom[\u0027sortable\u0027] \u003d False\n\t\tpyAtom[\u0027editable\u0027] \u003d False\n\t\tpyAtom[\u0027strictWidth\u0027] \u003d True\n\t\tpyAtom[\u0027width\u0027] \u003d widths[i]\n\t\t#pyAtom[\u0027justify\u0027] \u003d justify[i]\n\t\tpyAtom[\u0027header\u0027][\u0027title\u0027] \u003d headerTitles[i]\n\t\t#pyAtom[\u0027header\u0027][\u0027justify\u0027] \u003d justify[i]\n\t\t#pyAtom[\u0027header\u0027][\u0027style\u0027][\u0027classes\u0027] \u003d \u0027Table/Column_Header_Detail_Small\u0027 #\u0027Table/Column_Header_Detail\u0027\n\t\t\n\t\tpyAtom[\u0027render\u0027] \u003d \u0027view\u0027\n\t\tpyAtom[\u0027viewPath\u0027] \u003d \"Shelter/Availabiliy/Components/Row_Simple_Five\" \n\t\t\n\t\tpyList.append(pyAtom)\n\t\t\n\ttbl.props.columns \u003d pyList\n\t\n\t\n\t"
        },
        {
          "name": "getAsClientTime",
          "params": [
            "datetimeInput"
          ],
          "script": "\ttimeClientOffset \u003d self.session.props.device.timezone.utcOffset - system.date.getTimezoneOffset()\n\ttimeClient \u003d system.date.addMinutes(datetimeInput,int(timeClientOffset*60))\n\t\n\treturn timeClient\n"
        },
        {
          "name": "getMatrix",
          "params": [
            "bedList",
            "bedsPerRow"
          ],
          "script": "\timport operator\n\timport itertools\n\n\tbedsPerRow \u003d 5\n\n\tbedList \u003d sorted(bedList, key\u003doperator.itemgetter(\"facilityName\",\"roomName\",\"bedNameNo\"))\n\t\n\tfrbList \u003d []\t\n\tfor i,g in itertools.groupby(bedList,key\u003d operator.itemgetter(\"facilityName\")): \n\t\t_lstG \u003d list(g)\n\t\t_lstRb \u003d []\n\t\tfor j, h in itertools.groupby(_lstG,key\u003d operator.itemgetter(\"roomName\")):\n\t\t\t_lstRb.append(list(h))\n\t\t\n\t\tfrbList.append(_lstRb)\n\t\n\taddEmpyBeforeFacility \u003d True\n\t\n\t# Create matrix as list with item as: facility(list) or room(list) or bed(list)\n\tmatrix \u003d []\n\ti \u003d 0\n\tfacilitiesIndex, roomsIndex \u003d [], []\n\tfor _f in frbList:\n\t\t# Add [None,None,...None] before facility name\n\t\tif addEmpyBeforeFacility and i !\u003d 0:\n\t\t\t_oneRow \u003d bedsPerRow*[None]\n\t\t\tmatrix.append(_oneRow)\n\t\t\ti +\u003d 1\t\n\t\t\t\n\t\t_oneRow \u003d [{\u0027facilityId\u0027: _f[0][0][\u0027facilityId\u0027], \u0027facilityName\u0027:_f[0][0][\u0027facilityName\u0027]}] + (bedsPerRow - 1)*[None]\n\t\tmatrix.append(_oneRow)\n\t\tfacilitiesIndex.append(i)\n\t\ti +\u003d 1\n\t\t\n\t\t# Loop rooms in facility\n\t\tfor _r in _f:\n\t\t\t_oneRow \u003d [{\u0027roomId\u0027: _r[0][\u0027roomId\u0027], \u0027roomName\u0027:_r[0][\u0027roomName\u0027]}] + (bedsPerRow - 1)*[None] \n\t\t\tmatrix.append(_oneRow)\n\t\t\troomsIndex.append(i)\n\t\t\ti +\u003d 1\n\t\t\t\n\t\t\t# Take only bed data, avoid facility room data\n\t\t\t_rPop \u003d [{\u0027bedId\u0027:x[\u0027bedId\u0027],\u0027bedState\u0027:x[\u0027bedState\u0027], \u0027bedName\u0027: x[\u0027bedName\u0027], \u0027bedNameNo\u0027: x[\u0027bedNameNo\u0027]} for x in _r]\n\t\t\troomSquared \u003d self.getRoomSquared(_rPop, bedsPerRow)\n\n\t\t\tfor x in roomSquared:\n\t\t\t\tmatrix.append(x)\n\t\t\t\ti +\u003d 1\n\n\treturn matrix\n\n\n\t\"\"\"\t\n\tExamples: \n\t\nmatrix \u003d \n[\n\t...\n\t\n    [{\"roomId\": 76, \"roomName\": u\"Room 9\"}, None, None, None, None],\n\t[\n\t    {\"bedState\": 0, \"bedId\": 189, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t    None,\n\t    None,\n\t    None,\n\t    None,\n\t],\n\t[{\"facilityId\": 14, \"facilityName\": u\"Welcome Dorm\"}, None, None, None, None],\n\t[{\"roomId\": 80, \"roomName\": u\"Welcome Dorm\"}, None, None, None, None],\n\t[\n\t    {\"bedState\": 0, \"bedId\": 193, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t    {\"bedState\": 0, \"bedId\": 194, \"bedName\": u\"Bed 2\", \"bedNameNo\": 2},\n\t    {\"bedState\": 0, \"bedId\": 197, \"bedName\": u\"Bed 3\", \"bedNameNo\": 3},\n\t    {\"bedState\": 0, \"bedId\": 196, \"bedName\": u\"Bed 4\", \"bedNameNo\": 4},\n\t    {\"bedState\": 0, \"bedId\": 195, \"bedName\": u\"Bed 5\", \"bedNameNo\": 5},\n\t],\n\t[\n\t    {\"bedState\": 0, \"bedId\": 200, \"bedName\": u\"Bed 6\", \"bedNameNo\": 6},\n\t    {\"bedState\": 0, \"bedId\": 198, \"bedName\": u\"Bed 7\", \"bedNameNo\": 7},\n\t    {\"bedState\": 0, \"bedId\": 199, \"bedName\": u\"Bed 8\", \"bedNameNo\": 8},\n\t    {\"bedState\": 0, \"bedId\": 201, \"bedName\": u\"Bed 9\", \"bedNameNo\": 9},\n\t    {\"bedState\": 0, \"bedId\": 202, \"bedName\": u\"Bed 10\", \"bedNameNo\": 10},\n\t],\n\t[\n\t    {\"facilityId\": 15, \"facilityName\": u\"Women\u0027s Welcome Dorm\"},\n\t    None,\n\t    None,\n\t    None,\n\t    None,\n\t],\n\t[{\"roomId\": 81, \"roomName\": u\"Women\u0027s Welcome Dorm\"}, None, None, None, None],\n\t[\n\t    {\"bedState\": 0, \"bedId\": 203, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t    {\"bedState\": 0, \"bedId\": 204, \"bedName\": u\"Bed 2\", \"bedNameNo\": 2},\n\t    {\"bedState\": 0, \"bedId\": 205, \"bedName\": u\"Bed 3\", \"bedNameNo\": 3},\n\t    {\"bedState\": 0, \"bedId\": 206, \"bedName\": u\"Bed 4\", \"bedNameNo\": 4},\n\t    None,\n\t],\n]\n\n\nbedList \u003d \n[\n...\n\t    {\n\t        \"facilityId\": 3,\n\t        \"bedState\": 0,\n\t        \"bedId\": 78,\n\t        \"roomId\": 45,\n\t        \"roomName\": u\"Hallway- Male\",\n\t        \"bedName\": u\"Bed 28\",\n\t        \"bedNameNo\": 28,\n\t        \"facilityName\": u\"Hallway\",\n\t    },\n\t    {\n\t        \"facilityId\": 3,\n\t        \"bedState\": 0,\n\t        \"bedId\": 79,\n\t        \"roomId\": 45,\n\t        \"roomName\": u\"Hallway- Male\",\n\t        \"bedName\": u\"Bed 29\",\n\t        \"bedNameNo\": 29,\n\t        \"facilityName\": u\"Hallway\",\n\t    },\n\t    {\n\t        \"facilityId\": 3,\n\t        \"bedState\": 0,\n\t        \"bedId\": 80,\n\t        \"roomId\": 45,\n\t        \"roomName\": u\"Hallway- Male\",\n\t        \"bedName\": u\"Bed 30\",\n\t        \"bedNameNo\": 30,\n\t        \"facilityName\": u\"Hallway\",\n\t    },\n\t    {\n\t        \"facilityId\": 3,\n\t        \"bedState\": 2,\n\t        \"bedId\": 81,\n\t        \"roomId\": 46,\n\t        \"roomName\": u\"Hallway-Female\",\n\t        \"bedName\": u\"Bed 1\",\n\t        \"bedNameNo\": 1,\n\t        \"facilityName\": u\"Hallway\",\n\t    },\n...\n]\n\n\n# list is list of facilities (list), facility is list of rooms(list), room is list of beds as dict\nfrbList \u003d [\n\t[\n\t\t[\n\t\t\t{\n\t\t\t\t\"facilityId\": 1,\n\t\t\t\t\"bedState\": 2,\n\t\t\t\t\"bedId\": 8,\n\t\t\t\t\"roomId\": 4,\n\t\t\t\t\"roomName\": u\"Apartment 300\",\n\t\t\t\t\"bedName\": u\"Bed 1\",\n\t\t\t\t\"bedNameNo\": 1,\n\t\t\t\t\"facilityName\": u\"Apartments\",\n\t\t\t}\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\t\"facilityId\": 1,\n\t\t\t\t\"bedState\": 0,\n\t\t\t\t\"bedId\": 9,\n\t\t\t\t\"roomId\": 5,\n\t\t\t\t\"roomName\": u\"Apartment 301\",\n\t\t\t\t\"bedName\": u\"Bed 1\",\n\t\t\t\t\"bedNameNo\": 1,\n\t\t\t\t\"facilityName\": u\"Apartments\",\n\t\t\t}\n\t\t],\n...\n\n    [\n\t\t[\n\t\t\t{\n\t\t\t\t\"facilityId\": 15,\n\t\t\t\t\"bedState\": 0,\n\t\t\t\t\"bedId\": 203,\n\t\t\t\t\"roomId\": 81,\n\t\t\t\t\"roomName\": u\"Women\u0027s Welcome Dorm\",\n\t\t\t\t\"bedName\": u\"Bed 1\",\n\t\t\t\t\"bedNameNo\": 1,\n\t\t\t\t\"facilityName\": u\"Women\u0027s Welcome Dorm\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"facilityId\": 15,\n\t\t\t\t\"bedState\": 0,\n\t\t\t\t\"bedId\": 204,\n\t\t\t\t\"roomId\": 81,\n\t\t\t\t\"roomName\": u\"Women\u0027s Welcome Dorm\",\n\t\t\t\t\"bedName\": u\"Bed 2\",\n\t\t\t\t\"bedNameNo\": 2,\n\t\t\t\t\"facilityName\": u\"Women\u0027s Welcome Dorm\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"facilityId\": 15,\n\t\t\t\t\"bedState\": 0,\n\t\t\t\t\"bedId\": 205,\n\t\t\t\t\"roomId\": 81,\n\t\t\t\t\"roomName\": u\"Women\u0027s Welcome Dorm\",\n\t\t\t\t\"bedName\": u\"Bed 3\",\n\t\t\t\t\"bedNameNo\": 3,\n\t\t\t\t\"facilityName\": u\"Women\u0027s Welcome Dorm\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"facilityId\": 15,\n\t\t\t\t\"bedState\": 0,\n\t\t\t\t\"bedId\": 206,\n\t\t\t\t\"roomId\": 81,\n\t\t\t\t\"roomName\": u\"Women\u0027s Welcome Dorm\",\n\t\t\t\t\"bedName\": u\"Bed 4\",\n\t\t\t\t\"bedNameNo\": 4,\n\t\t\t\t\"facilityName\": u\"Women\u0027s Welcome Dorm\",\n\t\t\t},\n\t\t]\n\t],\n]\n\"\"\"\n"
        },
        {
          "name": "getMatrixWide",
          "params": [
            "matrix"
          ],
          "script": "\tbedsPerRow \u003d len(matrix[0]) \t#5\n\trequiredSegments \u003d 7  \t\t\t#7\n\tapproxRowQty \u003d int(len(matrix) / float(requiredSegments))\n\n\t\n\tfacilitiesIndex, roomsIndex \u003d [], []\n\ti \u003d 0\n\tfor item in matrix:\n\t\tif item[0]:\n\t\t\t_auxF \u003d item[0].get(\u0027facilityId\u0027, False)\n\t\t\tif _auxF:\n\t\t\t\tfacilitiesIndex.append(i)\n\t\t\telse:\n\t\t\t\t_auxR \u003d item[0].get(\u0027roomId\u0027, False)\n\t\t\t\tif _auxR:\n\t\t\t\t\troomsIndex.append(i)\n\t\t\t\n\t\ti +\u003d 1\n\n\t\t\n\tmatrixWide \u003d [[]]\n\tsegment \u003d 0\n\tokToAddSegment \u003d True\n\ti \u003d 0\n\tfor _m in matrix:\n\t\n\t\tif (i in facilitiesIndex) or ((i in roomsIndex) and (i-1 not in facilitiesIndex)):\t\n\t\t\tif (len(matrixWide[segment]) \u003e\u003d approxRowQty) and (segment \u003c requiredSegments - 1):\n\t\t\t\tsegment +\u003d 1\n\t\t\t\tmatrixWide.append([])\n\t\t\t\n\t\tmatrixWide[segment].append(_m)\n\t\ti +\u003d 1\n\t\t\t\n\tsegmentLen \u003d [len(x) for x in matrixWide]\n\tmaxLen \u003d max(segmentLen)\n\t\n\temptyRow \u003d bedsPerRow*[None]\n\tfor i in range(len(matrixWide)):\n\t\t# Add empty rows to every segment of matrixWide if missing, to have same item numbers per segment (maxLen)\n\t\tfor _missing in range(maxLen - segmentLen[i]):\n\t\t\tmatrixWide[i].append(emptyRow)\n\t\n\treturn matrixWide\n\t\n\t\n\t#matrixWide \u003d \"[ \n\t#\t\t\t\t[[*,*,*,*,*], [*,*,*,*,*], [*,*,*,*,*], [*,*,*,*,*], [*,*,*,*,*]],\n\t#\t\t\t\t[[*,*,*,*,*], [*,*,*,*,*], [*,*,*,*,*], [*,*,*,*,*], [*,*,*,*,*]],\n\t#\t\t\t\t[[*,*,*,*,*], [*,*,*,*,*], [*,*,*,*,*], [*,*,*,*,*], [*,*,*,*,*]],\n\t#\t\t\t\t\t...\n\t#\t\t\t\t[[*,*,*,*,*], [*,*,*,*,*], [*,*,*,*,*], [*,*,*,*,*], [*,*,*,*,*]],\n\t# ] \n\t\n\t#ystem.perspective.print((\u00275matrixWide:\u0027,matrixWide[-2]))\n\t\n\tExampleMatrix \u003d \"\"\"\n[\n\t...\n\t\n    [{\"roomId\": 76, \"roomName\": u\"Room 9\"}, None, None, None, None],\n\t[\n\t    {\"bedState\": 0, \"bedId\": 189, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t    None,\n\t    None,\n\t    None,\n\t    None,\n\t],\n\t[{\"facilityId\": 14, \"facilityName\": u\"Welcome Dorm\"}, None, None, None, None],\n\t[{\"roomId\": 80, \"roomName\": u\"Welcome Dorm\"}, None, None, None, None],\n\t[\n\t    {\"bedState\": 0, \"bedId\": 193, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t    {\"bedState\": 0, \"bedId\": 194, \"bedName\": u\"Bed 2\", \"bedNameNo\": 2},\n\t    {\"bedState\": 0, \"bedId\": 197, \"bedName\": u\"Bed 3\", \"bedNameNo\": 3},\n\t    {\"bedState\": 0, \"bedId\": 196, \"bedName\": u\"Bed 4\", \"bedNameNo\": 4},\n\t    {\"bedState\": 0, \"bedId\": 195, \"bedName\": u\"Bed 5\", \"bedNameNo\": 5},\n\t],\n\t[\n\t    {\"bedState\": 0, \"bedId\": 200, \"bedName\": u\"Bed 6\", \"bedNameNo\": 6},\n\t    {\"bedState\": 0, \"bedId\": 198, \"bedName\": u\"Bed 7\", \"bedNameNo\": 7},\n\t    {\"bedState\": 0, \"bedId\": 199, \"bedName\": u\"Bed 8\", \"bedNameNo\": 8},\n\t    {\"bedState\": 0, \"bedId\": 201, \"bedName\": u\"Bed 9\", \"bedNameNo\": 9},\n\t    {\"bedState\": 0, \"bedId\": 202, \"bedName\": u\"Bed 10\", \"bedNameNo\": 10},\n\t],\n\t[\n\t    {\"facilityId\": 15, \"facilityName\": u\"Women\u0027s Welcome Dorm\"},\n\t    None,\n\t    None,\n\t    None,\n\t    None,\n\t],\n\t[{\"roomId\": 81, \"roomName\": u\"Women\u0027s Welcome Dorm\"}, None, None, None, None],\n\t[\n\t    {\"bedState\": 0, \"bedId\": 203, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t    {\"bedState\": 0, \"bedId\": 204, \"bedName\": u\"Bed 2\", \"bedNameNo\": 2},\n\t    {\"bedState\": 0, \"bedId\": 205, \"bedName\": u\"Bed 3\", \"bedNameNo\": 3},\n\t    {\"bedState\": 0, \"bedId\": 206, \"bedName\": u\"Bed 4\", \"bedNameNo\": 4},\n\t    None,\n\t],\n]\n\"\"\"\n\n\n\n\tExampleMatrixWide \u003d \"\"\"\n[\n...\n\t[\n\t...\n\t\t[None, None, None, None, None],\n\t\t[None, None, None, None, None],\n\t\t[None, None, None, None, None],\n\t\t[None, None, None, None, None],\n\t\t],\n    [\n\t\t[{\"roomId\": 79, \"roomName\": u\"Room 15\"}, None, None, None, None],\n\t\t[\n\t\t\t{\"bedState\": 0, \"bedId\": 192, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t],\n\t\t[{\"roomId\": 67, \"roomName\": u\"Room 2\"}, None, None, None, None],\n\t\t[\n\t\t\t{\"bedState\": 0, \"bedId\": 180, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t],\n\t\t[{\"roomId\": 66, \"roomName\": u\"Room 3\"}, None, None, None, None],\n\t\t[\n\t\t\t{\"bedState\": 0, \"bedId\": 179, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t],\n\t\t[{\"roomId\": 73, \"roomName\": u\"Room 4\"}, None, None, None, None],\n\t\t[\n\t\t\t{\"bedState\": 0, \"bedId\": 186, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t],\n\t\t[{\"roomId\": 72, \"roomName\": u\"Room 6\"}, None, None, None, None],\n\t\t[\n\t\t\t{\"bedState\": 0, \"bedId\": 185, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t],\n\t\t[{\"roomId\": 75, \"roomName\": u\"Room 7\"}, None, None, None, None],\n\t\t[\n\t\t\t{\"bedState\": 0, \"bedId\": 188, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t],\n\t\t[{\"roomId\": 68, \"roomName\": u\"Room 8\"}, None, None, None, None],\n\t\t[\n\t\t\t{\"bedState\": 0, \"bedId\": 181, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t],\n\t\t[{\"roomId\": 76, \"roomName\": u\"Room 9\"}, None, None, None, None],\n\t\t[\n\t\t\t{\"bedState\": 0, \"bedId\": 189, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t],\n\t\t[{\"facilityId\": 14, \"facilityName\": u\"Welcome Dorm\"}, None, None, None, None],\n\t\t[{\"roomId\": 80, \"roomName\": u\"Welcome Dorm\"}, None, None, None, None],\n\t\t[\n\t\t\t{\"bedState\": 0, \"bedId\": 193, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t\t\t{\"bedState\": 0, \"bedId\": 194, \"bedName\": u\"Bed 2\", \"bedNameNo\": 2},\n\t\t\t{\"bedState\": 0, \"bedId\": 197, \"bedName\": u\"Bed 3\", \"bedNameNo\": 3},\n\t\t\t{\"bedState\": 0, \"bedId\": 196, \"bedName\": u\"Bed 4\", \"bedNameNo\": 4},\n\t\t\t{\"bedState\": 0, \"bedId\": 195, \"bedName\": u\"Bed 5\", \"bedNameNo\": 5},\n\t\t],\n\t\t[\n\t\t\t{\"bedState\": 0, \"bedId\": 200, \"bedName\": u\"Bed 6\", \"bedNameNo\": 6},\n\t\t\t{\"bedState\": 0, \"bedId\": 198, \"bedName\": u\"Bed 7\", \"bedNameNo\": 7},\n\t\t\t{\"bedState\": 0, \"bedId\": 199, \"bedName\": u\"Bed 8\", \"bedNameNo\": 8},\n\t\t\t{\"bedState\": 0, \"bedId\": 201, \"bedName\": u\"Bed 9\", \"bedNameNo\": 9},\n\t\t\t{\"bedState\": 0, \"bedId\": 202, \"bedName\": u\"Bed 10\", \"bedNameNo\": 10},\n\t\t],\n\t\t[\n\t\t\t{\"facilityId\": 15, \"facilityName\": u\"Women\u0027s Welcome Dorm\"},\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t\tNone,\n\t\t],\n\t\t[{\"roomId\": 81, \"roomName\": u\"Women\u0027s Welcome Dorm\"}, None, None, None, None],\n\t\t[\n\t\t\t{\"bedState\": 0, \"bedId\": 203, \"bedName\": u\"Bed 1\", \"bedNameNo\": 1},\n\t\t\t{\"bedState\": 0, \"bedId\": 204, \"bedName\": u\"Bed 2\", \"bedNameNo\": 2},\n\t\t\t{\"bedState\": 0, \"bedId\": 205, \"bedName\": u\"Bed 3\", \"bedNameNo\": 3},\n\t\t\t{\"bedState\": 0, \"bedId\": 206, \"bedName\": u\"Bed 4\", \"bedNameNo\": 4},\n\t\t\tNone,\n\t\t],\n\t\t[None, None, None, None, None],\n\t\t[None, None, None, None, None],\n\t\t[None, None, None, None, None],\n\t\t[None, None, None, None, None],\n\t],\n]\n\t\"\"\"\t\n"
        },
        {
          "name": "getRoomSquared",
          "params": [
            "listOfDict",
            "colQty"
          ],
          "script": "\tlistOut \u003d []\n\n\tfor j in range(colQty,len(listOfDict) + colQty, colQty):\n\t\toneRow \u003d listOfDict[j-colQty:j]\n\t\t\n\t\t# Add missing item. Fill to reach colQty number of items\n\t\tif len(oneRow) \u003c colQty:\n\t\t\toneRow +\u003d (colQty - len(oneRow))*[None]\n\t\t#yield oneRow\n\t\tlistOut.append(oneRow)\n\treturn listOut\n\t\n\t_ExampleListOfDict \u003d \"\"\"[{\"a\":1}, {\"a\":1},{\"a\":1},{\"b\":1}, {\"b\":1},{\"b\":1},{\"b\":1}]\"\"\"\n\t\n\t_ExampleReturnIfColQtyIs2 \u003d \"\"\"\n\t[\n\t[{\u0027a\u0027: 1}, {\u0027a\u0027: 1}]\n\t[{\u0027a\u0027: 1}, {\u0027b\u0027: 1}]\n\t[{\u0027b\u0027: 1}, {\u0027b\u0027: 1}]\n\t[{\u0027b\u0027: 1}, None]\n\t]\t\n\t\"\"\""
        },
        {
          "name": "getBedListDb",
          "params": [
            "dateIn"
          ],
          "script": "\t\t\n\tqueryCoreBed \u003d \"\"\"\n\tDECLARE @OneDay date \u003d ?  \n\t\t\n\t;WITH frb As (\n\tSELECT [Facility].[id] AS facilityId, [Room].[id] AS roomId, [Bed].[id] AS bedId\n\t\t,[Facility].[facilityName], [Room].[roomName], [Bed].[bedName]\n\t\t,ISNULL(TRY_CONVERT(int, SUBSTRING([bedName], PATINDEX(\u0027%[0-9]%\u0027, [bedName]), LEN([bedName]))),-1) bedNameNo \n\tFROM [HMSOps].[lodging].[Bed]\n\t\tINNER JOIN [HMSOps].[lodging].[Room] ON [Bed].[roomId] \u003d [Room].[id]\n\t\tINNER JOIN [HMSOps].[lodging].[Facility] ON [Room].[facilityId] \u003d [Facility].[id]\n\tWHERE ([Facility].[timeRetired] is NULL \n\t\tAND [Room].[timeRetired] is NULL\n\t\tAND [Bed].[timeRetired] is NULL) \n\t)\n\t\n\t, r AS (\n\tSELECT DISTINCT [bedId]\n\tFROM [HMSOps].[lodging].[Reservation]  \n\tWHERE ([Reservation].[timeRetired] IS NULL\n\t\tAND [Reservation].[reservationStart] IS NOT NULL    \n\t\tAND CAST([Reservation].[reservationStart] AS date) \u003c\u003d @OneDay\n\t\tAND CAST(ISNULL([Reservation].[reservationEnd],@OneDay) AS date) \u003e\u003d @OneDay)\n\t)\n\t\n\t, o AS (\n\tSELECT DISTINCT [bedId] \n\tFROM [HMSOps].[lodging].[BedLog]  \n\tWHERE ([eventStart] IS NOT NULL    \n\t\tAND CAST([eventStart] AS date) \u003c\u003d @OneDay\n\t\tAND CAST(ISNULL([eventEnd],@OneDay) AS date) \u003e\u003d @OneDay)\n\t)\n\t\n\tSELECT \n\tfrb.facilityId\n\t,frb.roomId\n\t,frb.bedId\n\t,frb.[facilityName]\n\t,frb.[roomName]\n\t,frb.[bedName]\n\t,frb.[bedNameNo] \n\t,CASE WHEN o.bedId IS NOT NULL THEN 2 ELSE (CASE WHEN r.bedId IS NOT NULL THEN 1 ELSE 0 END) END AS [bedState]\n\tFROM frb \n\tLEFT JOIN r ON r.bedId \u003d frb.bedId\n\tLEFT JOIN o ON o.bedId \u003d frb.bedId\n\t\n\tORDER BY facilityName,facilityId, roomName, roomId, bedNameNo\n\t\"\"\"\n\t#ORDER BY facilityName, roomName, bedNameNo\n\t\n\tresultBed \u003d system.db.runPrepQuery(queryCoreBed,[dateIn],\u0027HMSOps\u0027) \t\n\n\tif resultBed.rowCount \u003d\u003d 0:\n\t\tbedList \u003d []\t\n\telse:\n\t\tbedList \u003d [dict(facilityId\u003dx[\u0027facilityId\u0027], roomId\u003dx[\u0027roomID\u0027], bedId\u003dx[\u0027bedId\u0027],facilityName\u003dx[\u0027facilityName\u0027], roomName \u003dx[\u0027roomName\u0027], bedNameNo \u003d x[\u0027bedNameNo\u0027],bedName \u003d x[\u0027bedName\u0027],bedState\u003dx[\u0027bedState\u0027]) for x in system.dataset.toPyDataSet(resultBed)]\n\n\treturn bedList\n\t\n\tExample_bedList \u003d \"\"\"\n[\n\t{\n\t\t\"facilityId\": 1,\n\t\t\"bedState\": 2,\n\t\t\"bedId\": 8,\n\t\t\"roomId\": 4,\n\t\t\"roomName\": u\"Apartment 300\",\n\t\t\"bedName\": u\"Bed 1\",\n\t\t\"bedNameNo\": 1,\n\t\t\"facilityName\": u\"Apartments\",\n\t},\n\t{\n\t\t\"facilityId\": 1,\n\t\t\"bedState\": 0,\n\t\t\"bedId\": 9,\n\t\t\"roomId\": 5,\n\t\t\"roomName\": u\"Apartment 301\",\n\t\t\"bedName\": u\"Bed 1\",\n\t\t\"bedNameNo\": 1,\n\t\t\"facilityName\": u\"Apartments\",\n\t},\n\t{\n\t\t\"facilityId\": 1,\n\t\t\"bedState\": 2,\n\t\t\"bedId\": 11,\n\t\t\"roomId\": 7,\n\t\t\"roomName\": u\"Apartment 302\",\n\t\t\"bedName\": u\"Bed 1\",\n\t\t\"bedNameNo\": 1,\n\t\t\"facilityName\": u\"Apartments\",\n\t},\n...\t\n]\n\t\"\"\""
        },
        {
          "name": "getDataPropsInit",
          "params": [
            "matrixWide"
          ],
          "script": "\t\n\tbedsPerRow \u003d len(matrixWide[0][0])\n\t\n\tsegmentCount \u003d len(matrixWide)\n\trowCount \u003d len(matrixWide[0])\n\tcolNames \u003d [\u0027x{}\u0027.format(i) for i in range(segmentCount)]\n\n\tdata0 \u003d []\n\ti \u003d 0\n\tfor rowIndex in range(rowCount):\n\t\tauxDict0 \u003d {}\n\t\tfor segIndex in range(segmentCount):\n\t\t\tauxDict0[colNames[segIndex]] \u003d {\u0027args\u0027: bedsPerRow*[None], \u0027value\u0027 :False} \n\t\t\ti+\u003d1\n\n\t\tdata0.append(auxDict0)\n\treturn data0"
        },
        {
          "name": "XgetDataPropsInit",
          "params": [
            "matrixWide"
          ],
          "script": "\t\n\tbedsPerRow \u003d len(matrixWide[0][0])\n\t\n\tsegmentCount \u003d len(matrixWide)\n\trowCount \u003d len(matrixWide[0])\n\tcolNames \u003d [\u0027x{}\u0027.format(i) for i in range(segmentCount)]\n\n\tdata0 \u003d []\n\ti \u003d 0\n\tfor rowIndex in range(rowCount):\n\t\tauxDict0 \u003d {}\n\t\tfor segIndex in range(segmentCount):\n\t\t\tauxDict0[colNames[segIndex]] \u003d {\u0027args\u0027: bedsPerRow*[None], \u0027value\u0027 :False} # {\u0027args\u0027:bedsPerRow*[None]}\n\t\t\ti+\u003d1\n\n\t\tdata0.append(auxDict0)\n\treturn data0"
        },
        {
          "name": "getDataProps",
          "params": [
            "matrixWide"
          ],
          "script": "\t\n\tcontrolData \u003d self.getChild(\"Table\").props.data\n\t\n\tsegmentCount \u003d len(matrixWide)\n\trowCount \u003d len(matrixWide[0])\n\tcolNames \u003d [\u0027x{}\u0027.format(i) for i in range(segmentCount)]\n\t#ystem.perspective.print((\"colNames\",colNames, rowCount ))\n\tdata \u003d []\n\ti \u003d 0\n\tfor rowIndex in range(rowCount):\n\t\tauxDict \u003d {}\n\t\tfor segIndex in range(segmentCount):\n\t\t\ttoggleVal \u003d True\n\t\t\tcol \u003d colNames[segIndex]\n\t\t\ttry:\n\t\t\t\ttoggleVal \u003d False if  controlData[rowIndex][col][\u0027value\u0027] \u003d\u003d True else True\n\t\t\texcept:\n\t\t\t\ttoggleVal \u003d False\n\n\t\t\tauxDict[col] \u003d{\u0027args\u0027:matrixWide[segIndex][rowIndex], \u0027value\u0027:toggleVal}\n\t\t\ti+\u003d1\n\n\t\tdata.append(auxDict)\n\n\treturn data"
        },
        {
          "name": "XgetDataProps",
          "params": [
            "matrixWide"
          ],
          "script": "\t\n\tcontrolData \u003d self.getChild(\"Table\").props.data\n\t\n\tsegmentCount \u003d len(matrixWide)\n\trowCount \u003d len(matrixWide[0])\n\tcolNames \u003d [\u0027x{}\u0027.format(i) for i in range(segmentCount)]\n\t#ystem.perspective.print((\"colNames\",colNames, rowCount ))\n\tdata \u003d []\n\ti \u003d 0\n\tfor rowIndex in range(rowCount):\n\t\tauxDict \u003d {}\n\t\tfor segIndex in range(segmentCount):\n\t\t\ttoggleVal \u003d True\n\t\t\tcol \u003d colNames[segIndex]\n\t\t\ttry:\n\t\t\t\ttoggleVal \u003d False if  controlData[rowIndex][col][\u0027value\u0027] \u003d\u003d True else True\n\t\t\texcept:\n\t\t\t\ttoggleVal \u003d False\n\t\t\t#auxDict[colNames[segIndex]] \u003d{\u0027args\u0027:matrixWide[segIndex][rowIndex], \u0027value\u0027:\u0027\u0027}\n\t\t\tauxDict[col] \u003d{\u0027args\u0027:matrixWide[segIndex][rowIndex], \u0027value\u0027:toggleVal}\n\t\t\ti+\u003d1\n\n\t\tdata.append(auxDict)\n\n\treturn data"
        },
        {
          "name": "correctRooms",
          "params": [
            "bedList",
            "correctionList"
          ],
          "script": "\t\n\tdef getFirstDigit(sometext):\n\t\tif not(sometext) or not(isinstance(sometext,basestring)):\n\t\t\treturn -1\n\t\t\n\t\td \u003d -1\t\n\t\tfor s in unicode.split(sometext):\n\t\t\tif s.isdigit():\n\t\t\t\td \u003d int(s)\n\t\t\t\tbreak\n\t\treturn d\n\t\n\tfor item in bedList:\n\t\tfacilityName \u003d item.get(\u0027facilityName\u0027)\n\t\t\n\t\tif facilityName and facilityName in correctionList:\n\t\t\t# Following assignment order is important\n\t\t\titem[\u0027bedName\u0027] \u003d item[\u0027roomName\u0027]\n\t\t\titem[\u0027bedNameNo\u0027] \u003d getFirstDigit(item[\u0027bedName\u0027])\n\t\t\titem[\u0027roomName\u0027] \u003d item[\u0027facilityName\u0027]\n\t\t\titem[\u0027roomId\u0027] \u003d 0\n\t\t\t\n\treturn bedList\n\n\"\"\"\nExamples: \n# Correcrion means show rooms as beds. Usualy for shelters where rooms are with one bed.\ncorrectionList \u003d [\u0027Apartments\u0027,\u0027Vine Hill\u0027]\n\n\nbedList \u003d \n[\n\t    {\n\t        \"facilityId\": 1,\n\t        \"bedState\": 2,\n\t        \"bedId\": 8,\n\t        \"roomId\": 4,\n\t        \"roomName\": u\"Apartment 300\",\n\t        \"bedName\": u\"Bed 1\",\n\t        \"bedNameNo\": 1,\n\t        \"facilityName\": u\"Apartments\",\n\t    },\n\t    {\n\t        \"facilityId\": 1,\n\t        \"bedState\": 0,\n\t        \"bedId\": 9,\n\t        \"roomId\": 5,\n\t        \"roomName\": u\"Apartment 301\",\n\t        \"bedName\": u\"Bed 1\",\n\t        \"bedNameNo\": 1,\n\t        \"facilityName\": u\"Apartments\",\n\t    },\n\t    {\n\t        \"facilityId\": 1,\n\t        \"bedState\": 2,\n\t        \"bedId\": 11,\n\t        \"roomId\": 7,\n\t        \"roomName\": u\"Apartment 302\",\n\t        \"bedName\": u\"Bed 1\",\n\t        \"bedNameNo\": 1,\n\t        \"facilityName\": u\"NotApartments\",\n\t    },\n]\n\nreturned bedList \u003d  \n[\n    {\n        \"facilityId\": 1,\n        \"bedState\": 2,\n        \"bedId\": 8,\n        \"roomId\": 0,\n        \"roomName\": u\"Apartments\",\n        \"bedName\": u\"Apartment 300\",\n        \"bedNameNo\": 300,\n        \"facilityName\": u\"Apartments\",\n    },\n    {\n        \"facilityId\": 1,\n        \"bedState\": 0,\n        \"bedId\": 9,\n        \"roomId\": 0,\n        \"roomName\": u\"Apartments\",\n        \"bedName\": u\"Apartment 301\",\n        \"bedNameNo\": 301,\n        \"facilityName\": u\"Apartments\",\n    },\n    {\n        \"facilityId\": 1,\n        \"bedState\": 2,\n        \"bedId\": 11,\n        \"roomId\": 7,\n        \"roomName\": u\"Apartment 302\",\n        \"bedName\": u\"Bed 1\",\n        \"bedNameNo\": 1,\n        \"facilityName\": u\"NotApartments\",\n    },\n]\n\n\n\"\"\""
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "mhSetAvailabilityData",
          "pageScope": true,
          "script": "\tdateIn \u003d payload[\u0027dateIn\u0027]\n\tself.setTableData(dateIn)",
          "sessionScope": false,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}