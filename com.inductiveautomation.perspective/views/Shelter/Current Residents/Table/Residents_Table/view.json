{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\ttry:\n#\t\tself.session.custom.dateRangeFromDate \u003d system.date.format(system.date.now(), \"MM/dd/yyyy\")\n#\t\tself.session.custom.dateRangeToDate \u003d system.date.format(system.date.now(), \"MM/dd/yyyy\")\n#\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshReservations\", payload\u003d{}, scope\u003d\"session\")\n\t\tself.session.custom.dateRangeFromDate \u003d system.date.format(system.date.now(), \"MM/dd/yyyy\")\n\t\tself.session.custom.dateRangeToDate \u003d system.date.format(system.date.now(), \"MM/dd/yyyy\")\n\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshReservations\", payload\u003d{}, scope\u003d\"session\")\n\t\tsystem.perspective.sendMessage(messageType\u003d\"currentResidentSelected\", payload\u003d{\"residentId\":-1}, scope\u003d\"session\")\n\texcept:\n\t\timport traceback\n\t\tlogger \u003d system.util.getLogger(\"{}\".format(\u0027Residents_Table onStartUp\u0027))\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)\t\n\n"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "facilityID": 1,
    "fetch": null,
    "resultRowCount": 34
  },
  "propConfig": {
    "params.facilityID": {
      "onChange": {
        "enabled": null,
        "script": "\tself.session.custom.dateRangeFromDate \u003d system.date.format(system.date.now(), \"MM/dd/yyyy\") # hh:mm:ss\")\n\tself.session.custom.dateRangeToDate \u003d system.date.format(system.date.now(), \"MM/dd/yyyy\") # hh:mm:ss\")\n\tsystem.perspective.sendMessage(messageType\u003d\"refreshReservations\", payload\u003d{}, scope\u003d\"session\")"
      },
      "paramDirection": "input",
      "persistent": true
    },
    "params.fetch": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.resultRowCount": {
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 620,
      "width": 875
    }
  },
  "root": {
    "children": [
      {
        "custom": {
          "_devPulse": false,
          "_devTxt": "",
          "_isDev": false,
          "jsonLastPayload": null,
          "lastPayload": {
            "dateRangeFrom": "08/15/2022",
            "dateRangeTo": "08/25/2022",
            "gender": null,
            "maxAge": null,
            "minAge": null,
            "race": null,
            "searchText": ""
          },
          "test": {
            "$": [
              "ds",
              192,
              1661124133432
            ],
            "$columns": [
              {
                "data": [],
                "name": "bedLogId",
                "type": "Integer"
              },
              {
                "data": [],
                "name": "name",
                "type": "String"
              },
              {
                "data": [],
                "name": "eventStart",
                "type": "Date"
              },
              {
                "data": [],
                "name": "eventEnd",
                "type": "Date"
              },
              {
                "data": [],
                "name": "ExitDestination",
                "type": "String"
              },
              {
                "data": [],
                "name": "exitDestinationId",
                "type": "Integer"
              },
              {
                "data": [],
                "name": "gender",
                "type": "String"
              },
              {
                "data": [],
                "name": "race",
                "type": "String"
              },
              {
                "data": [],
                "name": "age",
                "type": "Integer"
              },
              {
                "data": [],
                "name": "roomName",
                "type": "String"
              },
              {
                "data": [],
                "name": "bedName",
                "type": "String"
              },
              {
                "data": [],
                "name": "participantId",
                "type": "Integer"
              },
              {
                "data": [],
                "name": "roomId",
                "type": "Integer"
              },
              {
                "data": [],
                "name": "bedId",
                "type": "Integer"
              },
              {
                "data": [],
                "name": "isActive",
                "type": "Integer"
              }
            ]
          }
        },
        "events": {
          "component": {
            "onRowClick": {
              "config": {
                "script": "\t\n\tcheckInId \u003d event.value[\u0027bedLogId\u0027]\n\tbedId \u003d event.value[\"bedId\"]\n\tparticipantId \u003d event.value[\"participantId\"]\n\tisActive \u003d event.value[\"isActive\"]\n\troomId \u003d event.value[\"roomId\"]\n\tcheckInDate \u003d self.props.selection.data[0][\u0027eventStart\u0027]\n\tcheckInDate \u003d system.date.fromMillis(checkInDate)\n#\tcheckInDate \u003d system.date.parse(checkInDate[:24],\"E MMM dd yyyy HH:mm:ss\")\n\tparticipantName \u003d event.value[\"name\"]\n\troomName \u003d event.value[\"roomName\"]\n\tbedName \u003d event.value[\"bedName\"]\n\treservationId \u003d event.value[\"reservationId\"]\n\t\n\tsystem.perspective.sendMessage(\"residentselected\",payload \u003d {\u0027reservationId\u0027: reservationId, \u0027facilityId\u0027: self.view.params.facilityID,\u0027checkInId\u0027:checkInId,\u0027bedId\u0027:bedId, \u0027participantId\u0027:participantId, \u0027roomId\u0027:roomId, \u0027participantName\u0027:participantName, \u0027checkInDate\u0027:checkInDate, \u0027roomName\u0027: roomName, \u0027bedName\u0027:bedName},scope\u003d\"session\")\n\tsystem.tag.writeBlocking([\u0027[default]RITI/Validations/participant\u0027],[str({\u0027reservationId\u0027: reservationId, \u0027facilityId\u0027: self.view.params.facilityID,\u0027checkInId\u0027:checkInId,\u0027bedId\u0027:bedId, \u0027participantId\u0027:participantId, \u0027roomId\u0027:roomId, \u0027participantName\u0027:participantName, \u0027checkInDate\u0027:checkInDate, \u0027roomName\u0027: roomName, \u0027bedName\u0027:bedName})])\n\t\n\tselectedColumn \u003d self.props.selection.selectedColumn\n\t\n#\tfor item in range(len(self.props.data)):\n#\t\tif item \u003d\u003d event.row:\n#\t\t\tself.props.data[item].gender.style.classes \u003d \u0027Table/Row_Select\u0027\n#\t\t\tself.props.data[item].race.style.classes \u003d \u0027Table/Row_Select\u0027\n#\t\t\tself.props.data[item].bedId.style.classes \u003d \u0027Table/Row_Select\u0027\n#\t\t\tself.props.data[item].eventStart.style.classes \u003d \u0027Table/Row_Select\u0027\n#\t\t\tself.props.data[item].roomName.style.classes \u003d \u0027Table/Row_Select\u0027\n#\t\t\tself.props.data[item].bedName.style.classes \u003d \u0027Table/Row_Select\u0027\n#\t\t\tself.props.data[item].bedLogId.style.classes \u003d \u0027Table/Row_Select\u0027\n#\t\t\tself.props.data[item].roomId.style.classes \u003d \u0027Table/Row_Select\u0027\n#\t\t\tself.props.data[item].participantId.style.classes \u003d \u0027Table/Row_Select\u0027\n#\t\t\tself.props.data[item].eventEnd.style.classes \u003d \u0027Table/Row_Select\u0027\n#\t\t\tself.props.data[item].name.style.classes \u003d \u0027Table/Row_Select\u0027\n#\t\t\tself.props.data[item].age.style.classes \u003d \u0027Table/Row_Select\u0027\n#\n#\t\telse:\n#\t\t\tself.props.data[item].gender.style.classes \u003d \u0027Table/Column_Normal\u0027\n#\t\t\tself.props.data[item].race.style.classes \u003d \u0027Table/Column_Normal\u0027\n#\t\t\tself.props.data[item].bedId.style.classes \u003d \u0027Table/Column_Normal\u0027\n#\t\t\tself.props.data[item].eventStart.style.classes \u003d \u0027Table/Column_Normal\u0027\n#\t\t\tself.props.data[item].roomName.style.classes \u003d \u0027Table/Column_Normal\u0027\n#\t\t\tself.props.data[item].bedName.style.classes \u003d \u0027Table/Column_Normal\u0027\n#\t\t\tself.props.data[item].bedLogId.style.classes \u003d \u0027Table/Column_Normallect\u0027\n#\t\t\tself.props.data[item].roomId.style.classes \u003d \u0027Table/Column_Normal\u0027\n#\t\t\tself.props.data[item].participantId.style.classes \u003d \u0027Table/Column_Normal\u0027\n#\t\t\tself.props.data[item].eventEnd.style.classes \u003d \u0027Table/Column_Normal\u0027\n#\t\t\tself.props.data[item].name.style.classes \u003d \u0027Table/Column_Normal\u0027\n#\t\t\tself.props.data[item].age.style.classes \u003d \u0027Table/Column_Normal\u0027\n\n\tif selectedColumn \u003d\u003d \"bedLogId\":\n\t\tparticipantID \u003d self.props.selection.data[0][\u0027participantId\u0027]\n\t\tisActive \u003d self.props.selection.data[0][\u0027isActive\u0027]\n\t\tid \u003d \"PreviewParticipant\" \n\t\tparams \u003d {\"participantID\":participantID, \u0027isActive\u0027:isActive}\n\t\tsystem.perspective.openDock(id\u003did,params\u003dparams)\n\t\t\n\telse:\n\t\tpass\n"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Table"
        },
        "position": {
          "basis": "100%",
          "grow": 1,
          "shrink": 0
        },
        "propConfig": {
          "custom._devPulse": {
            "onChange": {
              "enabled": null,
              "script": "\tif self.custom._isDev:\n\t\tif currentValue.value is True:\n\t\t\tpayload \u003d {}\n\t\t\t\n#\t\t\tpayload[\u0027countReferralFromTo\u0027] \u003d [1,5]\n#\t\t\tpayload[\u0027providerTypeId\u0027] \u003d [0,2]\n\t\t\t\n\t\t\tpayload[\u0027gender\u0027] \u003d None\n\t\t\tpayload[\u0027race\u0027] \u003d None\n\t\t\tpayload[\u0027minAge\u0027] \u003d None\n\t\t\tpayload[\u0027maxAge\u0027] \u003d None\n\t\t\tpayload[\u0027dateRangeFrom\u0027] \u003d \u002708/15/2022\u0027 \n\t\t\tpayload[\u0027dateRangeTo\u0027] \u003d \u002708/25/2022\u0027\n\t\t\tpayload[\u0027searchText\u0027] \u003d self.custom._devTxt\n\t\t\t#payload[\u0027fetch\u0027] \u003d 12\n\t\t\t\n\t\t\tsystem.perspective.sendMessage(\u0027mhByCondition\u0027, payload \u003d payload)\n\t\t\tself.custom.jsonLastPayload \u003d system.util.jsonEncode(payload)\n\n\t\telse:\n\t\t\t#payload \u003d {}\n\t\t\t#payload[\u0027providerTypeId\u0027] \u003d [-1]\n\t\t\t#payload[\u0027searchText\u0027] \u003d self.custom._devTxt\n\t\t\t#payload[\u0027fetch\u0027] \u003d 12\n\t\t\t\n\t\t\t#system.perspective.sendMessage(\u0027mhByCondition\u0027, payload \u003d payload)\n\t\t\t#self.custom.jsonLastPayload \u003d system.util.jsonEncode(payload)\n\n\t\t\t#self.props.data \u003d [{key: \u0027\u0027 if key \u003d\u003d \u0027providerName\u0027 else None for key in self.props.data[0]}]\n\t\t\tself.props.data \u003d [{key: None for key in self.props.data[0]}]\n\t\t\tself.custom.jsonLastPayload \u003d None\n\n\n"
            }
          },
          "props.filter.text": {
            "access": "PUBLIC"
          }
        },
        "props": {
          "cells": {
            "style": {
              "classes": "Table/Cell_Dashboard"
            }
          },
          "columns": [
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "bedLogId",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": " "
              },
              "justify": "center",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "view",
              "resizable": false,
              "sort": "none",
              "sortable": false,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "1_TEMPLATES/Tables/TableOptions",
              "visible": true,
              "width": 30
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "isActive",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": " "
              },
              "justify": "center",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "view",
              "resizable": false,
              "sort": "none",
              "sortable": false,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "1_TEMPLATES/Tables/TableActive",
              "visible": true,
              "width": 30
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "name",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Participant"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 150
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "eventStart",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Check-in"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 120
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "eventEnd",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Check-Out"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 120
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "ExitDestination",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Exit Destination"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 300
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "exitDestinationId",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "gender",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Gender"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 120
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "race",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Race"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": 130
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "age",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Age"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 100
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "roomName",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Room"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 150
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "bedName",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Bed"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 100
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "participantId",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "roomId",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "bedId",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "reservationId",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "SSN",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "40"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            }
          ],
          "data": [
            {
              "": null,
              "-1": null,
              "1": null,
              "10": null,
              "13": null,
              "14802": null,
              "2010-08-06 17:20:31.55": null,
              "498": null,
              "4th Floor": null,
              "6": null,
              "6331": null,
              "71": null,
              "Apartment 400": null,
              "John Edward Brazelton": null,
              "Male": null,
              "None": null,
              "White": null
            }
          ],
          "pager": {
            "initialOption": 100
          },
          "rows": {
            "highlight": {
              "color": "#ccffff"
            },
            "striped": {
              "enabled": false
            }
          },
          "selection": {
            "selectedRow": -1,
            "style": {
              "backgroundColor": "#9af4eb4d"
            }
          },
          "style": {
            "classes": "Background/Default",
            "overflowX": "hidden"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "getDataDb",
              "params": [
                "payload"
              ],
              "script": "\timport extend.query\n\t\n\tdeclaration, queryCte, query, orderBy, fetchOffset \u003d self.getQuery()\n\n\targs \u003d []\t\n\n\t###############################################\n\t# This param must be java.util.Date or None. Not allowed empty string \u0027\u0027\n\tdateRangeFrom\u003d payload.get(\u0027dateRangeFrom\u0027)\n\tdateRangeFrom \u003d system.date.parse(dateRangeFrom,\u0027MM/dd/yyyy\u0027)\n#\tdateRangeFrom\u003d system.date.format(dateRangeFrom, \"MM/dd/yyyy\")\n\targs +\u003d [dateRangeFrom]\n\n\t################################################\n\t# This param must be java.util.Date or None. Not allowed empty string \u0027\u0027\n\tdateRangeTo\u003d payload.get(\u0027dateRangeTo\u0027)\n\tdateRangeTo \u003d system.date.parse(dateRangeTo,\u0027MM/dd/yyyy\u0027)\n#\tdateRangeTo\u003d system.date.format(dateRangeTo, \"MM/dd/yyyy\")\n#\tif dateRangeTo is None:\n#\t\tdateRangeTo \u003d system.date.now()\n\t# This string concat cannot work. Updating syntax\n#\tdateRangeTo \u003d dateRangeTo + \" 23:59:59\"\n\tdateRangeTo \u003d system.date.setTime(dateRangeTo,23,59,59)\n\targs +\u003d [dateRangeTo]\n\t\n\t###############################################\n\t# This param must be int or None. Not allowed empty string \u0027\u0027\n\tminAge\u003d payload.get(\u0027minAge\u0027)\n\targs +\u003d [minAge]\n\t\n\t###############################################\n\t# This param must be int or None. Not allowed empty string \u0027\u0027\n\tmaxAge\u003d payload.get(\u0027maxAge\u0027)\n\targs +\u003d [maxAge]\n\t\n\t###############################################\n\t# This param must be STRING or None. Not allowed empty string \u0027\u0027\n\tgender\u003d payload.get(\u0027gender\u0027)\n\targs +\u003d [gender]\n\n\t###############################################\n\t# This param must be STRING or None. Not allowed empty string \u0027\u0027\n\trace\u003d payload.get(\u0027race\u0027)\n\targs +\u003d [race]\n\t\n\t###############################################\n\tsearch_text \u003d payload.get(\u0027searchText\u0027)\n\t\n\tif search_text is None:\n\t\tsearch_text \u003d \u0027\u0027\n\t\n\targs +\u003d [search_text]\n\t\n\t###############################################\n\tfacilityID \u003d self.view.params.facilityID\n\targs +\u003d [facilityID]\n\t\n\t###############################################\n\t# This param must be int or None. Not allowed empty string \u0027\u0027 ExitDestination\n\texitDestinationId\u003d payload.get(\u0027ExitDestination\u0027)\n\targs +\u003d [exitDestinationId]\n\t\t\n\t###############################################\n\toffset \u003d payload.get(\u0027offset\u0027)\n\tfetch \u003d payload.get(\u0027fetch\u0027)\n\tif offset is not None and fetch is not None:\n\t\t#counterQuery \u003d \u0027{}; WITH cte AS ({}) SELECT COUNT(1) cnt FROM cte\u0027.format(declaration, query)\n\t\t# declaration, queryCte, query, orderBy, fetchOffset\n\t\tcounterQuery \u003d \u0027{} {} ,cte AS ({}) SELECT COUNT(1) cnt FROM cte\u0027.format(declaration, queryCte, query)\n\t\tresultRowCount \u003d system.db.runScalarPrepQuery(counterQuery, args, \u0027HMSOps\u0027)\n\t\targs +\u003d [offset]\n\t\targs +\u003d [fetch]\t\n\t\n\t\tquery \u003d \u0027{} {} {} {} {}\u0027.format(declaration, queryCte, query, orderBy, fetchOffset)\n#\t\tsystem.perspective.print(query)\n\t\tresult \u003d system.db.runPrepQuery(query, args, \u0027HMSOps\u0027)\n\t\n\telse:\n\t\tquery \u003d \u0027{} {} {} {}\u0027.format(declaration, queryCte, query, orderBy)\n#\t\tsystem.perspective.print(query)\n\t\tresult \u003d system.db.runPrepQuery(query, args, \u0027HMSOps\u0027)\t\n\t\tresultRowCount \u003d result.rowCount\n\t\n\tsystem.perspective.print((\u0027Exec: args\u0027,args)) \n\n\treturn result, resultRowCount\n"
            },
            {
              "name": "getPropsColumns",
              "params": [
                "dataset"
              ],
              "script": "\tjsonDefaultColumn \u003d \"\"\"\n  {\n\t    \"field\": \"\",\n\t    \"visible\": true,\n\t    \"editable\": false,\n\t    \"render\": \"auto\",\n\t    \"justify\": \"left\",\n\t    \"align\": \"center\",\n\t    \"resizable\": true,\n\t    \"sortable\": true,\n\t    \"sort\": \"none\",\n\t    \"viewPath\": \"\",\n\t    \"viewParams\": {},\n\t    \"boolean\": \"checkbox\",\n\t    \"number\": \"value\",\n\t    \"progressBar\": {\n\t      \"max\": 100,\n\t      \"bar\": {\n\t        \"color\": \"#62A3F6\",\n\t        \"linecap\": \"round\",\n\t        \"width\": 5\n\t      },\n\t      \"track\": {\n\t        \"color\": \"#DADADA\",\n\t        \"linecap\": \"round\",\n\t        \"width\": 2\n\t      },\n\t      \"value\": {\n\t        \"color\": \"#7D7D7D\",\n\t        \"show\": true\n\t      }\n\t    },\n\t    \"toggleSwitch\": {\n\t      \"color\": {\n\t        \"selected\": \"#2196F3\",\n\t        \"unselected\": \"#FFFFFF\"\n\t      }\n\t    },\n\t    \"numberFormat\": \"0,0.##\",\n\t    \"dateFormat\": \"MM/DD/YYYY\",\n\t    \"width\": \"\",\n\t    \"strictWidth\": false,\n\t    \"header\": {\n\t      \"title\": \"\",\n\t      \"justify\": \"left\",\n\t      \"align\": \"center\",\n\t      \"style\": {\n\t        \"classes\": \"Table/Column_Header\"\n\t      }\n\t    },\n\t    \"footer\": {\n\t      \"title\": \"\",\n\t      \"justify\": \"left\",\n\t      \"align\": \"center\",\n\t      \"style\": {\n\t        \"classes\": \"\"\n\t      }\n\t    },\n\t    \"style\": {\n\t      \"classes\": \"Table/Column_Normal\"\n\t    }\n\t  },\t\n\t\"\"\"\n\n\tcolumnsForced \u003d [\n\t  \n\t  {\n\t    \"field\": \"bedLogId\",\n\t    \"width\": 30,\n\t    \"title\": \"\"\n\t  },\n  \t  {\n  \t\t\"field\": \"isActive\",\n  \t\t\"width\": 30,\n  \t\t\"title\": \"\"\n  \t  },\n\t  {\n\t    \"field\": \"name\",\n\t    \"width\": 150,\n\t    \"title\": \"Participant\"\n\t  },\n\t  {\n\t    \"field\": \"eventStart\",\n\t    \"width\": 120,\n\t    \"title\": \"Check-in\"\n\t  },\t  \n\t  {\n\t    \"field\": \"eventEnd\",\n\t    \"width\": 120,\n\t    \"title\": \"Check-Out\"\n\t  },\n\t  {\n\t    \"field\": \"ExitDestination\",\n\t    \"width\": 300,\n\t    \"title\": \"Exit Destination\"\n  \t  },\n\t  {\n\t    \"field\": \"gender\",\n\t    \"width\": 120,\n\t    \"title\": \"Gender\"\n\t  },\n\t  {\n\t    \"field\": \"race\",\n\t    \"width\": 130,\n\t    \"title\": \"Race and Ethnicity\"\n\t  },\n\t  {\n\t    \"field\": \"BirthDate\",\n\t    \"width\": 100,\n\t    \"title\": \"Birth Date\"\n\t  },\n\t  {\n\t\t\"field\": \"roomName\",\n\t\t\"width\": 150,\n\t\t\"title\": \"Room\"\n\t  },\n\t  {\n\t\t\"field\": \"roomId\",\n\t\t\"width\": \u0027\u0027,\n\t\t\"title\": \"\"\n\t  },\n\t  {\n\t\t\"field\": \"bedName\",\n\t\t\"width\": 100,\n\t\t\"title\": \"Bed\"\n\t  },\n\t  {\n\t\t\"field\": \"bedId\",\n\t\t\"width\": \u0027\u0027,\n\t\t\"title\": \"\"\n\t  },\n\t  {\n\t\t\"field\": \"participantId\",\n\t\t\"width\": \u0027\u0027,\n\t\t\"title\": \"\"\n\t  },\n\t  {\n  \t\t\"field\": \"SSN\",\n  \t\t\"width\": \u0027\u0027,\n  \t\t\"title\": \"40\"\n  \t  },\n  \t  {\n  \t    \"field\": \"age\",\n  \t    \"width\": 100,\n  \t    \"title\": \"Age\"\n  \t  }\n\t  \n\t]\n\n\tcolNames \u003d system.dataset.getColumnHeaders(dataset)\n\tsystem.perspective.print(colNames)\n\t_columns \u003d []\n\tfor col in colNames:\n\t\t# This conversion json_\u003edict create actually deepcopy\n\t\tpyColumn \u003d system.util.jsonDecode(jsonDefaultColumn)\n\t\t\n\t\t# Note: Field must contain only letters and numbers.\n\t\tpyColumn[\u0027field\u0027] \u003d col\n\t\t\n\t\t_dictCol \u003d None\n\t\tfor item in columnsForced:\n\t\t\tif item[\u0027field\u0027] \u003d\u003d pyColumn[\u0027field\u0027]:\n\t\t\t\t_dictCol \u003d item.copy() \n\t\t\t\n\t\t\n\t\t#ystem.perspective.print((_dictCol))\n\t\t\n\t\tpyColumn[\u0027header\u0027][\u0027title\u0027] \u003d _dictCol[\u0027title\u0027] if _dictCol else \u0027\u0027\n\t\t\n\t\tif _dictCol and _dictCol.get(\u0027width\u0027):\n\t\t\tpyColumn[\u0027width\u0027] \u003d _dictCol[\u0027width\u0027]\n\t\t\tpyColumn[\u0027strictWidth\u0027] \u003d True\n\t\tif col \u003d\u003d \u0027age\u0027:\n\t\t\tpyColumn[\"justify\"] \u003d \"center\"\n\t\t\tpyColumn[\u0027header\u0027][\"justify\"] \u003d \"center\"\n\t\tif col \u003d\u003d \u0027bedLogId\u0027:\n\t\t\tpyColumn[\u0027header\u0027][\u0027title\u0027] \u003d \u0027 \u0027\n\t\t\tpyColumn[\"render\"] \u003d \"view\"\n\t\t\tpyColumn[\"justify\"] \u003d \"center\"\n\t\t\tpyColumn[\"resizable\"] \u003d False\n\t\t\tpyColumn[\"sortable\"] \u003d False\n\t\t\tpyColumn[\"viewPath\"] \u003d \"1_TEMPLATES/Tables/TableOptions\"\t\n\t\tif col \u003d\u003d \u0027isActive\u0027:\n\t\t\tpyColumn[\u0027header\u0027][\u0027title\u0027] \u003d \u0027 \u0027\n\t\t\tpyColumn[\"render\"] \u003d \"view\"\n\t\t\tpyColumn[\"justify\"] \u003d \"center\"\n\t\t\tpyColumn[\"resizable\"] \u003d False\n\t\t\tpyColumn[\"sortable\"] \u003d False\n\t\t\tpyColumn[\"viewPath\"] \u003d \"1_TEMPLATES/Tables/TableActive\"\t\n\t\t\t\n\t\tif col \u003d\u003d \u0027participantId\u0027 or col \u003d\u003d \u0027bedId\u0027 or col \u003d\u003d \u0027roomId\u0027 or col \u003d\u003d \u0027exitDestinationId\u0027 or col \u003d\u003d \u0027race\u0027 or col \u003d\u003d \u0027reservationId\u0027 or col \u003d\u003d \u0027SSN\u0027:\n\t\t\tpyColumn[\"visible\"] \u003d False\n\t\t\tpyColumn[\"editable\"] \u003d False\n\t\t\n\t\tif col \u003d\u003d \u0027bedName\u0027 or col \u003d\u003d \u0027roomName\u0027:\n\t\t\tpyColumn[\u0027strictWidth\u0027] \u003d False\n\t\t\n#\t\tif col \u003d\u003d \u0027name\u0027:\n##\t\t\t_style \u003d {\t\"color\": \"#0c4e85\",\n##\t\t\t\t\t\t\t\"cursor\": \"pointer\",\n##\t\t\t\t\t\t\t\"fontFamily\": \"Proxima Nova ExCn Medium\",\n##\t\t\t\t\t\t\t\"text-align\": \"left\"}\n#\t\t\t_style \u003d {\t\"classes\": \"Table/Column_Normal\",\n#\t\t\t\t\t\t\"paddingLeft\": \"25px\"}\n#\t\t\tpyColumn[\u0027style\u0027] \u003d _style\t\t\t\n\t\t_columns.append(pyColumn)\n\t\n\t#ystem.perspective.print((\"_columns: \",_columns))\n\t\n\treturn _columns"
            },
            {
              "name": "correctTimeForClient",
              "params": [
                "pyds",
                "columnsToCorrect"
              ],
              "script": "\t\n\t# !!!!!!!!!!!  NOT TESTED !!!!!!!!!!!!!!!!!!!!!!!\n\t\n\t# Table automaticaly change datetime according to client timezone, \n\t# For this table we don\u0027t need automatic conversion, we must recorrect datetimes, according client timezone.\n\t# Actually to see same values like in db.\n\t\n\t# This is correction client against ignition server\n\t# TODO add correction to SQL server\n\tcorrectionTime \u003d int(60*(system.date.getTimezoneOffset() - self.session.props.device.timezone.utcOffset)) \n\t\n\tlistDateFix \u003d [[]*len(columnsToCorrect)]\n\tfor rowIndex, row in enumerate(pyds):\n\t\tfor colIndex, col in enumerate(columnsToCorrect):\n\t\t\tlistDateFix[colIndex].append(system.date.addMinutes(row[col], correctionTime))\n\t\n\n\tfor index, item in enumerate(listDateFix):\n\t\tcolNames \u003d system.dataset.getColumnHeaders(pyds)\n\t\tcolPosition \u003d colNames.index(columnsToCorrect[index])\n\t\tpyds \u003d system.dataset.filterColumns(pyds, [ x for x in colNames if x !\u003d columnsToCorrect[index]])\n\t\tpyds \u003d system.dataset.addColumn(pyds,colPosition,item,columnsToCorrect[index])\n\t\n\treturn pyds\n"
            },
            {
              "name": "setMisc",
              "params": [],
              "script": "\t\n\tself.props.cells.style\u003d {\n\t    \"classes\": \"Table/Cell_Dashboard_NoBG\"\n\t}\n\t\n\tself.props.style \u003d {\n\t  \"classes\": \"Background/Default\",\n\t  \"overflowX\": \"hidden\"\n\t}\n"
            },
            {
              "name": "doByCondition",
              "params": [
                "payload"
              ],
              "script": "\timport java.lang\n\n\t# 1. Add fetch to payload if not exist. We can send from pager or use value self.view.params.fetch.\n\t# This should be step before offset\n\tfetch \u003d payload.get(\u0027fetch\u0027)\n\t\n\tif not(fetch):\n\t\tfetch \u003d self.view.params.fetch\n\t\n\t# If fetch value is integer greater then 0, pager exist\n\tif fetch and fetch \u003e 1:\n\t\tpayload[\u0027fetch\u0027] \u003d fetch\n\n\t\t#  2. If payload has \u0027offset\u0027, it means that comming from pager. Then take lastPayload \n\t\t# stored as json string, deserialize to python dict and  add node\u0027 offset\u0027\n\t\t# Else means payload is comming from conditions. Don\u0027t do anything just continue\n\t\tif payload.get(\u0027offset\u0027) is not None:\n\t\t\toffset \u003d payload[\u0027offset\u0027]\n\t\t\tpayload \u003d {}\n\t\t\tfor key in self.custom.lastPayload:\n\t\t\t\tpayload[key] \u003d self.custom.lastPayload[key]\n\t\t\t\n\t\t\t\n\t\t\tpayload[\u0027offset\u0027] \u003d offset\n\t\t\tpayload[\u0027fetch\u0027] \u003d fetch\n\t\telse:\n\t\t\tpayload[\u0027offset\u0027] \u003d 0\n\t\n\t# 3. Get data from DB. Data is dataset which contain only fetch number of rows. \n\t# _resultRowCount is scalar value which represent number of rows in case the that query is executed without  OFFSET ... FETCH...\n\t_data, _resultRowCount \u003d self.getDataDb(payload)\n\t\t\n\tself.view.params.resultRowCount \u003d _resultRowCount\n\n\t# 4. Set some misc props if necessary (explicit)\n\tself.setMisc()\n\n\t# 5. Step get columns props (explicit adjustment)\n\tself.props.columns \u003d self.getPropsColumns(_data)\n\n\t# 6. Correct values in datetime column according client timezone. (check comments inside function)\n\t#_data \u003d self.correctTimeForClient(_data, [\u0027dob\u0027])\n\n\t# 7. Send message to Kpis This is not needed for current residents\n\t#self.sendMessageToKpis(_data)\n\n\t# 8. Add dummy empty raw if result is empty dataset. Reason to do that is to avoid loosing focus on search cell in filters.\n\t_colNames \u003d system.dataset.getColumnHeaders(_data)\n\t\n#\tif _data.rowCount \u003d\u003d 0:\n#\t\t_lstData \u003d [{col: None for col in _colNames}]\n#\telse:\n#\t\t_pyds \u003d system.dataset.toPyDataSet(_data)\n#\t\t_lstData \u003d [{col: row[col] for col in _colNames} for row in _pyds]\n#\n#\t#ystem.perspective.print((\u0027_lstData: \u0027,_lstData))\n#\t\n#\t_makeUped \u003d self.getMakeUpData(_lstData)\n\n\tself.props.data \u003d _data\n\t\n#\tself.custom.jsonLastPayload \u003d system.util.jsonEncode(payload)\n\t\n\t# Remove fetch and offset, it is not necessary to store.\n\tpayload.pop(\u0027offset\u0027,None)\n\tpayload.pop(\u0027fetch\u0027,None)\n\tself.custom.lastPayload \u003d payload\n\t\n\t\n\t\n\n\n"
            },
            {
              "name": "getQuery",
              "params": [],
              "script": "\tdeclaration \u003d \t\"\"\"\nDECLARE \n\t @dateRangeFrom datetime \u003d ?\n\t,@dateRangeTo datetime \u003d ?\n\t,@minAge INT \u003d ?\n\t,@maxAge INT \u003d ?\n\t,@gender NVARCHAR(max) \u003d ?\n\t,@race NVARCHAR(max) \u003d ?\n\t,@search_text NVARCHAR(max) \u003d ?\n\t,@facilityID INT \u003d ?\n\t,@exitDestinationId INT \u003d ?\n\t\"\"\"\n\t\n\tqueryCte \u003d \"\"\"\n\t;WITH [Tablejoin] AS\n\t( SELECT concat (p.firstName , \u0027 \u0027, p.middleName , \u0027 \u0027 , p.lastName) as name,  \n\t\tp.BirthDate ,\n\t\tbl.eventStart, \n\t\tbl.eventEnd, \n\t\tb.bedName, \n\t\tbl.participantId, \n\t\tp.isActive,\n\t\tbl.id as bedLogId, \n\t\tr.id as roomId, \n\t\tr.roomName, \n\t\tb.id as bedId, \n\t\tCASE WHEN bl.exitDestinationId IS NULL THEN \u0027\u0027 ELSE (SELECT destinationName FROM [lodging].[ExitDestination] where timeRetired is NULL \n\t\tAND id \u003d bl.exitDestinationId) END AS ExitDestination,\n\t\tCOALESCE(bl.exitDestinationId, -1) AS exitDestinationId,\n\t\tp.gender, \n\t\tp.race, \n\t\t(SELECT RIGHT(hh.SSN, 4) FROM [participant].[Participant] pp, [humans].[Human] hh WHERE pp.id \u003d p.[ID] AND pp.humanId \u003d hh.id) as SSN,\n\t\tCAST((DATEDIFF(day, BirthDate, GetDate()))/365.25 as INT)  as age,\n\t\tbl.reservationId\n\t\tfrom lodging.BedLog bl, lodging.Bed b, lodging.Room r, lodging.Facility f, participant.HistoryDashboard p\n\t\tWHERE \n\t\tf.id \u003d @facilityID and f.timeRetired is null\n\t\tand b.timeRetired is null\n\t\tand r.timeRetired is null\n\t\tand bl.bedId \u003d b.id \n\t\tand b.roomId \u003d r.id and r.facilityId \u003d f.id and bl.participantId \u003d p.id\n\t\tand (((bl.eventStart \u003e\u003d @dateRangeFrom and bl.eventStart \u003c\u003d @dateRangeTo) or (bl.eventEnd \u003e\u003d @dateRangeFrom and bl.eventEnd \u003c\u003d @dateRangeTo)) or ((bl.eventEnd is null or bl.eventEnd \u003d \u0027\u0027) and bl.eventStart \u003c\u003d @dateRangeTo) OR  (bl.eventStart \u003c\u003d @dateRangeTo and bl.eventEnd \u003e\u003d @dateRangeTo))\n)\n\"\"\"\n\n#REMOVED AND [cteProvider].[countReferral] \u003e 0 \n\tquery \u003d \"\"\"\n\tSELECT DISTINCT\n\t[TableJoin].bedLogId,\n\t[TableJoin].isActive, \n\t[TableJoin].name,  \n\t[TableJoin].eventStart, \n\t[TableJoin].eventEnd,\n\t[TableJoin].ExitDestination,\n\t[TableJoin].exitDestinationId,\n\t[TableJoin].gender, \n\t[TableJoin].BirthDate,\n\t[TableJoin].race, \n\t[TableJoin].roomName, \n\t[TableJoin].bedName, \n\t[TableJoin].participantId,  \n\t[TableJoin].roomId, \n\t[TableJoin].bedId,\n\t[TableJoin].reservationId,\n\t[TableJoin].SSN,\n\t[TableJoin].age\n\t\n\tFROM [TableJoin]\n\tWHERE (1\u003d1) \n\tAND ( TableJoin.[exitDestinationId] \u003d @exitDestinationId OR @exitDestinationId IS NULL)\n\tAND ( TableJoin.[gender] \u003d @gender OR @gender IS NULL)\n\tAND ( TableJoin.[race] \u003d @race OR @race IS NULL)\n\tAND ( TableJoin.[age] \u003e\u003d @minAge OR @minAge IS NULL)\n\tAND ( TableJoin.[age] \u003c\u003d @maxAge OR @maxAge IS NULL)\n\tAND ( \n\t@search_text \u003d \u0027\u0027 \n\tOR [TableJoin].[name] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\tOR CAST([TableJoin].[age] AS VARCHAR(20))  LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\tOR CONVERT(VARCHAR(10),[TableJoin].[eventStart],101) LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\tOR CONVERT(VARCHAR(10),[TableJoin].[eventEnd],101) LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\tOR [TableJoin].[roomName] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\tOR [TableJoin].[bedName] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\tOR [TableJoin].[race] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\tOR [TableJoin].[gender] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\tOR [TableJoin].[SSN] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\t)\n\t\"\"\"\n\torderBy \u003d \"\"\"\n\tORDER BY [TableJoin].[eventStart]\n\t\"\"\"\n\n\tfetchOffset \u003d \"\"\"\nOFFSET ? ROWS \nFETCH NEXT ? ROWS ONLY;  \n\t\"\"\"\t\n\treturn declaration, queryCte, query, orderBy, fetchOffset\n\n\t\t"
            },
            {
              "name": "sendMessageToKpis",
              "params": [
                "data"
              ],
              "script": "\t# Send message to KPIs\n\tpayload \u003d {}\n\t\n\t\n#\tif data.rowCount \u003e 0:\n#\t\tpayload[\u0027providerIds\u0027] \u003d []\n#\t\t#payload[\u0027totalReferralsYtd\u0027] \u003d 0\t\n#\t\tfor rowIndex, row in enumerate(system.dataset.toPyDataSet(data)):\n#\t\t\tpayload[\u0027providerIds\u0027].append(row[\u0027id\u0027])\n\t\n\tsystem.perspective.sendMessage(\u0027mhProviderDashboardKpiHeader\u0027,payload)\n\t\n\tsendMessageToKpis"
            },
            {
              "name": "getMakeUpData",
              "params": [
                "lstData"
              ],
              "script": "\t\n\n\t_style \u003d {\t\"color\": \"#0c4e85\",\n\t\t\t\t\"cursor\": \"pointer\",\n\t\t\t\t\"fontFamily\": \"Proxima Nova ExCn Medium\",\n\t\t\t\t\"text-align\": \"left\"}\n\t_normalStyle \u003d {\"classes\":\"Table/Column_Normal\"}\t\t\t\n\n\n\tfor row in lstData:\n\t\tfor key in row:\n\t\t\tif key \u003d\u003d \u0027name\u0027:\n\t\t\t\trow[key] \u003d {\u0027value\u0027: row[key] if row[key] is not None else \u0027\u0027, \"style\": _style}\n\t\t\telse:\n\t\t\t\trow[key] \u003d {\u0027value\u0027: row[key] if row[key] is not None else \u0027\u0027, \"style\": _normalStyle}\n\treturn lstData"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "mhByCondition",
              "pageScope": true,
              "script": "\t#ystem.perspective.print((\u0027Msgstep1\u0027))\n\tself.doByCondition(payload)",
              "sessionScope": false,
              "viewScope": false
            },
            {
              "messageType": "refreshReservations",
              "pageScope": false,
              "script": "\t# implement your handler here\n\tself.doByCondition(payload)",
              "sessionScope": false,
              "viewScope": false
            }
          ]
        },
        "type": "ia.display.table"
      }
    ],
    "custom": {
      "_test": false
    },
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "custom._test": {
        "onChange": {
          "enabled": null,
          "script": "\tif previousValue is not None and currentValue is not None:\n\t\tif previousValue.value \u003d\u003d 0 and currentValue.value \u003d\u003d 1:\n\t\t\tself.getChild(\"Table\").doByCondition({})"
        }
      }
    },
    "props": {
      "direction": "column",
      "justify": "space-around",
      "style": {
        "overflow": "visible"
      }
    },
    "type": "ia.container.flex"
  }
}