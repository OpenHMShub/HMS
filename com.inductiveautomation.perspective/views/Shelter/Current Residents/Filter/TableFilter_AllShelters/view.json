{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\ttry:\n\t\troot \u003d self.getChild(\"root\")\n\t\troot.setPropsDropdowns()\n\t\t#emvSearch \u003d root.getChild(\"emvSearch\")\n\t\t#emvSearch.props.params.keyUpPulse \u003d False\n\texcept:\n\t\timport traceback\n\t\tlogger \u003d system.util.getLogger(\"Shelter\")\n\t\tmsg \u003d self.name + \u0027:\\n\u0027\n\t\tmsg +\u003d traceback.format_exc()\n\t\tlogger.error(msg)\t\t\t"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "ExitDestination": null,
    "dateRangeFrom": "02/03/2025 00:00:00",
    "dateRangeTo": "02/03/2025 23:59:59",
    "exportDataset": "value",
    "gender": null,
    "maxAge": null,
    "minAge": null,
    "program": "(\u0027\u0027)",
    "race": null,
    "searchText": "",
    "shelter": "(\u0027\u0027)",
    "veteran": null
  },
  "propConfig": {
    "params.ExitDestination": {
      "binding": {
        "config": {
          "path": "/root/Row1/emvDestination.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.dateRangeFrom": {
      "binding": {
        "config": {
          "path": "session.custom.dateRangeFromDate"
        },
        "transforms": [
          {
            "code": "\tdate \u003d str(value) + \u0027 00:00:00\u0027\n\treturn date",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.dateRangeTo": {
      "binding": {
        "config": {
          "path": "session.custom.dateRangeToDate"
        },
        "transforms": [
          {
            "code": "\tdate \u003d str(value) + \u0027 23:59:59\u0027\n\treturn date",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.exportDataset": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.gender": {
      "binding": {
        "config": {
          "path": "/root/Row2/emvGender.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.maxAge": {
      "binding": {
        "config": {
          "path": "/root/Row2/emvMaxAge.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.minAge": {
      "binding": {
        "config": {
          "path": "/root/Row2/emvMinAge.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.program": {
      "binding": {
        "config": {
          "path": "/root/Row1/emvProgram.props.params.selection"
        },
        "transforms": [
          {
            "code": "\treturn value if value!\u003dNone else \"(\u0027\u0027)\"",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.race": {
      "binding": {
        "config": {
          "path": "/root/Row2/emvRace.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.searchText": {
      "binding": {
        "config": {
          "path": "/root/Row2/emvSearch.props.params.searchText"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.shelter": {
      "binding": {
        "config": {
          "path": "/root/Row1/emvShelter.props.params.selection"
        },
        "transforms": [
          {
            "code": "\treturn value if value!\u003dNone else \"(\u0027\u0027)\"",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.veteran": {
      "binding": {
        "config": {
          "path": "/root/Row2/emvVeteran.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 65,
      "width": 1820
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "meta": {
              "name": "emvShelter"
            },
            "position": {
              "basis": "210px",
              "shrink": 0
            },
            "propConfig": {
              "props.params.actionPerformedPulse": {
                "onChange": {
                  "enabled": null,
                  "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\t"
                }
              }
            },
            "props": {
              "params": {
                "actionPerformedPulse": true,
                "clear": false,
                "multiSelect": true,
                "options": [
                  {
                    "label": "All Guest House",
                    "value": "All Guest House"
                  }
                ],
                "placeholder": "Shelter",
                "selection": null
              },
              "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
              "style": {
                "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container",
                "marginLeft": "37px"
              }
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "setOptions",
                  "params": [],
                  "script": "\t\n\tquery \u003d \"\"\" \nSELECT facilityName FROM lodging.Facility WHERE facilityName IS NOT NULL AND timeRetired IS NULL ORDER BY facilityName\n\t\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tfacilityNameList \u003d [ dict(value \u003d x[0],label \u003d x[0]) for x in result]\n\tfacilityNameList.insert(0,{\u0027value\u0027:\u0027All Guest House\u0027,\u0027label\u0027:\u0027All Guest House\u0027})\n\t\n\t\n\tself.props.params.options \u003d facilityNameList\n#\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[0]) for x in result]\n\t\n"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "emvProgram"
            },
            "position": {
              "basis": "220px",
              "shrink": 0
            },
            "propConfig": {
              "props.params.actionPerformedPulse": {
                "onChange": {
                  "enabled": null,
                  "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\t"
                }
              }
            },
            "props": {
              "params": {
                "actionPerformedPulse": false,
                "clear": false,
                "multiSelect": true,
                "options": [],
                "placeholder": "Program",
                "selection": null
              },
              "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
              "style": {
                "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container"
              }
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "setOptions",
                  "params": [],
                  "script": "\t\n\tquery \u003d \"\"\"\nSELECT programName FROM interaction.Program WHERE programName IS NOT NULL and timeRetired IS NULL ORDER BY programName\n\t\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[0]) for x in result]\n"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "emvDestination"
            },
            "position": {
              "basis": "320px"
            },
            "propConfig": {
              "props.params.actionPerformedPulse": {
                "onChange": {
                  "enabled": null,
                  "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\n"
                }
              },
              "props.params.options": {
                "binding": {
                  "config": {
                    "queryPath": "Shelter/CurrentResidents/CurrentResidents_Destination"
                  },
                  "type": "query"
                }
              }
            },
            "props": {
              "params": {
                "actionPerformedPulse": false,
                "clear": false,
                "multiSelect": false,
                "placeholder": "Destination",
                "selection": null
              },
              "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
              "style": {
                "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container"
              }
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "emvDateRange"
            },
            "position": {
              "basis": "205px"
            },
            "propConfig": {
              "props.params.selectedDateRange": {
                "onChange": {
                  "enabled": null,
                  "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()"
                }
              }
            },
            "props": {
              "params": {
                "selectedDateRange": " 02/03/2025 to 02/03/2025"
              },
              "path": "Shelter/Templates/DateRange/DateInput",
              "style": {
                "classes": "Filter/Filter_Container",
                "marginRight": "37px"
              }
            },
            "type": "ia.display.view"
          }
        ],
        "meta": {
          "name": "Row1"
        },
        "position": {
          "basis": "200px"
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "emvGender"
            },
            "position": {
              "basis": "190px"
            },
            "propConfig": {
              "props.params.actionPerformedPulse": {
                "onChange": {
                  "enabled": null,
                  "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\n"
                }
              }
            },
            "props": {
              "params": {
                "actionPerformedPulse": false,
                "clear": false,
                "multiSelect": false,
                "options": [
                  {
                    "label": "Client doesn\u0027t know",
                    "value": "Client doesn\u0027t know"
                  },
                  {
                    "label": "Client refused",
                    "value": "Client refused"
                  },
                  {
                    "label": "Data not collected",
                    "value": "Data not collected"
                  },
                  {
                    "label": "Female",
                    "value": "Female"
                  },
                  {
                    "label": "Male",
                    "value": "Male"
                  },
                  {
                    "label": "Non-Binary",
                    "value": "Non-Binary"
                  },
                  {
                    "label": "Transgender Female to Male",
                    "value": "Transgender Female to Male"
                  },
                  {
                    "label": "Transgender Male to Female",
                    "value": "Transgender Male to Female"
                  }
                ],
                "placeholder": "Gender",
                "selection": null
              },
              "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
              "style": {
                "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container",
                "marginLeft": "37px"
              }
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "setOptions",
                  "params": [],
                  "script": "\tquery \u003d \"\"\"\n\tSELECT genderName FROM humans.Gender ORDER BY genderName\n\t\t\"\"\"\n\t\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[0]) for x in result]\n\t\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "emvMinAge"
            },
            "position": {
              "basis": "110px"
            },
            "propConfig": {
              "props.params.actionPerformedPulse": {
                "onChange": {
                  "enabled": null,
                  "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\n"
                }
              }
            },
            "props": {
              "params": {
                "actionPerformedPulse": false,
                "clear": false,
                "multiSelect": false,
                "options": [
                  {
                    "label": 18,
                    "value": 18
                  },
                  {
                    "label": 25,
                    "value": 25
                  },
                  {
                    "label": 35,
                    "value": 35
                  },
                  {
                    "label": 45,
                    "value": 45
                  },
                  {
                    "label": 55,
                    "value": 55
                  }
                ],
                "placeholder": "Min Age",
                "selection": null
              },
              "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
              "style": {
                "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container"
              }
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "setOptions",
                  "params": [],
                  "script": "\tlstValues \u003d [18,25,35,45,55]\n\tself.props.params.options \u003d [ dict(value \u003d x,label \u003d x) for x in lstValues]\n\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "emvMaxAge"
            },
            "position": {
              "basis": "110px"
            },
            "propConfig": {
              "props.params.actionPerformedPulse": {
                "onChange": {
                  "enabled": null,
                  "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\n"
                }
              }
            },
            "props": {
              "params": {
                "actionPerformedPulse": false,
                "clear": false,
                "multiSelect": false,
                "options": [
                  {
                    "label": 18,
                    "value": 18
                  },
                  {
                    "label": 25,
                    "value": 25
                  },
                  {
                    "label": 35,
                    "value": 35
                  },
                  {
                    "label": 45,
                    "value": 45
                  },
                  {
                    "label": 55,
                    "value": 55
                  }
                ],
                "placeholder": "Max Age",
                "selection": null
              },
              "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
              "style": {
                "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container"
              }
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "setOptions",
                  "params": [],
                  "script": "\tlstValues \u003d [18,25,35,45,55]\n\tself.props.params.options \u003d [ dict(value \u003d x,label \u003d x) for x in lstValues]\n\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "emvRace"
            },
            "position": {
              "basis": "250px"
            },
            "propConfig": {
              "props.params.actionPerformedPulse": {
                "onChange": {
                  "enabled": null,
                  "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\n"
                }
              }
            },
            "props": {
              "params": {
                "actionPerformedPulse": false,
                "clear": false,
                "multiSelect": false,
                "options": [
                  {
                    "label": "American Indian or Alaska Native",
                    "value": "American Indian or Alaska Native"
                  },
                  {
                    "label": "Asian or Asian American",
                    "value": "Asian or Asian American"
                  },
                  {
                    "label": "Black, African American or African",
                    "value": "Black, African American or African"
                  },
                  {
                    "label": "Hispanic/Latina/e/o",
                    "value": "Hispanic/Latina/e/o"
                  },
                  {
                    "label": "Middle Eastern or North African",
                    "value": "Middle Eastern or North African"
                  },
                  {
                    "label": "Native Hawaiian or Other Pacific Island",
                    "value": "Native Hawaiian or Other Pacific Island"
                  },
                  {
                    "label": "White",
                    "value": "White"
                  },
                  {
                    "label": "Client doesn\u0027t know",
                    "value": "Client doesn\u0027t know"
                  },
                  {
                    "label": "Client refused",
                    "value": "Client refused"
                  },
                  {
                    "label": "Data not collected",
                    "value": "Data not collected"
                  }
                ],
                "placeholder": "Race and Ethnicity",
                "selection": null
              },
              "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
              "style": {
                "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container"
              }
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "setOptions",
                  "params": [],
                  "script": "\tquery \u003d \"\"\"\n\tSELECT * FROM\n\t(\n\tSELECT TOP 1000\n\t\traceName as \u0027race\u0027\n\tFROM\n\t\thumans.Race\n\t\twhere raceName not in (\u0027Client doesn\u0027\u0027t know\u0027, \u0027Client refused\u0027, \u0027Data not collected\u0027)\n\tORDER by raceName ) x\n\tUNION\n\tSELECT \n\t\traceName as \u0027race\u0027\n\tFROM\n\t\thumans.Race\n\t\twhere raceName in (\u0027Client doesn\u0027\u0027t know\u0027, \u0027Client refused\u0027, \u0027Data not collected\u0027)\n\t\t\"\"\"\n\t\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[0]) for x in result]\n\t\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "emvVeteran"
            },
            "position": {
              "basis": "170px"
            },
            "propConfig": {
              "props.params.actionPerformedPulse": {
                "onChange": {
                  "enabled": null,
                  "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\n"
                }
              }
            },
            "props": {
              "params": {
                "actionPerformedPulse": false,
                "clear": false,
                "multiSelect": false,
                "options": [
                  {
                    "label": "Yes",
                    "value": 0
                  },
                  {
                    "label": "No",
                    "value": 1
                  },
                  {
                    "label": "Client doesn\u0027t know",
                    "value": 2
                  },
                  {
                    "label": "Client refused",
                    "value": 3
                  },
                  {
                    "label": "Data not collected",
                    "value": 4
                  }
                ],
                "placeholder": "(All Veteran Status)",
                "selection": null
              },
              "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
              "style": {
                "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container"
              }
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "setOptions",
                  "params": [],
                  "script": "\tquery \u003d \"\"\"\n\t\tSELECT\n\t\t\tid as \u0027id\u0027,\n\t\t\tveteranStatusName as \u0027veteran_status\u0027\n\t\tFROM\n\t\t\thumans.VeteranStatus\n\t\tORDER BY id\n\t\t\"\"\"\n\t\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[1]) for x in result]\n\t\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "Placeholder"
            },
            "position": {
              "basis": "10px",
              "grow": 1
            },
            "props": {
              "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "toExcel"
            },
            "position": {
              "basis": "30px",
              "shrink": 0
            },
            "propConfig": {
              "props.params.dataset": {
                "binding": {
                  "config": {
                    "path": "view.params.exportDataset"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "params": {
                "defaultFilePrefix": "Shelter"
              },
              "path": "1_TEMPLATES/Tables/TableToExcel"
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "toPDF"
            },
            "position": {
              "basis": "30px",
              "shrink": 0
            },
            "propConfig": {
              "props.params.dataset": {
                "binding": {
                  "config": {
                    "path": "view.params.exportDataset"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "params": {
                "defaultFilePrefix": "Shelter"
              },
              "path": "1_TEMPLATES/Tables/TableToPDF"
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "lblSearch"
            },
            "position": {
              "basis": "50px"
            },
            "props": {
              "style": {
                "classes": "Table/Filter_Header",
                "textAlign": "end"
              },
              "text": "Search:"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "emvSearch"
            },
            "position": {
              "basis": "220px",
              "shrink": 0
            },
            "propConfig": {
              "props.params.keyUpPulse": {
                "onChange": {
                  "enabled": null,
                  "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\t"
                }
              }
            },
            "props": {
              "params": {
                "clear": false,
                "keyUpPulse": false,
                "searchText": ""
              },
              "path": "Providers/Dashboard/Components/Filters/Search_Bar",
              "style": {
                "classes": "Table/Search_Bar"
              },
              "useDefaultViewWidth": true
            },
            "type": "ia.display.view"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\troot \u003d self.parent\n\t\n\temvShelter \u003d self.parent.parent.getChild(\"Row1\").getChild(\"emvShelter\")\n\temvProgram \u003d self.parent.parent.getChild(\"Row1\").getChild(\"emvProgram\")\n\temvGender \u003d self.getSibling(\"emvGender\")\n\temvRace \u003d self.getSibling(\"emvRace\")\n\temvMinAge \u003d self.getSibling(\"emvMinAge\")\n\temvMaxAge \u003d self.getSibling(\"emvMaxAge\")\n\temvSearch \u003d self.getSibling(\"emvSearch\")\n\temvVeteran \u003d self.getSibling(\"emvVeteran\")\n\t\t\n\temvShelter.props.params.clear \u003d True \n\temvProgram.props.params.clear \u003d True\n\temvGender.props.params.clear \u003d True\n\temvRace.props.params.clear \u003d True\n\temvMinAge.props.params.clear \u003d True\n\temvMaxAge.props.params.clear \u003d True\n\temvSearch.props.params.clear \u003d True\n\temvVeteran.props.params.clear \u003d True\n\tself.session.custom.dateRangeFromDate \u003d system.date.format(system.date.now(), \"MM/dd/yyyy\")\n\tself.session.custom.dateRangeToDate \u003d system.date.format(system.date.now(), \"MM/dd/yyyy\")\n\t\n\tpayload \u003d {}\n\tpayload[\u0027shelter\u0027] \u003d None \n\tpayload[\u0027program\u0027] \u003d None\n\tpayload[\u0027gender\u0027] \u003d None\n\tpayload[\u0027race\u0027] \u003d None\n\tpayload[\u0027minAge\u0027] \u003d None\n\tpayload[\u0027maxAge\u0027] \u003d None\n\tpayload[\u0027dateRangeFrom\u0027] \u003d self.session.custom.dateRangeFromDate  \n\tpayload[\u0027dateRangeTo\u0027] \u003d self.session.custom.dateRangeToDate\n\tpayload[\u0027searchText\u0027] \u003d None\n\troot.sendMsgCondition(payload)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "clearConditions"
            },
            "position": {
              "basis": "30px",
              "shrink": 0
            },
            "props": {
              "image": {
                "height": 16,
                "icon": {
                  "color": "#0C4E8B",
                  "path": "material/close"
                },
                "position": "center",
                "width": 16
              },
              "style": {
                "classes": "Filter/Filter_Border_Default Filter/Filter_Container",
                "marginRight": "37px"
              },
              "text": "",
              "textStyle": {
                "classes": "GreyColor"
              }
            },
            "type": "ia.input.button"
          }
        ],
        "meta": {
          "name": "Row2"
        },
        "position": {
          "basis": "200px"
        },
        "props": {
          "style": {
            "marginTop": "5px"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "custom": {
      "_devClean": false,
      "_devPulse": false,
      "_isDev": false
    },
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "custom._devClean": {
        "onChange": {
          "enabled": null,
          "script": "\t\n\temvProviderType \u003d self.getChild(\"emvProviderType\")\n\temvActivityRange \u003d self.getChild(\"emvActivityRange\")\n\temvSearch \u003d self.getChild(\"emvSearch\")\n\t\n\temvProviderType.props.params.clear \u003d True\n\temvActivityRange.props.params.clear \u003d True\n\temvSearch.props.params.clear \u003d True\n\t\n\n\t\n\tif self.custom._devClean:\n\t\tself.custom._devClean \u003d False"
        }
      },
      "custom._devPulse": {
        "onChange": {
          "enabled": null,
          "script": "\t\n\temvProviderType \u003d self.getChild(\"emvProviderType\")\n\temvActivityRange \u003d self.getChild(\"emvActivityRange\")\n\temvSearch \u003d self.getChild(\"emvSearch\")\n\t\n\t\n\tif self.custom._isDev:\n\t\tif currentValue.value is True:\n\t\t\tself.setPropsDropdowns()\n\t\telse:\n\t\t\temvProviderType.props.params.options \u003d []\n\t\t\temvActivityRange.props.params.options \u003d []\n\t\n\temvProviderType.props.params.actionPerformedPulse \u003d False\n\temvActivityRange.props.params.actionPerformedPulse \u003d False\n\temvSearch.props.params.keyUpPulse \u003d False"
        }
      }
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Filter/Header_Text"
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "setPropsDropdowns",
          "params": [],
          "script": "\temvShelter \u003d self.getChild(\"Row1\").getChild(\"emvShelter\")\n\temvProgram \u003d self.getChild(\"Row1\").getChild(\"emvProgram\")\n\temvGender \u003d self.getChild(\"Row2\").getChild(\"emvGender\")\n\temvRace \u003d self.getChild(\"Row2\").getChild(\"emvRace\")\n\temvMinAge \u003d self.getChild(\"Row2\").getChild(\"emvMinAge\")\n\temvMaxAge \u003d self.getChild(\"Row2\").getChild(\"emvMaxAge\")\n\temvVeteran \u003d self.getChild(\"Row2\").getChild(\"emvVeteran\")\n\temvDateRange \u003d self.getChild(\"Row1\").getChild(\"emvDateRange\")\n\t\n\temvShelter.setOptions()\n\temvProgram.setOptions()\n\temvGender.setOptions()\n\temvRace.setOptions()\n\temvMinAge.setOptions()\n\temvMaxAge.setOptions()\n\temvVeteran.setOptions()\n#\temvDateRange.setOptions()"
        },
        {
          "name": "sendMsgCondition",
          "params": [
            "payload\u003dNone"
          ],
          "script": "\t\n\temvShelter \u003d self.getChild(\"Row1\").getChild(\"emvShelter\")\n\temvProgram \u003d self.getChild(\"Row1\").getChild(\"emvProgram\")\n\temvGender \u003d self.getChild(\"Row2\").getChild(\"emvGender\")\n\temvRace \u003d self.getChild(\"Row2\").getChild(\"emvRace\")\n\temvMinAge \u003d self.getChild(\"Row2\").getChild(\"emvMinAge\")\n\temvMaxAge \u003d self.getChild(\"Row2\").getChild(\"emvMaxAge\")\n\temvVeteran \u003d self.getChild(\"Row2\").getChild(\"emvVeteran\")\n#\temvDateRange \u003d self.getChild(\"Row1\").getChild(\"emvDateRange\")\n\temvSearch \u003d self.getChild(\"Row2\").getChild(\"emvSearch\")\n\temvDestination \u003d self.getChild(\"Row1\").getChild(\"emvDestination\")\n\t\n\t\n\tif payload is None:\n\t\tpayload \u003d {}\n\t\tpayload[\u0027shelter\u0027] \u003d emvShelter.props.params.selection\n\t\tpayload[\u0027program\u0027] \u003d emvProgram.props.params.selection\n\t\tpayload[\u0027gender\u0027] \u003d emvGender.props.params.selection\n\t\tpayload[\u0027race\u0027] \u003d emvRace.props.params.selection\n\t\tpayload[\u0027minAge\u0027] \u003d emvMinAge.props.params.selection\n\t\tpayload[\u0027maxAge\u0027] \u003d emvMaxAge.props.params.selection\n\t\tpayload[\u0027dateRangeFrom\u0027] \u003d self.session.custom.dateRangeFromDate\n\t\tpayload[\u0027dateRangeTo\u0027] \u003d self.session.custom.dateRangeToDate\n\t\tpayload[\u0027searchText\u0027] \u003d emvSearch.props.params.searchText\n\t\tpayload[\u0027ExitDestination\u0027] \u003d emvDestination.props.params.selection\n#\tsystem.perspective.print(payload)\n#\tsystem.perspective.sendMessage(\u0027mhByCondition\u0027, payload)\n\t\n"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "refreshReservations",
          "pageScope": true,
          "script": "\tself.sendMsgCondition()",
          "sessionScope": true,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}