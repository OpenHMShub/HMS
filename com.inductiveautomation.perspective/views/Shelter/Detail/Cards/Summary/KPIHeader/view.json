{
  "custom": {},
  "params": {
    "shelterID": 1
  },
  "propConfig": {
    "params.shelterID": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 113,
      "width": 297
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView"
        },
        "position": {
          "basis": "50%",
          "grow": 1,
          "shrink": 0
        },
        "propConfig": {
          "props.params.Value": {
            "binding": {
              "config": {
                "path": "view.params.shelterID"
              },
              "transforms": [
                {
                  "code": "\ttry:\n\t\tfacilityId \u003d long(value)\n\texcept:\n\t\tfacilityId \u003d -1\n\t\t\n\tif facilityId \u003c\u003d 0:\n\t\treturn 0\n\t\n\tsystem.perspective.print((\u0027value, facilityId: \u0027,value, facilityId))\n\t\n\tquery \u003d \"\"\"\nSELECT COUNT([Bed].[id]) bedCount \nFROM [lodging].[Bed] \nINNER JOIN [lodging].[Room] ON [Bed].[roomId] \u003d [Room].[id]\nINNER JOIN [lodging].[Facility] ON [Room].[facilityId] \u003d [Facility].[id]\nWHERE [Bed].[timeRetired] IS NULL \n\tAND [Room].[timeRetired] IS NULL \n\tAND [Facility].[timeRetired] IS NULL \n\tAND [Facility].[id] \u003d ?\n\t\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[facilityId],\u0027HMSOps\u0027)\n\n\treturn result.getValueAt(0,0)",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "Title": "Total Beds"
          },
          "path": "Shelter/Detail/Cards/Summary/KPI/Metric_Flex",
          "style": {
            "marginLeft": "0px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedView_1"
        },
        "position": {
          "basis": "50%",
          "grow": 1,
          "shrink": 0
        },
        "propConfig": {
          "props.params.Value": {
            "binding": {
              "config": {
                "path": "view.params.shelterID"
              },
              "transforms": [
                {
                  "code": "\troot \u003d self.parent\n\ttry:\n\t\tfacilityId \u003d long(value)\n\texcept:\n\t\tfacilityId \u003d -1\n\t\t\n\tif facilityId \u003c\u003d 0:\n\t\treturn 0\n\t\n\tnowClient \u003d root.getAsClientTime(system.date.now())\n\t\t\n\tquery \u003d \"\"\"\n\tDECLARE @StartInterval date \u003d ?\n\tDECLARE @EndInterval date \u003d ?\n\t\t\n\tSELECT COUNT([Participant].[id]) participantCount\n\tFROM [lodging].[BedLog]  \n\t\tINNER JOIN [participant].[Participant] ON [Participant].[id] \u003d [BedLog].[participantId] \n\t\tINNER JOIN [humans].[Human] ON [Participant].[humanId] \u003d [Human].[id]\n\t\tINNER JOIN [lodging].[Bed] ON [BedLog].[bedId] \u003d [Bed].[id]\n\t\tINNER JOIN [lodging].[Room] ON [Bed].[roomId] \u003d [Room].[id] \n\tWHERE ([BedLog].[eventStart] IS NOT NULL \n\tAND CAST([BedLog].[eventStart] AS date) \u003c\u003d @EndInterval\n\tAND CAST(ISNULL([BedLog].[eventEnd],@EndInterval) AS date) \u003e\u003d @StartInterval\n\tAND [Bed].timeRetired is NULL  \n\tAND [Room].[facilityId] \u003d ?) \n\t\"\"\"\n\t\t\n\tsystem.perspective.print((\u0027value, facilityId: \u0027,value, facilityId))\n\t\n\tresult \u003d system.db.runPrepQuery(query,[nowClient,nowClient,facilityId],\u0027HMSOps\u0027)\n\tif result is not None and result.getRowCount() \u003e 0:\n\t\treturn result.getValueAt(0,0)\t\n\telse:\n\t\treturn 0\n",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "Title": "Current Residents"
          },
          "path": "Shelter/Detail/Cards/Summary/KPI/Metric_Flex"
        },
        "type": "ia.display.view"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "alignContent": "center",
      "alignItems": "flex-start",
      "style": {
        "classes": "Background/Default",
        "overflow": "hidden",
        "paddingLeft": "20px"
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "getAsClientTime",
          "params": [
            "datetimeInput"
          ],
          "script": "\ttimeClientOffset \u003d self.session.props.device.timezone.utcOffset - system.date.getTimezoneOffset()\n\ttimeClient \u003d system.date.addMinutes(datetimeInput,int(timeClientOffset*60))\n\t\n\treturn timeClient\n\n"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": []
    },
    "type": "ia.container.flex"
  }
}