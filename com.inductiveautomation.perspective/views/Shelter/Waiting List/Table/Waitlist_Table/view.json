{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\ttry:\n\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshWaitList\", payload\u003d{}, scope\u003d\"session\")\n\texcept:\n\t\timport traceback\n\t\tlogger \u003d system.util.getLogger(\"{}\".format(\u0027WaitList_Table onStartUp\u0027))\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)\t\n\n"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "fetch": null,
    "resultRowCount": 3
  },
  "propConfig": {
    "params.fetch": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.resultRowCount": {
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 1053,
      "width": 1650
    }
  },
  "root": {
    "children": [
      {
        "custom": {
          "_devPulse": false,
          "_devTxt": "",
          "_isDev": false,
          "jsonLastPayload": null,
          "lastPayload": {
            "activeInactive": "Active",
            "gender": null,
            "maxAge": null,
            "minAge": null,
            "program": null,
            "race": null,
            "referralStatus": null,
            "searchText": ""
          }
        },
        "events": {
          "component": {
            "onRowClick": {
              "config": {
                "script": "\tselectedColumn \u003d self.props.selection.selectedColumn\n\t\n\ttry:\n\t\tfor item in range(len(self.props.data)):\n\t\t\tif item \u003d\u003d event.row:\n\t\t\t\tself.props.data[item].participantid.style.classes \u003d \u0027Table/Row_Select\u0027\n\t\t\t\tself.props.data[item].gender.style.classes \u003d \u0027Table/Row_Select\u0027\n\t\t\t\tself.props.data[item].race.style.classes \u003d \u0027Table/Row_Select\u0027\n\t\t\t\tself.props.data[item].age.style.classes \u003d \u0027Table/Row_Select\u0027\n\t\t\t\tself.props.data[item].name.style.classes \u003d \u0027Table/Row_Select\u0027\n\t\t\t\tself.props.data[item].notes.style.classes \u003d \u0027Table/Row_Select\u0027\n\t\t\t\tself.props.data[item].referralStatus.style.classes \u003d \u0027Table/Row_Select\u0027\n\t\t\t\tself.props.data[item].program.style.classes \u003d \u0027Table/Row_Select\u0027\n\t\t\t\tself.props.data[item].dateadded.style.classes \u003d \u0027Table/Row_Select\u0027\n#\t\t\t\tself.props.data[item].dateRemoved.style.classes \u003d \u0027Table/Row_Select\u0027\n\t\t\telse:\n\t\t\t\tself.props.data[item].participantid.style.classes \u003d \u0027Table/Column_Normal\u0027\n\t\t\t\tself.props.data[item].gender.style.classes \u003d \u0027Table/Column_Normal\u0027\n\t\t\t\tself.props.data[item].race.style.classes \u003d \u0027Table/Column_Normal\u0027\n\t\t\t\tself.props.data[item].age.style.classes \u003d \u0027Table/Column_Normal\u0027\n\t\t\t\tself.props.data[item].name.style.classes \u003d \u0027Table/Column_Normal\u0027\n\t\t\t\tself.props.data[item].notes.style.classes \u003d \u0027Table/Column_Normal\u0027\n\t\t\t\tself.props.data[item].referralStatus.style.classes \u003d \u0027Table/Column_Normal\u0027\n\t\t\t\tself.props.data[item].program.style.classes \u003d \u0027Table/Column_Normal\u0027\n\t\t\t\tself.props.data[item].dateadded.style.classes \u003d \u0027Table/Column_Normal\u0027\n#\t\t\t\tself.props.data[item].dateRemoved.style.classes \u003d \u0027Table/Column_Normal\u0027\n\texcept Exception as e:\n\t\tsystem.perspective.print(str(e))\n\tif selectedColumn \u003d\u003d \"participantid\":\n\t\tparticipantID \u003d self.props.selection.data[0][\u0027participantid\u0027]\n\t\tid \u003d \"PreviewParticipant\" \n\t\tparams \u003d {\"participantID\":participantID}\n\t\tsystem.perspective.openDock(id\u003did,params\u003dparams)\n\telse:\n\t\tpass"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Table"
        },
        "position": {
          "basis": "100%",
          "grow": 1,
          "shrink": 0
        },
        "propConfig": {
          "custom._devPulse": {
            "onChange": {
              "enabled": null,
              "script": "\tif self.custom._isDev:\n\t\tif currentValue.value is True:\n\t\t\tpayload \u003d {}\n\t\t\t\n#\t\t\tpayload[\u0027countReferralFromTo\u0027] \u003d [1,5]\n#\t\t\tpayload[\u0027providerTypeId\u0027] \u003d [0,2]\n\t\t\tpayload[\u0027referralStatus\u0027] \u003d None\n\t\t\tpayload[\u0027program\u0027] \u003d None\n\t\t\tpayload[\u0027gender\u0027] \u003d None\n\t\t\tpayload[\u0027race\u0027] \u003d None\n\t\t\tpayload[\u0027minAge\u0027] \u003d None\n\t\t\tpayload[\u0027maxAge\u0027] \u003d None\n\t\t\tpayload[\u0027activeInactive\u0027] \u003d \u0027Active\u0027\n\t\t\tpayload[\u0027searchText\u0027] \u003d self.custom._devTxt\n\t\t\t#payload[\u0027fetch\u0027] \u003d 12\n\t\t\t\n\t\t\tsystem.perspective.sendMessage(\u0027mhByCondition\u0027, payload \u003d payload)\n\t\t\tself.custom.jsonLastPayload \u003d system.util.jsonEncode(payload)\n\n\t\telse:\n\t\t\t#payload \u003d {}\n\t\t\t#payload[\u0027providerTypeId\u0027] \u003d [-1]\n\t\t\t#payload[\u0027searchText\u0027] \u003d self.custom._devTxt\n\t\t\t#payload[\u0027fetch\u0027] \u003d 12\n\t\t\t\n\t\t\t#system.perspective.sendMessage(\u0027mhByCondition\u0027, payload \u003d payload)\n\t\t\t#self.custom.jsonLastPayload \u003d system.util.jsonEncode(payload)\n\n\t\t\t#self.props.data \u003d [{key: \u0027\u0027 if key \u003d\u003d \u0027providerName\u0027 else None for key in self.props.data[0]}]\n\t\t\tself.props.data \u003d [{key: None for key in self.props.data[0]}]\n\t\t\tself.custom.jsonLastPayload \u003d None\n\n\n"
            }
          },
          "props.filter.text": {
            "access": "PUBLIC"
          }
        },
        "props": {
          "cells": {
            "style": {
              "classes": "Table/Cell_Dashboard"
            }
          },
          "columns": [
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "participantid",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": " "
              },
              "justify": "center",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "view",
              "resizable": false,
              "sort": "none",
              "sortable": false,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "1_TEMPLATES/Tables/TableOptions",
              "visible": true,
              "width": 40
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "name",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Participant"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 220
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "program",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Program"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 200
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "race",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Race and Ethnicity"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 190
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "age",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Age"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 70
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "gender",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Gender"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 190
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY hh:mm",
              "editable": false,
              "field": "dateadded",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Date Added"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 170
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "referralStatus",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Referral Status"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 100
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "notes",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "Notes"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 300
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "SSN",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": 40
            }
          ],
          "data": [
            {
              "SSN": null,
              "age": null,
              "dateadded": null,
              "gender": null,
              "name": null,
              "notes": null,
              "participantid": null,
              "program": null,
              "race": null,
              "referralStatus": null
            }
          ],
          "pager": {
            "activeOption": 100,
            "initialOption": 100
          },
          "rows": {
            "highlight": {
              "color": "#ccffff",
              "enabled": false
            },
            "striped": {
              "enabled": false
            }
          },
          "selection": {
            "style": {
              "backgroundColor": "#9af4eb4d"
            }
          },
          "style": {
            "classes": "Background/Default",
            "overflowX": "hidden"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "getDataDb",
              "params": [
                "payload"
              ],
              "script": "\timport extend.query\n\t\n\tdeclaration, queryCte, query, orderBy, fetchOffset \u003d self.getQuery()\n\n\targs \u003d []\t\n\n\t###############################################\n\t# This param must be java.util.Date or None. Not allowed empty string \u0027\u0027\n\tprogram \u003d payload.get(\u0027program\u0027)\n\targs +\u003d [program]\n\t\n\t###############################################\n\t# This param must be STRING or None. Not allowed empty string \u0027\u0027\n\tgender\u003d payload.get(\u0027gender\u0027)\n\targs +\u003d [gender]\n\t\n\t###############################################\n\t# This param must be STRING or None. Not allowed empty string \u0027\u0027\n\trace\u003d payload.get(\u0027race\u0027)\n\targs +\u003d [race]\n\t###############################################\n\t# This param must be int or None. Not allowed empty string \u0027\u0027\n\tminAge\u003d payload.get(\u0027minAge\u0027)\n\targs +\u003d [minAge]\n\t\n\t###############################################\n\t# This param must be int or None. Not allowed empty string \u0027\u0027\n\tmaxAge\u003d payload.get(\u0027maxAge\u0027)\n\targs +\u003d [maxAge]\t\t\n\t\n\t###############################################\n\t# This param must be int or None. Not allowed empty string \u0027\u0027\n\treferralStatus\u003d payload.get(\u0027referralStatus\u0027)\n\targs +\u003d [referralStatus]\n\t\n\t###############################################\n\t# This param must be java.util.Date or None. Not allowed empty string \u0027\u0027\n\tactiveInactive\u003d payload.get(\u0027activeInactive\u0027)\n\targs +\u003d [activeInactive]\n\t################################################\n\t\n\tsearch_text \u003d payload.get(\u0027searchText\u0027)\n\t\n\tif search_text is None:\n\t\tsearch_text \u003d \u0027\u0027\n\t\n\targs +\u003d [search_text]\n\t\n\t################################################\n\toffset \u003d payload.get(\u0027offset\u0027)\n\tfetch \u003d payload.get(\u0027fetch\u0027)\n\tif offset is not None and fetch is not None:\n\t\t#counterQuery \u003d \u0027{}; WITH cte AS ({}) SELECT COUNT(1) cnt FROM cte\u0027.format(declaration, query)\n\t\t# declaration, queryCte, query, orderBy, fetchOffset\n\t\tcounterQuery \u003d \u0027{} {} ,cte AS ({}) SELECT COUNT(1) cnt FROM cte\u0027.format(declaration, queryCte, query)\n\t\tresultRowCount \u003d system.db.runScalarPrepQuery(counterQuery, args, \u0027HMSOps\u0027)\n\t\targs +\u003d [offset]\n\t\targs +\u003d [fetch]\t\n\t\n\t\tquery \u003d \u0027{} {} {} {} {}\u0027.format(declaration, queryCte, query, orderBy, fetchOffset)\n#\t\tsystem.perspective.print(query)\n\t\tresult \u003d system.db.runPrepQuery(query, args, \u0027HMSOps\u0027)\n\t\n\telse:\n\t\tquery \u003d \u0027{} {} {} {}\u0027.format(declaration, queryCte, query, orderBy)\n#\t\tsystem.perspective.print(query)\n\t\tresult \u003d system.db.runPrepQuery(query, args, \u0027HMSOps\u0027)\t\n\t\tresultRowCount \u003d result.rowCount\n\t\n\tsystem.perspective.print((\u0027Exec: args\u0027,args)) \n\n\treturn result, resultRowCount\n"
            },
            {
              "name": "getPropsColumns",
              "params": [
                "dataset"
              ],
              "script": "\tjsonDefaultColumn \u003d \"\"\"\n  {\n\t    \"field\": \"\",\n\t    \"visible\": true,\n\t    \"editable\": false,\n\t    \"render\": \"auto\",\n\t    \"justify\": \"left\",\n\t    \"align\": \"center\",\n\t    \"resizable\": true,\n\t    \"sortable\": true,\n\t    \"sort\": \"none\",\n\t    \"viewPath\": \"\",\n\t    \"viewParams\": {},\n\t    \"boolean\": \"checkbox\",\n\t    \"number\": \"value\",\n\t    \"progressBar\": {\n\t      \"max\": 100,\n\t      \"bar\": {\n\t        \"color\": \"#62A3F6\",\n\t        \"linecap\": \"round\",\n\t        \"width\": 5\n\t      },\n\t      \"track\": {\n\t        \"color\": \"#DADADA\",\n\t        \"linecap\": \"round\",\n\t        \"width\": 2\n\t      },\n\t      \"value\": {\n\t        \"color\": \"#7D7D7D\",\n\t        \"show\": true\n\t      }\n\t    },\n\t    \"toggleSwitch\": {\n\t      \"color\": {\n\t        \"selected\": \"#2196F3\",\n\t        \"unselected\": \"#FFFFFF\"\n\t      }\n\t    },\n\t    \"numberFormat\": \"0,0.##\",\n\t    \"dateFormat\": \"MM/DD/YYYY\",\n\t    \"width\": \"\",\n\t    \"strictWidth\": false,\n\t    \"header\": {\n\t      \"title\": \"\",\n\t      \"justify\": \"left\",\n\t      \"align\": \"center\",\n\t      \"style\": {\n\t        \"classes\": \"Table/Column_Header\"\n\t      }\n\t    },\n\t    \"footer\": {\n\t      \"title\": \"\",\n\t      \"justify\": \"left\",\n\t      \"align\": \"center\",\n\t      \"style\": {\n\t        \"classes\": \"\"\n\t      }\n\t    },\n\t    \"style\": {\n\t      \"classes\": \"Table/Column_Normal\"\n\t    }\n\t  },\t\n\t\"\"\"\n\n\tcolumnsForced \u003d [\n\t  {\n\t    \"field\": \"name\",\n\t    \"width\": 220,\n\t    \"title\": \"Participant\"\n\t  },\n\t  {\n\t    \"field\": \"program\",\n\t    \"width\": 200,\n\t    \"title\": \"Program\"\n\t  },\n\t  {\n\t    \"field\": \"race\",\n\t    \"width\": 190,\n\t    \"title\": \"Race and Ethnicity\"\n\t  },\n\t  {\n\t    \"field\": \"age\",\n\t    \"width\": 70,\n\t    \"title\": \"Age\"\n\t  },\n\t  {\n\t    \"field\": \"gender\",\n\t    \"width\": 190,\n\t    \"title\": \"Gender\"\n\t  },\n\t  {\n\t    \"field\": \"dateadded\",\n\t    \"width\": 170,\n\t    \"title\": \"Date Added\"\n\t  },\n\t  {\n\t    \"field\": \"referralStatus\",\n\t    \"width\": 100,\n\t    \"title\": \"Referral Status\"\n\t  },\n\t  {\n\t\t\"field\": \"notes\",\n\t\t\"width\": 300,\n\t\t\"title\": \"Notes\"\n\t  },\n\t  {\n\t  \t\"field\": \"participantid\",\n\t  \t\"width\": 40,\n\t  \t\"title\": \"\"\n\t  },\n\t  {\n\t  \t\"field\": \"dateRemoved\",\n\t  \t\"width\": \u0027\u0027,\n\t  \t\"title\": \"\"\n\t  },\n\t  {\n  \t  \t\"field\": \"SSN\",\n  \t  \t\"width\": 40,\n  \t  \t\"title\": \"\"\n  \t  }\n\t  \t  \n\t]\n\n\tcolNames \u003d system.dataset.getColumnHeaders(dataset)\n\tsystem.perspective.print(colNames)\n\t_columns \u003d []\n\tfor col in colNames:\n\t\t# This conversion json_\u003edict create actually deepcopy\n\t\tpyColumn \u003d system.util.jsonDecode(jsonDefaultColumn)\n\t\t\n\t\t# Note: Field must contain only letters and numbers.\n\t\tpyColumn[\u0027field\u0027] \u003d col\n\t\t\n\t\t_dictCol \u003d None\n\t\tfor item in columnsForced:\n\t\t\tif item[\u0027field\u0027] \u003d\u003d pyColumn[\u0027field\u0027]:\n\t\t\t\t_dictCol \u003d item.copy() \n\t\t\t\n\t\t\n\t\t#ystem.perspective.print((_dictCol))\n\t\t\n\t\tpyColumn[\u0027header\u0027][\u0027title\u0027] \u003d _dictCol[\u0027title\u0027] if _dictCol else \u0027\u0027\n\t\t\n\t\tif _dictCol and _dictCol.get(\u0027width\u0027):\n\t\t\tpyColumn[\u0027width\u0027] \u003d _dictCol[\u0027width\u0027]\n\t\t\tpyColumn[\u0027strictWidth\u0027] \u003d True\n\n#\t\tif col \u003d\u003d \u0027facilityId\u0027:\n#\t\t\tpyColumn[\u0027header\u0027][\u0027title\u0027] \u003d \u0027 \u0027\n#\t\t\tpyColumn[\"render\"] \u003d \"view\"\n#\t\t\tpyColumn[\"justify\"] \u003d \"center\"\n#\t\t\tpyColumn[\"resizable\"] \u003d False\n#\t\t\tpyColumn[\"sortable\"] \u003d False\n#\t\t\tpyColumn[\"viewPath\"] \u003d \"1_TEMPLATES/Tables/TableOptions\"\t\n\t\t\n\t\tif col \u003d\u003d \u0027participantid\u0027:\n\t\t\tpyColumn[\u0027header\u0027][\u0027title\u0027] \u003d \u0027 \u0027\n\t\t\tpyColumn[\"render\"] \u003d \"view\"\n\t\t\tpyColumn[\"justify\"] \u003d \"center\"\n\t\t\tpyColumn[\"resizable\"] \u003d False\n\t\t\tpyColumn[\"sortable\"] \u003d False\n\t\t\tpyColumn[\"viewPath\"] \u003d \"1_TEMPLATES/Tables/TableOptions\"\t\n\t\t\t\n\t\tif col \u003d\u003d \u0027dateRemoved\u0027 or col \u003d\u003d \u0027SSN\u0027:\n\t\t\tpyColumn[\"visible\"] \u003d False\n\t\t\tpyColumn[\"editable\"] \u003d False\n\t\t\n\t\tif col \u003d\u003d \u0027notes\u0027 or col \u003d\u003d \u0027referralStatus\u0027:\n\t\t\tpyColumn[\u0027strictWidth\u0027] \u003d False\n\t\t\n\t\tif col \u003d\u003d \"dateadded\" or col \u003d\u003d \"dateremoved\":\n\t\t\tpyColumn[\u0027dateFormat\u0027] \u003d \"MM/DD/YYYY hh:mm\"\t\t\t\n\t\t_columns.append(pyColumn)\n\t\n\t#ystem.perspective.print((\"_columns: \",_columns))\n\t\n\treturn _columns"
            },
            {
              "name": "correctTimeForClient",
              "params": [
                "pyds",
                "columnsToCorrect"
              ],
              "script": "\t\n\t# !!!!!!!!!!!  NOT TESTED !!!!!!!!!!!!!!!!!!!!!!!\n\t\n\t# Table automaticaly change datetime according to client timezone, \n\t# For this table we don\u0027t need automatic conversion, we must recorrect datetimes, according client timezone.\n\t# Actually to see same values like in db.\n\t\n\t# This is correction client against ignition server\n\t# TODO add correction to SQL server\n\tcorrectionTime \u003d int(60*(system.date.getTimezoneOffset() - self.session.props.device.timezone.utcOffset)) \n\t\n\tlistDateFix \u003d [[]*len(columnsToCorrect)]\n\tfor rowIndex, row in enumerate(pyds):\n\t\tfor colIndex, col in enumerate(columnsToCorrect):\n\t\t\tlistDateFix[colIndex].append(system.date.addMinutes(row[col], correctionTime))\n\t\n\n\tfor index, item in enumerate(listDateFix):\n\t\tcolNames \u003d system.dataset.getColumnHeaders(pyds)\n\t\tcolPosition \u003d colNames.index(columnsToCorrect[index])\n\t\tpyds \u003d system.dataset.filterColumns(pyds, [ x for x in colNames if x !\u003d columnsToCorrect[index]])\n\t\tpyds \u003d system.dataset.addColumn(pyds,colPosition,item,columnsToCorrect[index])\n\t\n\treturn pyds\n"
            },
            {
              "name": "setMisc",
              "params": [],
              "script": "\t\n\tself.props.cells.style\u003d {\n\t    \"classes\": \"Table/Cell_Dashboard\"\n\t}\n\t\n\tself.props.style \u003d {\n\t  \"classes\": \"Background/Default\",\n\t  \"overflowX\": \"hidden\"\n\t}\n"
            },
            {
              "name": "doByCondition",
              "params": [
                "payload"
              ],
              "script": "\timport java.lang\n\n\t# 1. Add fetch to payload if not exist. We can send from pager or use value self.view.params.fetch.\n\t# This should be step before offset\n\tfetch \u003d payload.get(\u0027fetch\u0027)\n\t\n\tif not(fetch):\n\t\tfetch \u003d self.view.params.fetch\n\t\n\t# If fetch value is integer greater then 0, pager exist\n\tif fetch and fetch \u003e 1:\n\t\tpayload[\u0027fetch\u0027] \u003d fetch\n\n\t\t#  2. If payload has \u0027offset\u0027, it means that comming from pager. Then take lastPayload \n\t\t# stored as json string, deserialize to python dict and  add node\u0027 offset\u0027\n\t\t# Else means payload is comming from conditions. Don\u0027t do anything just continue\n\t\tif payload.get(\u0027offset\u0027) is not None:\n\t\t\toffset \u003d payload[\u0027offset\u0027]\n\t\t\tpayload \u003d {}\n\t\t\tfor key in self.custom.lastPayload:\n\t\t\t\tpayload[key] \u003d self.custom.lastPayload[key]\n\t\t\t\n\t\t\t\n\t\t\tpayload[\u0027offset\u0027] \u003d offset\n\t\t\tpayload[\u0027fetch\u0027] \u003d fetch\n\t\telse:\n\t\t\tpayload[\u0027offset\u0027] \u003d 0\n\t\n\t# 3. Get data from DB. Data is dataset which contain only fetch number of rows. \n\t# _resultRowCount is scalar value which represent number of rows in case the that query is executed without  OFFSET ... FETCH...\n\t_data, _resultRowCount \u003d self.getDataDb(payload)\n\t\n\tself.view.params.resultRowCount \u003d _resultRowCount\n\n\t# 4. Set some misc props if necessary (explicit)\n\tself.setMisc()\n\n\t# 5. Step get columns props (explicit adjustment)\n\tself.props.columns \u003d self.getPropsColumns(_data)\n\n\t# 6. Correct values in datetime column according client timezone. (check comments inside function)\n\t#_data \u003d self.correctTimeForClient(_data, [\u0027dob\u0027])\n\n\t# 7. Send message to Kpis This is not needed for current residents\n\t#self.sendMessageToKpis(_data)\n\n\t# 8. Add dummy empty raw if result is empty dataset. Reason to do that is to avoid loosing focus on search cell in filters.\n\t_colNames \u003d system.dataset.getColumnHeaders(_data)\n\t\n\tif _data.rowCount \u003d\u003d 0:\n\t\t_lstData \u003d [{col: None for col in _colNames}]\n\telse:\n\t\t_pyds \u003d system.dataset.toPyDataSet(_data)\n\t\t_lstData \u003d [{col: row[col] for col in _colNames} for row in _pyds]\n\n\t\n\t\n\t_makeUped \u003d self.getMakeUpData(_lstData)\n#\tsystem.perspective.print((\u0027_makeUped: \u0027,_makeUped))\n\tself.props.data \u003d _makeUped\n\t\n\tself.custom.jsonLastPayload \u003d system.util.jsonEncode(payload)\n\t\n\t# Remove fetch and offset, it is not necessary to store.\n\tpayload.pop(\u0027offset\u0027,None)\n\tpayload.pop(\u0027fetch\u0027,None)\n\tself.custom.lastPayload \u003d payload\n\t\n\t\n\t\n\n\n"
            },
            {
              "name": "getQuery",
              "params": [],
              "script": "\tdeclaration \u003d \t\"\"\"\nDECLARE \n\t @program NVARCHAR(max) \u003d ?\n\t,@gender NVARCHAR(max) \u003d ?\n\t,@race NVARCHAR(max) \u003d ?\n\t,@minAge INT \u003d ?\n\t,@maxAge INT \u003d ?\n\t,@referralStatus NVARCHAR(max) \u003d ?\n\t,@activeInactive NVARCHAR(max) \u003d ?\n\t,@search_text NVARCHAR(max) \u003d ?\n\t\n\t\"\"\"\n\t\n\tqueryCte \u003d \"\"\"\n\t;WITH rl AS\n\t(\n\t   SELECT *,\n\t         ROW_NUMBER() OVER (PARTITION BY ReferralId ORDER BY timeCreated DESC) AS rank\n\t   FROM participant.ReferralLog\n\t) \n\t\n\t,TableJoin as (\n\t\tSELECT r.name AS name, \n\t\tr.participantid, \n\t\tISNULL(r.programName,\u0027\u0027) AS \u0027program\u0027,\n\t\t--r.[referralDate] AS dateadded,\n\t\t--(SELECT timeCreated FROM [participant].[Referral] pr WHERE pr.participantId \u003d r.participantId AND pr.ProgramId \u003d r.ProgramId AND pr.Type_Id\u003dr.referralTypeId) AS \u0027dateadded\u0027,\n\t\t(SELECT timeCreated FROM [participant].[Referral] pr WHERE pr.id\u003dr.id) AS \u0027dateadded\u0027,\n\t\tp.gender, \n\t\t(SELECT RIGHT(hh.SSN, 4) FROM [participant].[Participant] pp, [humans].[Human] hh WHERE pp.id \u003d r.participantid AND pp.humanId \u003d hh.id) as SSN,\n\t\tp.race, \n\t\tdatediff(year, p.birthdate, getdate()) as \u0027age\u0027, \n\t\trl.comment AS notes, \n\t\tr.referralStatus,\n\t\t\u0027Active\u0027 as ActiveInactive\n\t\tFROM participant.ReferralDashboard  r\n\t\tJOIN participant.Dashboard p ON p.id \u003d r.participantid and r.programName IS NOT NULL AND r.referralStatus in (\u0027Approved\u0027, \u0027Conditionally Approved\u0027) AND CONCAT(r.participantid,r.programName) not in (SELECT CONCAT(participantId,waitingListName) from lodging.Reservation res )\n\t\tLEFT OUTER JOIN rl ON r.id \u003d rl.referralId AND rl.rank \u003d 1 \n\t\tLEFT JOIN participant.ReferralStatus rs ON rl.ReferralStatus_ID \u003d rs.id and r.referralStatus \u003d rs.ReferralStatusName\n\t\t\n\t\tUNION\n\t\t\n\t\tSELECT r.name AS name, \n\t\t\t\tr.participantid, \n\t\t\t\tISNULL(r.programName,\u0027\u0027) AS \u0027program\u0027,\n\t\t\t\t--r.[referralDate] AS dateadded,\n\t\t\t\t--(SELECT timeCreated FROM [participant].[Referral] pr WHERE pr.participantId \u003d r.participantId AND pr.ProgramId \u003d r.ProgramId AND pr.Type_Id\u003dr.referralTypeId) AS \u0027dateadded\u0027,\n\t\t\t\t(SELECT timeCreated FROM [participant].[Referral] pr WHERE pr.id\u003dr.id) AS \u0027dateadded\u0027,\n\t\t\t\tp.gender, \n\t\t\t\t(SELECT RIGHT(hh.SSN, 4) FROM [participant].[Participant] pp, [humans].[Human] hh WHERE pp.id \u003d r.participantid AND pp.humanId \u003d hh.id) as SSN,\n\t\t\t\tp.race, \n\t\t\t\tdatediff(year, p.birthdate, getdate()) as \u0027age\u0027, \n\t\t\t\trl.comment AS notes, \n\t\t\t\tr.referralStatus,\n\t\t\t\t\u0027InActive\u0027 as ActiveInactive\n\t\t\t\tFROM participant.ReferralDashboard  r\n\t\t\t\tJOIN participant.Dashboard p ON p.id \u003d r.participantid and r.programName IS NOT NULL AND r.referralStatus in (\u0027Approved\u0027,\u0027Checked In\u0027,\u0027No Show\u0027) AND CONCAT(r.participantid,r.programName) in (SELECT CONCAT(participantId,waitingListName) from lodging.Reservation res )\n\t\t\t\tLEFT OUTER JOIN rl ON r.id \u003d rl.referralId AND rl.rank \u003d 1 \n\t\t\t\tLEFT JOIN participant.ReferralStatus rs ON rl.ReferralStatus_ID \u003d rs.id and r.referralStatus \u003d rs.ReferralStatusName\n\t\t\n\t\t)\n\t\t\n\t\"\"\"\n\t\n\t\n\tquery \u003d \"\"\"\n\t\tselect DISTINCT\n\t\t[TableJoin].participantid,\n\t\t[TableJoin].name,\n\t\t[TableJoin].program, \n\t\t[TableJoin].race,\n\t\t[TableJoin].age,\n\t\t[TableJoin].gender,  \n\t\t[TableJoin].dateadded,\n\t\t[TableJoin].referralStatus,  \n\t\t[TableJoin].notes,\n\t\t[TableJoin].SSN\n\t\tfrom [TableJoin]\n\t\tWHERE (1\u003d1) \n\t\tAND ( TableJoin.[program] \u003d @program OR @program IS NULL )\n\t\tAND ( TableJoin.[gender] \u003d @gender OR @gender IS NULL)\n\t\tAND ( TableJoin.[race] \u003d @race OR @race IS NULL)\n\t\tAND ( TableJoin.[age] \u003e\u003d @minAge OR @minAge IS NULL)\n\t\tAND ( TableJoin.[age] \u003c\u003d @maxAge OR @maxAge IS NULL)\n\t\tAND ( TableJoin.[referralStatus] \u003d @referralStatus OR @referralStatus IS NULL)\n\t\tAND ( \n\t\t@activeInactive \u003d \u0027All\u0027  \n\t\tOR (( @activeInactive IS NULL OR @activeInactive \u003d \u0027Active\u0027 ) AND (TableJoin.ActiveInactive \u003d \u0027Active\u0027))\n\t\tOR (@activeInactive \u003d \u0027InActive\u0027 AND (TableJoin.ActiveInactive \u003d \u0027InActive\u0027 ))\n\t\t)\n\tAND (\n\t\t@search_text \u003d \u0027\u0027 \n\t\tOR [TableJoin].[name] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\t\tOR [TableJoin].[program] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\t\tOR CAST([TableJoin].[age] AS VARCHAR(20))  LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\t\tOR CONVERT(VARCHAR(10),[TableJoin].[dateadded],101) LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\t\tOR [TableJoin].[notes] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\t\tOR [TableJoin].[race] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\t\tOR [TableJoin].[gender] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\t\tOR [TableJoin].[SSN] LIKE CONCAT(@search_text,\u0027%\u0027)\n\t)\n\t\t\"\"\"\n\torderBy \u003d \"\"\"\nORDER BY [TableJoin].[dateadded] ASC\n\t\"\"\"\n\n\tfetchOffset \u003d \"\"\"\nOFFSET ? ROWS \nFETCH NEXT ? ROWS ONLY;  \n\t\"\"\"\t\n\treturn declaration, queryCte, query, orderBy, fetchOffset\n\n\t\t"
            },
            {
              "name": "XgetQuery",
              "params": [],
              "script": "\tdeclaration \u003d \t\"\"\"\nDECLARE \n\t @program NVARCHAR(max) \u003d ?\n\t,@gender NVARCHAR(max) \u003d ?\n\t,@race NVARCHAR(max) \u003d ?\n\t,@minAge INT \u003d ?\n\t,@maxAge INT \u003d ?\n\t,@referralStatus NVARCHAR(max) \u003d ?\n\t,@activeInactive NVARCHAR(max) \u003d ?\n\t,@search_text NVARCHAR(max) \u003d ?\n\t\n\t\"\"\"\n\t\n\tqueryCte \u003d \"\"\"\n\t;WITH rl AS\n\t(\n\t   SELECT *,\n\t         ROW_NUMBER() OVER (PARTITION BY ReferralId ORDER BY timeCreated DESC) AS rank\n\t   FROM participant.ReferralLog\n\t) \n\t\n\t,TableJoin as (\n\t\tSELECT r.name AS name, \n\t\tr.participantid, \n\t\tISNULL(r.programName,\u0027\u0027) AS \u0027program\u0027,\n\t\tFORMAT(r.[referralDate], \u0027d\u0027, \u0027us\u0027) AS dateadded,\n\t\tp.gender, \n\t\tp.race, \n\t\tdatediff(year, p.birthdate, getdate()) as \u0027age\u0027, \n\t\trl.comment AS notes, \n\t\tr.referralStatus,\n\t\t\u0027Active\u0027 as ActiveInactive\n\t\tFROM participant.ReferralDashboard  r\n\t\tJOIN participant.Dashboard p ON p.id \u003d r.participantid and r.programName IS NOT NULL AND r.referralStatus \u003d \u0027Approved\u0027 AND CONCAT(r.participantid,r.programName) not in (SELECT CONCAT(participantId,waitingListName) from lodging.Reservation res )\n\t\tLEFT OUTER JOIN rl ON r.id \u003d rl.referralId AND rl.rank \u003d 1 \n\t\tLEFT JOIN participant.ReferralStatus rs ON rl.ReferralStatus_ID \u003d rs.id and r.referralStatus \u003d rs.ReferralStatusName\n\t\t\n\t\tUNION\n\t\t\n\t\tSELECT r.name AS name, \n\t\t\t\tr.participantid, \n\t\t\t\tISNULL(r.programName,\u0027\u0027) AS \u0027program\u0027,\n\t\t\t\tFORMAT(r.[referralDate], \u0027d\u0027, \u0027us\u0027) AS dateadded,\n\t\t\t\tp.gender, \n\t\t\t\tp.race, \n\t\t\t\tdatediff(year, p.birthdate, getdate()) as \u0027age\u0027, \n\t\t\t\trl.comment AS notes, \n\t\t\t\tr.referralStatus,\n\t\t\t\t\u0027InActive\u0027 as ActiveInactive\n\t\t\t\tFROM participant.ReferralDashboard  r\n\t\t\t\tJOIN participant.Dashboard p ON p.id \u003d r.participantid and r.programName IS NOT NULL AND r.referralStatus in (\u0027Approved\u0027,\u0027Checked In\u0027,\u0027No Show\u0027) AND CONCAT(r.participantid,r.programName) in (SELECT CONCAT(participantId,waitingListName) from lodging.Reservation res )\n\t\t\t\tLEFT OUTER JOIN rl ON r.id \u003d rl.referralId AND rl.rank \u003d 1 \n\t\t\t\tLEFT JOIN participant.ReferralStatus rs ON rl.ReferralStatus_ID \u003d rs.id and r.referralStatus \u003d rs.ReferralStatusName\n\t\t\n\t\t)\n\t\t\n\t\"\"\"\n\t\n\t\n\tquery \u003d \"\"\"\n\t\tselect DISTINCT\n\t\t[TableJoin].participantid,\n\t\t[TableJoin].name,\n\t\t[TableJoin].program, \n\t\t[TableJoin].race,\n\t\t[TableJoin].age,\n\t\t[TableJoin].gender,  \n\t\t[TableJoin].dateadded,\n\t\t[TableJoin].referralStatus,  \n\t\t[TableJoin].notes\n\t\tfrom [TableJoin]\n\t\tWHERE (1\u003d1) \n\t\tAND ( TableJoin.[program] \u003d @program OR @program IS NULL )\n\t\tAND ( TableJoin.[gender] \u003d @gender OR @gender IS NULL)\n\t\tAND ( TableJoin.[race] \u003d @race OR @race IS NULL)\n\t\tAND ( TableJoin.[age] \u003e\u003d @minAge OR @minAge IS NULL)\n\t\tAND ( TableJoin.[age] \u003c\u003d @maxAge OR @maxAge IS NULL)\n\t\tAND ( TableJoin.[referralStatus] \u003d @referralStatus OR @referralStatus IS NULL)\n\t\tAND ( \n\t\t@activeInactive \u003d \u0027All\u0027  \n\t\tOR (( @activeInactive IS NULL OR @activeInactive \u003d \u0027Active\u0027 ) AND (TableJoin.ActiveInactive \u003d \u0027Active\u0027))\n\t\tOR (@activeInactive \u003d \u0027InActive\u0027 AND (TableJoin.ActiveInactive \u003d \u0027InActive\u0027 ))\n\t\t)\n\tAND (\n\t\t@search_text \u003d \u0027\u0027 \n\t\tOR [TableJoin].[name] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\t\tOR [TableJoin].[program] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\t\tOR CAST([TableJoin].[age] AS VARCHAR(20))  LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\t\tOR CONVERT(VARCHAR(10),[TableJoin].[dateadded],101) LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\t\tOR [TableJoin].[notes] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\t\tOR [TableJoin].[race] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\t\tOR [TableJoin].[gender] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\t)\n\t\t\"\"\"\n\torderBy \u003d \"\"\"\nORDER BY [TableJoin].[dateadded] ASC\n\t\"\"\"\n\n\tfetchOffset \u003d \"\"\"\nOFFSET ? ROWS \nFETCH NEXT ? ROWS ONLY;  \n\t\"\"\"\t\n\treturn declaration, queryCte, query, orderBy, fetchOffset\n\n\t\t"
            },
            {
              "name": "sendMessageToKpis",
              "params": [
                "data"
              ],
              "script": "\t# Send message to KPIs\n\tpayload \u003d {}\n\t\n\t\n#\tif data.rowCount \u003e 0:\n#\t\tpayload[\u0027providerIds\u0027] \u003d []\n#\t\t#payload[\u0027totalReferralsYtd\u0027] \u003d 0\t\n#\t\tfor rowIndex, row in enumerate(system.dataset.toPyDataSet(data)):\n#\t\t\tpayload[\u0027providerIds\u0027].append(row[\u0027id\u0027])\n\t\n\tsystem.perspective.sendMessage(\u0027mhProviderDashboardKpiHeader\u0027,payload)\n\t\n\tsendMessageToKpis"
            },
            {
              "name": "getMakeUpData",
              "params": [
                "lstData"
              ],
              "script": "\t\n\n\t_style \u003d {\t\"color\": \"#0c4e85\",\n\t\t\t\t\"cursor\": \"pointer\",\n\t\t\t\t\"fontFamily\": \"Proxima Nova ExCn Medium\",\n\t\t\t\t\"text-align\": \"left\"}\n\t_normalStyle \u003d {\"classes\":\"Table/Column_Normal\"}\t\t\t\n\n\n\tfor row in lstData:\n\t\tfor key in row:\n\t\t\tif key \u003d\u003d \u0027name\u0027:\n\t\t\t\trow[key] \u003d {\u0027value\u0027: row[key] if row[key] is not None else \u0027\u0027, \"style\": _style}\n\t\t\telse:\n\t\t\t\trow[key] \u003d {\u0027value\u0027: row[key] if row[key] is not None else \u0027\u0027, \"style\": _normalStyle}\n\treturn lstData"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "mhByCondition",
              "pageScope": true,
              "script": "\t#ystem.perspective.print((\u0027Msgstep1\u0027))\n\tself.doByCondition(payload)",
              "sessionScope": false,
              "viewScope": false
            },
            {
              "messageType": "tableToExcel",
              "pageScope": true,
              "script": "\t# implement your handler here\n\timport traceback\n\ttry:\n\t\t#Send the dataset to Excel\n\t\tfilename \u003d \u0027shelter_waitingList_\u0027 + str(system.date.format(system.date.now(),\"yyyyMMddHHmmss\")) + \u0027.xls\u0027\n\t\tdataset \u003d self.props.data\n\t\tsystem.perspective.print(dataset)\n\t\tNewDataSet \u003d []\n\t\theaders \u003d [\"Participant\",\"Program\",\"Race and Ethnicity\",\"Age\",\"Gender\",\"Date Added\",\"Referral Status\",\"Notes\"]\n\t\tfor row in range(0,len(dataset)):\n\t\t\tageValue \u003d dataset[row][\u0027age\u0027][\u0027value\u0027]\n\t\t\tif ageValue is None or ageValue \u003d\u003d \"\":\n\t\t\t\tageValue \u003d -1\n\t\t\tNewDataSet.append([dataset[row][\u0027name\u0027][\u0027value\u0027],dataset[row][\u0027program\u0027][\u0027value\u0027],dataset[row][\u0027race\u0027][\u0027value\u0027],ageValue,dataset[row][\u0027gender\u0027][\u0027value\u0027],dataset[row][\u0027dateadded\u0027][\u0027value\u0027],dataset[row][\u0027dateadded\u0027][\u0027value\u0027],dataset[row][\u0027notes\u0027][\u0027value\u0027]])\t\n\t\tNewDataSet \u003d system.dataset.toDataSet(headers, NewDataSet)\n\t\tsystem.perspective.print(\"dataset:\" + \"NewDataSet\")\n\t\txlFile \u003d system.dataset.toExcel(True,NewDataSet)\n\t\tsystem.perspective.download(filename, xlFile)\n\texcept:   \n\t\tlogger \u003d system.util.getLogger(\"Shelter WaitingList tableToExcel\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)",
              "sessionScope": true,
              "viewScope": true
            }
          ]
        },
        "type": "ia.display.table"
      }
    ],
    "custom": {
      "_test": false
    },
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "custom._test": {
        "onChange": {
          "enabled": null,
          "script": "\tif previousValue is not None and currentValue is not None:\n\t\tif previousValue.value \u003d\u003d 0 and currentValue.value \u003d\u003d 1:\n\t\t\tself.getChild(\"Table\").doByCondition({})"
        }
      }
    },
    "props": {
      "direction": "column",
      "justify": "space-around",
      "style": {
        "overflow": "visible"
      }
    },
    "type": "ia.container.flex"
  }
}