{
  "custom": {
    "currentSeasonId": "14",
    "data": [],
    "function": 0
  },
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\tself.custom.function \u003d 0\n\tself.params.reservationId \u003d -1\n\tself.session.custom.dateRangeFromDate \u003d system.date.now()\n\tself.session.custom.dateRangeToDate \u003d system.date.parse((system.date.format(system.date.addDays(system.date.now(), 1) , \u0027MM-dd-yyyy\u0027) + \u0027 11:59:59 PM\u0027),\u0027MM-dd-yyyy hh:mm:ss a\u0027) \n\tself.session.custom.selectedDateRange \u003d \u0027End of Next Day\u0027"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "facilityID": 4,
    "reservationId": -1
  },
  "propConfig": {
    "custom.currentSeasonId": {
      "binding": {
        "config": {
          "queryPath": "WinterShelterGlobal/getCurrentSeason"
        },
        "transforms": [
          {
            "code": "\treturn value.getValueAt(0,\u0027id\u0027)",
            "type": "script"
          },
          {
            "formatType": "numeric",
            "formatValue": "integer",
            "type": "format"
          }
        ],
        "type": "query"
      },
      "persistent": true
    },
    "custom.data": {
      "persistent": true
    },
    "custom.function": {
      "persistent": true
    },
    "params.facilityID": {
      "onChange": {
        "enabled": null,
        "script": "\tif origin \u003d\u003d \"Browser\":\n\t\tif currentValue.value \u003e\u003d 0:\n\t\t\tself.custom.function \u003d 1"
      },
      "paramDirection": "input",
      "persistent": true
    },
    "params.reservationId": {
      "paramDirection": "inout",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 290
    },
    "loading": {
      "mode": "blocking"
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView Header"
        },
        "position": {
          "basis": "25px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.Text": {
            "binding": {
              "config": {
                "expression": "if({view.params.reservationId} \u003d -1, \"New Reservation\",\"Edit Reservation\")"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "path": "Shelter/Reservation/Cards/New Reservation/ReservationHeader"
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "meta": {
              "name": "EmbeddedView Dates Input"
            },
            "position": {
              "basis": "45%"
            },
            "propConfig": {
              "props.params.beginDate": {
                "binding": {
                  "config": {
                    "expression": "if(isnull({view.custom.data[0].timeCreated}),\r\n\tnow(0),\r\n\tfromMillis({view.custom.data[0].timeCreated}))\r\n\r\n\r\n"
                  },
                  "enabled": false,
                  "type": "expr"
                }
              },
              "props.params.endDate": {
                "binding": {
                  "config": {
                    "expression": "if(isnull({view.custom.data[0].timeCreated}),\r\n\tnow(0),\r\n\tfromMillis({view.custom.data[0].timeCreated}))\r\n\r\n\r\n"
                  },
                  "enabled": false,
                  "type": "expr"
                }
              }
            },
            "props": {
              "params": {
                "beginDate": {
                  "$": [
                    "ts",
                    192,
                    1612787968787
                  ],
                  "$ts": 1612787968787
                },
                "endDate": {
                  "$": [
                    "ts",
                    192,
                    1612786131705
                  ],
                  "$ts": 1612786131705
                },
                "selectedBeginDate": "11/25/2024 23:51",
                "selectedEndDate": "11/26/2024 23:59"
              },
              "path": "Shelter/Reservation/Cards/New Reservation/Input_new"
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "EmbeddedView Notes"
            },
            "position": {
              "basis": "55%"
            },
            "propConfig": {
              "props.params.CaseNote": {
                "binding": {
                  "config": {
                    "expression": "if(isnull({view.custom.data[0].notes}),\r\n\t\"\",\r\n\t{view.custom.data[0].notes})\r\n"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "path": "Shelter/Reservation/Cards/New Reservation/Note",
              "style": {
                "classes": "InputCards/InputCard",
                "marginRight": 10
              }
            },
            "type": "ia.display.view"
          }
        ],
        "meta": {
          "name": "DatesAndNotes"
        },
        "position": {
          "basis": "60px"
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "EmbeddedView Inputs"
        },
        "position": {
          "basis": "120px"
        },
        "propConfig": {
          "props.params.endDate": {
            "binding": {
              "config": {
                "path": "../DatesAndNotes/EmbeddedView Dates Input.props.params.selectedEndDate"
              },
              "type": "property"
            }
          },
          "props.params.facilityId": {
            "binding": {
              "config": {
                "path": "view.params.facilityID"
              },
              "type": "property"
            }
          },
          "props.params.startDate": {
            "binding": {
              "config": {
                "path": "../DatesAndNotes/EmbeddedView Dates Input.props.params.selectedBeginDate"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "bedId": -1,
            "participantId": -1,
            "prescribedControlledSubstances": -1,
            "programId": -1,
            "providerId": -1,
            "providerTypeId": -1,
            "reasonForEntryId": -1,
            "roomId": -1,
            "waitingList": -1
          },
          "path": "Shelter/Reservation/Cards/New Reservation/ServiceTemplate_New",
          "style": {
            "marginLeft": "17px",
            "marginRight": "10px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tself.view.params.reservationId \u003d -1\n\tself.parent.parent.getChild(\"DatesAndNotes\").getChild(\"EmbeddedView Notes\").props.params.CaseNote \u003d \u0027\u0027\n#\tself.parent.parent.getChild(\"DatesAndNotes\").getChild(\"EmbeddedView Dates Input\").props.params.beginDate \u003d system.date.now()\n#\tself.parent.parent.getChild(\"DatesAndNotes\").getChild(\"EmbeddedView Dates Input\").props.params.endDate \u003d system.date.now()\n\tself.session.custom.dateRangeFromDate \u003d system.date.now()\n\tself.session.custom.dateRangeToDate \u003d system.date.now()\n\tsystem.perspective.sendMessage(\"reservationselected\",payload \u003d {\u0027facilityId\u0027:-1,\u0027reservationId\u0027:-1, \u0027bedId\u0027:-1, \u0027participantId\u0027:-1, \u0027roomId\u0027:-1, \u0027waitListName\u0027:\u0027\u0027, \u0027programId\u0027:-1, \u0027providerId\u0027:-1, \u0027providerTypeId\u0027:-1, \u0027reservationType\u0027:\u0027\u0027, \u0027ReasonForEntryId\u0027:-1, \u0027prescribedControlledSubstance\u0027:-1},scope\u003d\u0027session\u0027)\n\tsystem.perspective.sendMessage(\"ClearRowSelection_reservation\",payload \u003d {},scope\u003d\u0027session\u0027)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button"
            },
            "position": {
              "basis": "100px",
              "shrink": 0
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "expression": "{session.custom.isManager} || {session.custom.isWSManager} || {session.custom.isCareCoordinator} || {session.custom.isAdministrator} || {session.custom.isSupportCoordinator} || {session.custom.isWSSupportCoordinator}"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Secondary",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              },
              "text": "New"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\t#\tsystem.perspective.print(\"In Save\")\n\tproject \u003d \"HMS\"\n\tself.parent.custom.ReservationSaved \u003d 0\n\tRefresh \u003d 1\n\terrorMessage \u003d \"\"\n\t# assign and validate these parameters \n\tproviderTypeId \u003d None\n\tproviderId \u003d None\n\tprogramId \u003d None\n\treferralId \u003d None\n\treasonForEntryId \u003d None\n\tprescribedControlledSubstance \u003d self.parent.parent.getChild(\"EmbeddedView Inputs\").props.params.prescribedControlledSubstances\n\twaitingListName \u003d self.parent.parent.getChild(\"EmbeddedView Inputs\").props.params.waitingList\n\twaitingListName \u003d str(waitingListName).strip()\n\tsystem.perspective.print(waitingListName)\n\treservationType \u003d None\n\treferralStatus \u003d None\n\t#system.perspective.print(\u0027started\u0027)\n\t## Check if parameters are filled in correctly \n\tgenderMismatch \u003d False\n\tvalid \u003d True\n\tif int(self.view.getChild(\"root\").custom.selectedParticipantId) \u003c 0:\n\t\t#system.perspective.print(\u0027participant invalid\u0027)\n\t\terrorMessage \u003d \"Please select participant\"\n\t\tvalid \u003d False\n\telif int(self.view.getChild(\"root\").custom.selectedRoomId) \u003c 0:\n\t\t#system.perspective.print(\u0027room invalid\u0027)\n\t\terrorMessage \u003d \"Please select room\"\n\t\tvalid \u003d False\n\telif int(self.view.getChild(\"root\").custom.selectedBedId) \u003c 0:\n\t\t#system.perspective.print(\u0027bed invalid\u0027)\n\t\terrorMessage \u003d \"Please select bed\"\n\t\tvalid \u003d False\n\telif self.view.getChild(\"root\").custom.selectedBeginDate is None:\n\t\t#system.perspective.print(\u0027start date invalid\u0027)\n\t\terrorMessage \u003d \"Please select reservation start\"\n\t\tvalid \u003d False\n\telif self.view.getChild(\"root\").custom.selectedEndDate is None:\n\t\terrorMessage \u003d \"Please select reservation end\"\n\t\t#system.perspective.print(\u0027end date invalid\u0027)\n\t\tvalid \u003d False\n\telif int(prescribedControlledSubstance) \u003c 0:\n\t\terrorMessage \u003d \"Please set Prescribed Controlled Substance\"\n\t\tvalid \u003d False\n\telif self.view.getChild(\"root\").custom.selectedEndDate  is not None and self.view.getChild(\"root\").custom.selectedBeginDate is not None:\n\t\tBeginDateTest \u003d system.date.parse(self.view.getChild(\"root\").custom.selectedBeginDate,\u0027MM/dd/yyyy hh:mm\u0027)\n\t\tEndDateTest \u003d system.date.parse(self.view.getChild(\"root\").custom.selectedEndDate,\u0027MM/dd/yyyy hh:mm\u0027) \n\t\tif system.date.isBefore(EndDateTest, BeginDateTest):\t\t\t\n\t\t\terrorMessage \u003d \"Reservation End cannot be earlier than reservation start\"\n\t\t\tvalid \u003d False\n\t\telse:\n\t\t\t##### need to add condition to check double booking\n\t#\t\tquery \u003d \"\"\" SELECT * FROM lodging.Reservation WHERE participantId \u003d ?\n\t#\t\t\t\tAND ((? BETWEEN (SELECT reservationStart FROM lodging.Reservation WHERE participantId \u003d ? AND timeRetired IS NULL)\n\t#\t\t\t\t\tAND (SELECT reservationEnd FROM lodging.Reservation WHERE participantId \u003d ? AND timeRetired IS NULL))\n\t#\t\t\t\tOR (? BETWEEN (SELECT reservationStart FROM lodging.Reservation WHERE participantId \u003d ? AND timeRetired IS NULL)\n\t#\t\t\t\t\tAND (SELECT reservationEnd FROM lodging.Reservation WHERE participantId \u003d ? AND timeRetired IS NULL)))\n\t#\t\t\t\tAND timeRetired IS NULL\n\t#\t\t\t\tAND reservationExpiration IS NULL \"\"\"\n\t\t\tqueryOld \u003d \"\"\" SELECT * FROM lodging.Reservation WHERE participantId \u003d ?\n\t\t\t\t\tAND (((SELECT reservationStart FROM lodging.Reservation WHERE participantId \u003d ? AND timeRetired IS NULL) \n\t\t\t\t\tBETWEEN ? AND ?)\n\t\t\t\t\tOR ((SELECT reservationEnd FROM lodging.Reservation WHERE participantId \u003d ? AND timeRetired IS NULL) \n\t\t\t\t\tBETWEEN ? AND ?))\n\t\t\t\t\tAND timeRetired IS NULL\n\t\t\t\t\tAND reservationExpiration IS NULL \"\"\"\n\t\t\tquery \u003d \"\"\"\n\t\t\tSELECT * FROM lodging.Reservation WHERE participantId \u003d ?\n\t\t\tAND (? \n\t\t\tBETWEEN (SELECT MIN(reservationStart) FROM lodging.Reservation WHERE participantId \u003d ? AND timeRetired IS NULL AND reservationExpiration IS NULL) AND \n\t\t\t(SELECT MAX(reservationEnd) FROM lodging.Reservation WHERE participantId \u003d ? AND timeRetired IS NULL AND reservationExpiration IS NULL)\n\t\t\tOR\n\t\t\t? \n\t\t\tBETWEEN (SELECT MIN(reservationStart) FROM lodging.Reservation WHERE participantId \u003d ? AND timeRetired IS NULL AND reservationExpiration IS NULL) AND \n\t\t\t(SELECT MAX(reservationEnd) FROM lodging.Reservation WHERE participantId \u003d ? AND timeRetired IS NULL AND reservationExpiration IS NULL)\n\t\t\t\n\t\t\tOR\n\t\t\t(\n\t\t\t(SELECT MIN(reservationStart) FROM lodging.Reservation WHERE participantId \u003d ? AND timeRetired IS NULL AND reservationExpiration IS NULL)\n\t\t\tBETWEEN ? AND ?)\n\t\t\tOR\n\t\t\t(\n\t\t\t(SELECT MAX(reservationEnd) FROM lodging.Reservation WHERE participantId \u003d ? AND timeRetired IS NULL AND reservationExpiration IS NULL)\n\t\t\tBETWEEN ? AND ?)\n\t\t\t)\n\t\t\tAND timeRetired IS NULL\n\t\t\tAND reservationExpiration IS NULL\n\t\t\t\"\"\"\n\t\t\tparticipantID \u003d self.view.getChild(\"root\").custom.selectedParticipantId\n\t\t\tbeginDate \u003d self.view.getChild(\"root\").custom.selectedBeginDate\n\t\t\tendDate \u003d self.view.getChild(\"root\").custom.selectedEndDate\n\t#\t\tDuplicateEntry \u003d system.db.runPrepQuery(query,[participantID,participantID,beginDate,endDate,participantID,beginDate,endDate], \"HMSOps\")\n\t\t\tDuplicateEntry \u003d system.db.runPrepQuery(query,[participantID,beginDate,participantID, participantID, endDate,participantID,participantID,participantID, beginDate, endDate,participantID, beginDate, endDate], \"HMSOps\")\n\t\t\tsystem.perspective.print(message\u003dDuplicateEntry, destination\u003d\"gateway\")\n\t\t\tif DuplicateEntry is not None and DuplicateEntry.getRowCount()\u003e0 and self.view.params.reservationId \u003d\u003d -1: \n\t\t\t\t## do not allow only in case of new reservation\n\t\t\t\terrorMessage \u003d \"Participant already has a reservation.\"\n\t\t\t\tvalid \u003d False\n\t\t\telse:\n\t\t\t\tsystem.perspective.print(\"in duplicate else\")\n\t\t\t\t\n\t\t\t\tif waitingListName \u003d\u003d \u0027Quick Referral\u0027:\n\t\t\t\t\t\t\tsystem.perspective.print(\"QR 1\")\n\t\t\t\t\t\t\tproviderTypeId \u003d self.parent.parent.getChild(\"EmbeddedView Inputs\").props.params.providerTypeId\n\t\t\t\t\t\t\tproviderId \u003d self.parent.parent.getChild(\"EmbeddedView Inputs\").props.params.providerId\n\t\t\t\t\t\t\tprogramId \u003d self.parent.parent.getChild(\"EmbeddedView Inputs\").props.params.programId\n\t\t\t\t\t\t\treasonForEntryId \u003d self.parent.parent.getChild(\"EmbeddedView Inputs\").props.params.reasonForEntryId\n\t\t\n\t\t\t\t\t\t\tif providerTypeId \u003c 0:\n\t\t\t\t\t\t\t\tsystem.perspective.print(\"QR 1.1\")\n\t\t\t\t\t\t\t\terrorMessage \u003d \"Must select Provider Type\"\n\t\t\t\t\t\t\t\tvalid \u003d False\n\t\t\t\t\t\t\telif providerId \u003c 0:\n\t\t\t\t\t\t\t\tsystem.perspective.print(\"QR 1.2\")\n\t\t\t\t\t\t\t\terrorMessage \u003d \"Must select Provider\"\n\t\t\t\t\t\t\t\tvalid \u003d False\n\t\t\t\t\t\t\tif programId \u003c 0:\n\t\t\t\t\t\t\t\tsystem.perspective.print(\"QR 1.3\")\n\t\t\t\t\t\t\t\terrorMessage \u003d \"Must select Program\"\n\t\t\t\t\t\t\t\tvalid \u003d False\n\t\t\t\t\t\t\tif int(providerTypeId)\u003d\u003d7 and int(reasonForEntryId) \u003c 0:\n\t\t\t\t\t\t\t\tsystem.perspective.print(\"QR 1.4\")\n\t\t\t\t\t\t\t\terrorMessage \u003d \"Must select Reason for Entry\"\n\t\t\t\t\t\t\t\t#system.perspective.print(\u0027end date invalid\u0027)\n\t\t\t\t\t\t\t\tvalid \u003d False\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsystem.perspective.print(\"QR 2\")\n\t\t\t\t\t\t\twaitingListName \u003d None\n\t\t\t\t\t\t\treservationType \u003d \"Quick Referral\"\n\t\t\t\t\t\t\treferralStatus \u003d \"Approved\"\n\t\t\t\t\t\t\t\n\t\t\t\telif waitingListName !\u003d -1:\n\t\t\t\t\t\t\t# there is a waiting list selected\n\t\t\t\t\t\t\tsystem.perspective.print(\"stmt 1\")\n\t\t\t\t\t\t\tsystem.perspective.print(\"Else part, waiting list name\" + str(waitingListName))\n\t\t\t\t\t\t\treservationType \u003d \"Waiting List\"\n\t\t\t\t\t\t\treferralStatus \u003d \"Approved\"\n\t\t\t\t\t\t\t## Also select the provider id and program Id for selected participant associated with waiting list\n\t\t\t\t\t\t\tif waitingListName !\u003d \"All\":\n\t\t\t\t\t\t\t\tsystem.perspective.print(\"all wait list fasle\")\n\t\t\t\t\t\t\t\tquery \u003d \"\"\" select TOP 1 r.programId, r.providerId, r.id, r.ReasonForEntryId from \n\t\t\t\t\t\t\t\tparticipant.ReferralDashboard  r \n\t\t\t\t\t\t\t\twhere r.referralStatus \u003d \u0027Approved\u0027 and r.programName \u003d ? and r.participantid \u003d ? AND r.id not in \n\t\t\t\t\t\t\t\t (SELECT DISTINCT COALESCE(referralId,0) FROM lodging.reservation ) \n\t\t\t\t\t\t\t\t ORDER BY r.id desc\"\"\"\n\t\t\t\t\t\t\t\tsystem.perspective.print(query)\n\t\t\t\t\t\t\t\tparticipantID \u003d self.view.getChild(\"root\").custom.selectedParticipantId\n\t\t\t\t\t\t\t\tprogramAndProvider \u003d system.db.runPrepQuery(query,[waitingListName,participantID], \"HMSOps\")\n\t\t\t\t\t\t\t\tif programAndProvider is not None and len(programAndProvider) \u003e 0:\n\t\t\t\t\t\t\t\t\t#system.perspective.print(\"pp not none\")\n\t\t\t\t\t\t\t\t\tprogramId \u003d programAndProvider[0][0]\n\t\t\t\t\t\t\t\t\t#system.perspective.print(\"pp not none 1\")\n\t\t\t\t\t\t\t\t\tproviderId \u003d programAndProvider[0][1]\n\t\t\t\t\t\t\t\t\t#system.perspective.print(\"pp not none 2\")\n\t\t\t\t\t\t\t\t\treferralId \u003d programAndProvider[0][2]\n\t\t\t\t\t\t\t\t\t#system.perspective.print(\"pp not none 3\")\n\t\t\t\t\t\t\t\t\treasonForEntryId \u003d programAndProvider[0][3]\n#\t\t\t\t\t\t\t\telse:\n#\t\t\t\t\t\t\t\t\tvalid \u003d False\n#\t\t\t\t\t\t\t\t\terrorMessage \u003d \u0027Waiting list data is missing, please use Quick Referral for creating reservation\u0027\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\telse:\n\t\t#\t\t\t\t\t\tsystem.perspective.print(\"in all wait list\")\n\t\t\t\t\t\t\t\tquery \u003d \"\"\" select TOP 1 r.programId, r.providerId, r.id, r.ReasonForEntryId from \n\t\t\t\t\t\t\t\tparticipant.ReferralDashboard  r \n\t\t\t\t\t\t\t\twhere r.referralStatus \u003d \u0027Approved\u0027 and r.participantid \u003d ? AND r.id NOT IN\n\t\t\t\t\t\t\t\t(SELECT DISTINCT COALESCE(referralId,0) FROM lodging.reservation )\n\t\t\t\t\t\t\t\tORDER BY r.id desc\n\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tparticipantID \u003d self.view.getChild(\"root\").custom.selectedParticipantId\n\t\t\t\t\t\t\t\tprogramAndProvider \u003d system.db.runPrepQuery(query,[participantID], \"HMSOps\")\n\t\t\t\t\t\t\t\tif programAndProvider is not None and len(programAndProvider) \u003e 0:\n\t\t\t\t\t\t\t\t\tsystem.perspective.print(\"all wait lsit dataset is not none\")\n\t\t\t\t\t\t\t\t\tprogramId \u003d programAndProvider[0][0]\n\t\t\t\t\t\t\t\t\tproviderId \u003d programAndProvider[0][1]\n\t\t\t\t\t\t\t\t\treferralId \u003d programAndProvider[0][2]\n\t\t\t\t\t\t\t\t\treasonForEntryId \u003d programAndProvider[0][3]\n\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\tsystem.perspective.print(\"all wait lsit dataset none\")\n#\t\t\t\t\t\t\t\t\tvalid \u003d False\n#\t\t\t\t\t\t\t\t\terrorMessage \u003d \u0027Waiting list data is missing, please use Quick Referral for creating reservation\u0027\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\n\t### Check if data is valid otherwise show error message.\n\tif valid:\n\t\tsystem.perspective.print(\u0027data valid\u0027)\n\t\ttry:\n\t\t\t### Check if the user is creating new data\n\t\t\n\t\t\tBeginDate \u003d system.date.parse(self.view.getChild(\"root\").custom.selectedBeginDate,\u0027MM/dd/yyyy HH:mm\u0027)\n\t\t\tEndDate \u003d system.date.parse(self.view.getChild(\"root\").custom.selectedEndDate,\u0027MM/dd/yyyy HH:mm\u0027) \n\t\t\t\n\t\t\tif int(self.view.params.reservationId) \u003d\u003d -1:\n#\t\t\t\tsystem.perspective.print(\"calling named q\")\n#\t\t\t\tsystem.perspective.print(\"provider id \" + str(providerId))\n#\t\t\t\tsystem.perspective.print(\"program id \" + str(programId))\n#\t\t\t\tsystem.perspective.print(\"providerTypeId \" + str(providerTypeId))\n\t\t\t\t\n\t\t\t\tpath \u003d \"Shelter/Reservations/CreateNewReservation\"\n\t\t\t\tparameters \u003d {\"bedId\": self.view.getChild(\"root\").custom.selectedBedId,\"participantId\": self.view.getChild(\"root\").custom.selectedParticipantId,\"notes\": self.view.getChild(\"root\").custom.addedNotes,\"reservationStart\":BeginDate, \"reservationEnd\":EndDate, \"providerTypeId\":providerTypeId, \"providerId\":providerId, \"programId\":programId, \"waitingListName\":waitingListName, \"reservationType\":reservationType, \"referralStatus\":referralStatus, \"referralId\":referralId, \"reasonForEntryId\":reasonForEntryId, \"prescribedControlledSubstance\":prescribedControlledSubstance}\n\t\t\t\tsystem.perspective.print(parameters)\n\t\t\t\tNewReservation \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\t\t\n\t\t\t\t\n\t\t\t\t## also create a program\n\t\t\t\tsystem.perspective.print(\"in new res :\")\n\t\t\t\tsystem.perspective.print(\"programId : \" + str(programId))\n\t\t\t\tsystem.perspective.print(\"reservationType : \" + str(reservationType))\n\t\t\t\tif programId is not None and reservationType \u003d\u003d \u0027Quick Referral\u0027: ## added check as per ticket #147\n\t\t\t\t\tpath \u003d \"Participants/Enrollments/ParticipantAddSelectedEnrollments\"\n\t\t\t\t\tparams \u003d {\"participantId\":self.view.getChild(\"root\").custom.selectedParticipantId,\"programId\":programId}\n\t\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\n\t\t\t\t\t\n\t\t\t\t\t## Ticket 308 - Yogini Marathe - Call a named query to insert the audit log\n\t\t\t\t\tif programId not in self.view.getChild(\"root\").custom.selectedPrograms:\n\t\t\t\t\t\tquery_insert_log \u003d \"Participants/Enrollments/AddEnrollmentLog\"\n\t\t\t\t\t\tquery_insert_log_params \u003d {\"participantId\": self.view.getChild(\"root\").custom.selectedParticipantId, \"programId\": programId, \"action\":\"Reservation Entry\", \"userName\":self.session.props.auth.user.userName}\n\t\t\t\t\t\tsystem.db.runNamedQuery(query_insert_log, query_insert_log_params)\n\t\t\t\t\t\n\t\t\t\t\t## End Ticket 308\n\t\t\t\t\n\t\t\t\tif NewReservation is not None and NewReservation.getRowCount() \u003e 0:\n\t\t\t\t\tself.view.params.reservationId  \u003d NewReservation.getValueAt(0,0)\n\t\t\t\t\tself.parent.custom.ReservationSaved \u003d 1\n\t\t\t\t\tself.getSibling(\"Label\").showMessage(\"Reservation Saved Successfully\")\n\t\t\t\t\n\t\t\t\t\tself.session.custom.dateRangeFromDate \u003d system.date.now()\n\t\t\t\t\tself.session.custom.dateRangeToDate \u003d system.date.now()\n\t\t\t\t\tsystem.perspective.print(self.view.params.reservationId)\n\t\t\t\t\t## Add the log entry\n\t\t\t\t\tpath \u003d \"Shelter/AuditLog/AddAuditLogEntry\"\n\t\t\t\t\tparams \u003d {\"bedLogId\":-1,\"reservationId\":int(self.view.params.reservationId), \"bedId\": self.view.getChild(\"root\").custom.selectedBedId,\"participantId\": self.view.getChild(\"root\").custom.selectedParticipantId, \"action\":\u0027New Reservation\u0027, \"employeeId\":self.session.custom.loggedInStaffEmployeeID, \"userName\": self.session.props.auth.user.userName}\n\t\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparams)\n\t\t\t\telse:\n\t\t\t\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\n\t\t\t\t\tRefresh \u003d 0\n\t\t\t##### Check if the user is editing existing data\n\t\t\telif int(self.view.params.reservationId) \u003e -1:\n\t\t\t\tsystem.perspective.print(\"update\")\n\t\t\t\t## check if programId etc is None , query from the reservation table itself\n\t\t\t\tif programId is None or providerId is None or providerTypeId is None:\n\t\t\t\t\tselectResQ \u003d \"\"\"SELECT programId, providerId, providerTypeId, referralId\n\t\t\t\t\tFROM lodging.Reservation WHERE id \u003d ?\"\"\"\n\t\t\t\t\tresData \u003d system.db.runPrepQuery(selectResQ, [int(self.view.params.reservationId)]) \n\t\t\t\t\tif resData is not None and resData.getRowCount() \u003e 0:\n\t\t\t\t\t\tprogramId \u003d resData.getValueAt(0,\u0027programId\u0027)\n\t\t\t\t\t\tproviderId \u003d resData.getValueAt(0,\u0027providerId\u0027)\n\t\t\t\t\t\tproviderTypeId \u003d resData.getValueAt(0,\u0027providerTypeId\u0027)\n\t\t\t\t# Get referral Id\n\t\t\t\tgetReferralIdQ \u003d \"\"\"SELECT referralId\n\t\t\t\t\t\t\t\t\tFROM lodging.Reservation WHERE id \u003d ?\"\"\"\n\t\t\t\tgetReferralId \u003d system.db.runPrepQuery(getReferralIdQ, [int(self.view.params.reservationId)]) \n#\t\t\t\tsystem.perspective.print(\u0027getReferralId\u0027+str(getReferralId))\n\t\t\t\treferralId \u003d getReferralId.getValueAt(0,\u0027referralId\u0027)\n\t\t\t\tsystem.perspective.print(\u0027referralId\u0027+str(referralId))\n\t\t\t\tpath \u003d \"Shelter/Reservations/UpdateReservation\"\n\t\t\t\tparameters \u003d {\"bedId\": self.view.getChild(\"root\").custom.selectedBedId,\"participantId\": self.view.getChild(\"root\").custom.selectedParticipantId,\"notes\": self.view.getChild(\"root\").custom.addedNotes,\"reservationStart\":BeginDate, \"reservationEnd\":EndDate, \"reservationID\" : self.view.params.reservationId, \"providerTypeId\":providerTypeId, \"providerId\":providerId, \"programId\":programId, \"waitingListName\":waitingListName, \"reservationType\":reservationType, \"reasonForEntryId\":reasonForEntryId, \"referralId\":referralId, \"prescribedControlledSubstance\":prescribedControlledSubstance}\n\t\t\t\tsystem.perspective.print(parameters)\n\t\t\t\tNewReservation \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\n\t\t\t\tself.getSibling(\"Label\").showMessage(\"Reservation Updated Successfully\")\n\t\t\t\tself.parent.custom.ReservationSaved \u003d 1\t\n\t\t\t\tself.session.custom.dateRangeFromDate \u003d system.date.now()\n\t\t\t\tself.session.custom.dateRangeToDate \u003d system.date.parse((system.date.format(system.date.addDays(system.date.now(), 1) , \u0027MM-dd-yyyy\u0027) + \u0027 11:59:59 PM\u0027),\u0027MM-dd-yyyy hh:mm:ss a\u0027) \n\t\t\t\tself.session.custom.selectedDateRange \u003d \u0027End of Next Day\u0027\t\n\t\t\t\tif programId is not None and reservationType \u003d\u003d \u0027Quick Referral\u0027:\n\t\t\t\t\t## also create a program\n\t\t\t\t\tsystem.perspective.print(\"ParticipantAddSelectedEnrollments\")\n\t\t\t\t\tpath \u003d \"Participants/Enrollments/ParticipantAddSelectedEnrollments\"\n\t\t\t\t\tsystem.perspective.print(programId)\n\t\t\t\t\tparams \u003d {\"participantId\":self.view.getChild(\"root\").custom.selectedParticipantId,\"programId\":programId}\n\t\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\n\t\t\t\t\t\n\t\t\t\t\t## Ticket 308 - Yogini Marathe - Call a named query to insert the audit log\n\t\t\t\t\tif programId not in self.view.getChild(\"root\").custom.selectedPrograms:\n\t\t\t\t\t\tquery_insert_log \u003d \"Participants/Enrollments/AddEnrollmentLog\"\n\t\t\t\t\t\tquery_insert_log_params \u003d {\"participantId\": self.view.getChild(\"root\").custom.selectedParticipantId, \"programId\": programId, \"action\":\"Reservation Entry\", \"userName\":self.session.props.auth.user.userName}\n\t\t\t\t\t\tsystem.db.runNamedQuery(query_insert_log, query_insert_log_params)\n\t\t\t\t\t\n\t\t\t\t\t## End Ticket 308\n\t\t\t\t\t\n\t\t\t\t## Add the log entry\n\t\t\t\tsystem.perspective.print(\"AddAuditLogEntry\")\n\t\t\t\tpath \u003d \"Shelter/AuditLog/AddAuditLogEntry\"\n\t\t\t\tparams \u003d {\"bedLogId\":-1,\"reservationId\":int(self.view.params.reservationId), \"bedId\": self.view.getChild(\"root\").custom.selectedBedId,\"participantId\": self.view.getChild(\"root\").custom.selectedParticipantId,\"action\":\u0027Edit Reservation\u0027, \"employeeId\":self.session.custom.loggedInStaffEmployeeID, \"userName\": self.session.props.auth.user.userName}\n\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparams)\n\t\t\t##### The view is openend with a value in the Function parameter that isn\u0027t recognized\n\t\t\telse:\n\t\t\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\n\t\t\t\tRefresh \u003d 0\n\t\t\t\t\n\t\t\t##### Refresh the table\n\t\t\tif Refresh !\u003d 0:\t\n\t\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshReservations\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\t\n\t\texcept Exception as e:\n\t\t\tsystem.perspective.print(\u0027exception\u0027)\n\t\t\tsystem.perspective.print(str(e))\n\t\t\tself.getSibling(\"Label\").showMessage(\"...Something went wrong while saving data. Please try again...\")\t\n\telse:\n#\t\tif genderMismatch:\n#\t\t\tself.getSibling(\"Label\").showMessage(\"Selected Room is not set for \" +pGender+ \" Participant\")\n#\t\telse:\n#\t\t \tself.getSibling(\"Label\").showMessage(\"Please fill in all the fields correctly before saving.\")\n\t\tself.getSibling(\"Label\").showMessage(errorMessage)\n#\t\tsystem.perspective.print(\"not valid\")"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button_0"
            },
            "position": {
              "basis": "100px"
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "expression": "{session.custom.isManager} || {session.custom.isWSManager} || {session.custom.isCareCoordinator} || {session.custom.isAdministrator} || {session.custom.isSupportCoordinator} || {session.custom.isWSSupportCoordinator}"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              },
              "text": "Save"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\ttry:\n\t\tproject \u003d \u0027HMS\u0027\n\t\tpath \u003d \"Shelter/Reservations/DeleteReservation\"\n\t\tparameters \u003d {\"reservationId\": int(self.view.params.reservationId)}\n\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\t\t\n\t\t\n\t\tbedId \u003d self.parent.parent.getChild(\"EmbeddedView Inputs\").props.params.bedId\n\t\tparticipantId \u003d self.parent.parent.getChild(\"EmbeddedView Inputs\").props.params.participantId\n\t\t## Add the log entry\n\t\tpath \u003d \"Shelter/AuditLog/AddAuditLogEntry\"\n\t\tparams \u003d {\"bedLogId\":-1,\"reservationId\":int(self.view.params.reservationId), \"bedId\":bedId, \"participantId\":participantId,\"action\":\u0027Delete Reservation\u0027, \"employeeId\":self.session.custom.loggedInStaffEmployeeID, \"userName\": self.session.props.auth.user.userName}\n\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparams)\n\t\t\n\t\t## reset params\n\t\tself.view.params.reservationId  \u003d -1\n\t\tself.parent.parent.getChild(\"DatesAndNotes\").getChild(\"EmbeddedView Notes\").props.params.CaseNote \u003d \u0027\u0027\n\t\tself.session.custom.dateRangeFromDate \u003d system.date.now()\n\t\tself.session.custom.dateRangeToDate \u003d system.date.now()\n\t\tsystem.perspective.sendMessage(\"reservationselected\",payload \u003d {\u0027facilityId\u0027:-1,\u0027reservationId\u0027:-1, \u0027bedId\u0027:-1, \u0027participantId\u0027:-1, \u0027roomId\u0027:-1, \u0027prescribedControlledSubstance\u0027:-1},scope\u003d\u0027session\u0027)\n\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshReservations\", payload\u003d{}, scope\u003d\"session\")\t\n\texcept Exception as e:\n\t\tsystem.perspective.print(str(e))\n\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while deleting data. Please select \u0026 try again.\")"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button_1"
            },
            "position": {
              "basis": "100px"
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.reservationId} \u003d -1, False, if({session.custom.isAdministrator},True, False))"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Delete",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              },
              "text": "Delete"
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "Label",
              "visible": false
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Text/Error_Message"
              },
              "text": "...Something went wrong while saving data. Please try again..."
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "showMessage",
                  "params": [
                    "message"
                  ],
                  "script": "\timport time\n\tself.props.text \u003d message\n\tself.meta.visible \u003d True\n\ttime.sleep(5)\n\tself.meta.visible \u003d False\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.label"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tproject \u003d \"HMS\"\n\t\n\tif self.parent.custom.ReservationSaved or int(self.view.params.reservationId) !\u003d -1:\n\t\ttry:\n\t\t\t## # check pre conditions for checkin\n\t\t\tpath \u003d \"Shelter/Reservations/GetReservationDataToValidateCheckIn\"\n\t\t\t#checkInDate \u003d system.date.format(system.date.now(), \"yyyy-MM-dd hh:mm:ss\")\n\t\t\tcheckInDate \u003d system.date.now()\n\t\t\tdayOfYear \u003d system.date.getDayOfYear(checkInDate)\n\t\t\t# convert date to utc offset\n#\t\t\tUTCOffset \u003d self.session.props.device.timezone.utcOffset\n#\t\t\tcheckInDate \u003d system.date.addMinutes(system.date.now(),int(-UTCOffset*60))\n#\t\t\tcheckInDate \u003d system.date.format(checkInDate, \"yyyy-MM-dd hh:mm:ss\")\n\t\t\t\n\t\t\tparameters \u003d {\"reservationId\":int(self.view.params.reservationId), \"checkInStart\":checkInDate}\n#\t\t\tsystem.perspective.print(\"validate checkin\" + str(parameters))\n\t\t\tretData \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\n#\t\t\tsystem.perspective.print(\"validate check in named q\" + str(retData))\t\n\t\t\tparticipantEnrolledPrograms \u003d self.parent.custom.participantPrograms\n\t\t\tIs_Residential \u003d self.parent.custom.IsResidential\n\t\t\tprescribedControlledSubstance \u003d self.parent.parent.getChild(\"EmbeddedView Inputs\").props.params.prescribedControlledSubstances\n\t\t\t\t\n\t\t\tif retData is not None and retData.getRowCount() \u003e 0:\n\t\t\t\tfacilityName \u003d retData.getValueAt(0,\u0027facilityName\u0027)\n\t\t\t\tprogramName \u003d retData.getValueAt(0,\u0027programName\u0027)\n\t\t\t\tpGender \u003d retData.getValueAt(0,\u0027gender\u0027)\n\t\t\t\trGender \u003d retData.getValueAt(0,\u0027roomGender\u0027)\n\t\t\t\tpAge \u003d retData.getValueAt(0,\u0027age\u0027)\n\t\t\t\tprogramId \u003d  retData.getValueAt(0,\u0027programId\u0027)\n\t\t\t\tsystem.perspective.print(\"retData programId\" + str(programId))\n#\t\t\t\tsystem.perspective.print(\"retData programName\" + str(programName))\n#\t\t\t\tsystem.perspective.print(\"retData pGender\" + str(pGender))\n#\t\t\t\tsystem.perspective.print(\"retData rGender\" + str(rGender))\n\t\t\t\terrorMessage \u003d \"\"\n\t\t\t\tvalid \u003d True\n\t\t\t\tif int(pAge) \u003c 18:\n\t\t\t\t\terrorMessage \u003d \"Participant must be 18 years old\"\n\t\t\t\t\tvalid \u003d False\n\t\t\t\telif Is_Residential \u003d\u003d None or Is_Residential \u003d\u003d \u0027\u0027:\n\t\t\t\t\terrorMessage \u003d \"Participant must have residential enrollment\"\n\t\t\t\t\tvalid \u003d False\n\t\t\t\telif \u0027Apartments\u0027 in facilityName:\n\t\t\t\t\tif \u0027Permanent Supportive Housing\u0027 not in participantEnrolledPrograms:\n\t\t\t\t\t\terrorMessage \u003d \"Apartments requires Permanent Supportive Housing as Program\"\n\t\t\t\t\t\tvalid \u003d False\n\t\t\t\t\tif pGender !\u003d \u0027Male\u0027 and pGender !\u003d \u0027M\u0027:\n\t\t\t\t\t\tif errorMessage !\u003d \"\":\n\t\t\t\t\t\t\terrorMessage \u003d errorMessage + \" and Male participants\"\n\t\t\t\t\t\t\tvalid \u003d False\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\terrorMessage \u003d \"Apartments requires Male participants\"\n\t\t\t\t\t\t\tvalid \u003d False\n\t\t\t\telif facilityName \u003d\u003d \u0027Vine Hill\u0027:\n\t\t\t\t\tif \u0027Vine Hill Residential\u0027 not in participantEnrolledPrograms:\n\t\t\t\t\t\terrorMessage \u003d \"Vine Hill requires Vine Hill Residential as Program\"\n\t\t\t\t\t\tvalid \u003d False\n\t\t\t\t\tif pGender !\u003d \"Male\" and pGender !\u003d \u0027M\u0027:\n\t\t\t\t\t\tif errorMessage !\u003d \"\":\n\t\t\t\t\t\t\terrorMessage \u003d errorMessage + \" and Male participants\"\n\t\t\t\t\t\t\tvalid \u003d False\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\terrorMessage \u003d \"Vine Hill requires Male participants\"\n\t\t\t\t\t\t\tvalid \u003d False\n\t\t\t\telif pGender \u003d\u003d \"Female\" and rGender \u003d\u003d \"M\":\n\t\t\t\t\terrorMessage \u003d \"Selected Room is not set for \" +pGender+ \" Participant\"\n\t\t\t\t\tvalid \u003d False\t\t\t\n\t\t\t\telif pGender \u003d\u003d \"Male\" and rGender \u003d\u003d \"F\":\n\t\t\t\t\terrorMessage \u003d \"Selected Room is not set for \" +pGender+ \" Participant\"\n\t\t\t\t\tvalid \u003d False\n\t\t\t\t\n\t\t\t\t## added by Yogini 29-March-2024 to ensure that participant is not checked into wintershelter\n\t\t\t\tcheckParticipantQ \u003d \"SELECT participantId FROM shelter.ScheduleParticipant where timeRetired IS NULL and seasonId \u003d ? and dayOfYear \u003d ? and participantId \u003d ?\"\n\t\t\t\tcheckInData \u003d system.db.runPrepQuery(checkParticipantQ, [self.view.custom.currentSeasonId, dayOfYear, self.view.getChild(\"root\").custom.selectedParticipantId])\n\t\t\t\tif checkInData is not None and checkInData.getRowCount() \u003e 0:\n\t\t\t\t\terrorMessage \u003d \"Participant is checked into Winter Shelter\"\n\t\t\t\t\tvalid \u003d False\n\t\t\t\t## end addition Yogini 29-March-2024 \n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif valid \u003d\u003d False:\n\t\t\t\t\tself.getSibling(\"Label\").showMessage(errorMessage)\n\t\t\t\telse:\n\t\t\t\t\t\n\t\t\t\t\t## check if someone has checked in already in that room and bed\n\t\t\t\t\tpath \u003d \"Shelter/Reservations/CheckIfBedIsAvailableForCheckin\"\n\t\t\t\t\tparameters \u003d {\"bedId\": int(self.view.getChild(\"root\").custom.selectedBedId)}\n\t\t\t\t\tretVal \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\n\t\t\t\t\tif retVal is not None and retVal.getRowCount() \u003e 0: ## value exists that means some one is checked in\n\t\t\t\t\t\tself.getSibling(\"Label\").showMessage(\"The room is not available, Someone is already checked in\")\n\t\t\t\t\telse:\n\t\t\t\t\t\t## Check if participant is already checked in currently\n\t\t\t\t\t\tpath \u003d \"Shelter/CurrentResidents/CheckIfParticipantAlreadyCheckedIn\"\n\t\t\t\t\t\tparams \u003d {\"participantId\":self.view.getChild(\"root\").custom.selectedParticipantId}\n\t\t\t\t\t\tretVal \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparams)\n\t\t\t\t\t\tif retVal is not None and retVal.getRowCount() \u003e 0: ## value exists that means partcipant is already checked into some other bed\n\t\t\t\t\t\t\tself.getSibling(\"Label\").showMessage(\"The participant is already checked in\")\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t## Also check if participant is checked into Winter Shelter\n\t\t\t\t\t\t\t## Check if participant is suspended\n\t\t\t\t\t\t\tsuspensionStatus \u003d 0\n\t\t\t\t\t\t\tparticipantQ \u003d \"SELECT Suspension FROM participant.Dashboard where ID \u003d \" + str(self.view.getChild(\"root\").custom.selectedParticipantId)\n\t\t\t\t\t\t\tparticipantData \u003d system.db.runQuery(participantQ)\n\t\t\t\t\t\t\tif participantData is not None and len(participantData) \u003e 0:\n\t\t\t\t\t\t\t\tsuspensionStatus \u003d participantData[0][0]\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsystem.perspective.print(\"suspensionStatus : \" + str(suspensionStatus))\n\t\t\t\t\t\t\tif suspensionStatus \u003d\u003d 0 or suspensionStatus \u003d\u003d False:\n\t\t\t\t\t\t\t\t## Now check if participant is coming in with controlled substances\n\t\t\t\t\t\t\t\tif prescribedControlledSubstance is not None and int(prescribedControlledSubstance) \u003d\u003d 1:\n\t\t\t\t\t\t\t\t\t## show a popup for acknowledgement\n\t\t\t\t\t\t\t\t\tparameters \u003d {\"bedId\": int(self.view.getChild(\"root\").custom.selectedBedId),\"participantId\": int(self.view.getChild(\"root\").custom.selectedParticipantId),\"eventStart\":checkInDate, \"reservationId\":int(self.view.params.reservationId),\"programId\":programId}\n\t\t\t\t\t\t\t\t\tsystem.perspective.openPopup(\"ControlledSubstanceWarning\",\"Shelter/Reservation/Cards/ControlledSubstanceWarning\", params \u003d parameters, showCloseIcon \u003d False, resizable \u003d False, modal\u003dTrue, draggable \u003d False, overlayDismiss \u003d True)\n\t\t\t\t\n\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t#valid case allow check-in\n\t\t\t\t\t\t\t\t\tpath \u003d \"Shelter/Reservations/CheckIn\"\n\t\t\t\t\t\t\t\t\tparameters \u003d {\"bedId\": int(self.view.getChild(\"root\").custom.selectedBedId),\"participantId\": int(self.view.getChild(\"root\").custom.selectedParticipantId),\"eventStart\":checkInDate, \"reservationId\":int(self.view.params.reservationId)}\n\t\t\t#\t\t\t\t\t\tsystem.perspective.print(\"checkin\" + str(parameters))\n\t\t\t\t\t\t\t\t\tretVal \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\n\t\t\t#\t\t\t\t\t\tsystem.perspective.print(\"named q\" + str(retVal))\t\n\t\t\t\t\t\t\t\t\tself.getSibling(\"Label\").showMessage(\"Participant Checked in Successfully\")\n\t\t\t#\t\t\t\t\t\tsystem.perspective.print(\"sending msg\")\t\n\t\t\t\t\t\t\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshReservations\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t## add program enrollment as per Ticket #147\n\t\t\t\t\t\t\t\t\tif programId is not None and programId !\u003d -1:\n\t\t\t\t\t\t\t\t\t\tpath \u003d \"Participants/Enrollments/ParticipantAddSelectedEnrollments\"\n\t\t\t\t\t\t\t\t\t\tparams \u003d {\"participantId\":int(self.view.getChild(\"root\").custom.selectedParticipantId),\"programId\":programId}\n#\t\t\t\t\t\t\t\t\t\tsystem.perspective.print(\"line 119 b4 calling named q \")\n#\t\t\t\t\t\t\t\t\t\tsystem.perspective.print(params)\n\t\t\t\t\t\t\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparams)\n\t\t\t\t\t\t\t\t\t## End Addition\n\t\t\t\t\t\t\t\t\t## Add the log entry\n\t\t\t\t\t\t\t\t\tpath \u003d \"Shelter/AuditLog/AddAuditLogEntry\"\n\t\t\t\t\t\t\t\t\tparams \u003d {\"bedLogId\":-1,\"reservationId\":int(self.view.params.reservationId), \"bedId\": int(self.view.getChild(\"root\").custom.selectedBedId),\"participantId\": int(self.view.getChild(\"root\").custom.selectedParticipantId), \"action\":\u0027Check-in\u0027, \"employeeId\":self.session.custom.loggedInStaffEmployeeID, \"userName\": self.session.props.auth.user.userName}\n\t\t\t\t\t\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparams)\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t## show warning\n\t\t\t\t\t\t\t\tparameters \u003d {\"bedId\": int(self.view.getChild(\"root\").custom.selectedBedId),\"participantId\": int(self.view.getChild(\"root\").custom.selectedParticipantId),\"eventStart\":checkInDate, \"reservationId\":int(self.view.params.reservationId),\"programId\":programId}\n\t\t\t\t\t\t\t\tsystem.perspective.openPopup(\"checkInWarning\",\"Shelter/Reservation/Cards/CheckInWarning\", params \u003d parameters, showCloseIcon \u003d False, resizable \u003d False, draggable \u003d False)\n\t\t\t\t\n\t\t\telse:\t\t\t\n#\t\t\t\tsystem.perspective.print(\"retData none\")\n\t\t\t\t# Data is none that means some one is checked in already\n\t\t\t\tself.getSibling(\"Label\").showMessage(\"...The room is not available, Someone is already checked in...\")\n\n\t\texcept Exception as e:\n\t\t\tsystem.perspective.print(str(e))\n\t\t\tself.getSibling(\"Label\").showMessage(\"...Something went wrong while Check in. Please try again...\")\n\t\n\t\t\t\n\t\t\t\t\t\n\telse:\n\t\tself.getSibling(\"Label\").showMessage(\"Please save or update the reservation first.\")"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button_2"
            },
            "position": {
              "basis": "100px"
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.reservationId} \u003d -1, False, if(({session.custom.isManager} || {session.custom.isWSManager} || {session.custom.isCareCoordinator} || {session.custom.isAdministrator} || {session.custom.isSupportCoordinator} || {session.custom.isWSSupportCoordinator}),True, False))"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Btn_Teal_Shelter",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginRight": "10px",
                "marginTop": "5px"
              },
              "text": "Check-In"
            },
            "type": "ia.input.button"
          }
        ],
        "custom": {
          "ReservationSaved": 0
        },
        "meta": {
          "name": "root Actions"
        },
        "position": {
          "basis": "51px",
          "shrink": 0
        },
        "propConfig": {
          "custom.IsResidential": {
            "binding": {
              "config": {
                "parameters": {
                  "participantId": "{../EmbeddedView Inputs.props.params.participantId}"
                },
                "queryPath": "Participants/Enrollments/ParticipantEnrollments_ForIsResidential"
              },
              "transforms": [
                {
                  "code": "\tprogramsString \u003d \"\"\n\tif value is not None and value.getRowCount() \u003e 0:\n\t\tfor i in range(value.getRowCount()):\n\t\t\tprogramsString \u003d programsString + \",\" + str(value.getValueAt(i,\u0027programName\u0027))\n\t\n\treturn programsString",
                  "type": "script"
                }
              ],
              "type": "query"
            }
          },
          "custom.participantPrograms": {
            "binding": {
              "config": {
                "parameters": {
                  "participantId": "{../EmbeddedView Inputs.props.params.participantId}"
                },
                "queryPath": "Participants/Enrollments/ParticipantSelectedEnrollments"
              },
              "transforms": [
                {
                  "code": "\tprogramsString \u003d \"\"\n\tif value is not None and value.getRowCount() \u003e 0:\n\t\tfor i in range(value.getRowCount()):\n\t\t\tprogramsString \u003d programsString + \",\" + str(value.getValueAt(i,\u0027programName\u0027))\n\t\n\treturn programsString",
                  "type": "script"
                }
              ],
              "type": "query"
            }
          }
        },
        "props": {
          "style": {
            "borderTopColor": "#9db8d1",
            "borderTopStyle": "solid",
            "borderTopWidth": "1px",
            "classes": "Background/Default",
            "marginLeft": "10px",
            "marginRight": "10px",
            "marginTop": "5px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "custom.addedNotes": {
        "binding": {
          "config": {
            "path": "./DatesAndNotes/EmbeddedView Notes.props.params.CaseNote"
          },
          "type": "property"
        }
      },
      "custom.reasonForEntryId": {
        "binding": {
          "config": {
            "path": "./EmbeddedView Inputs.props.params.reasonForEntryId"
          },
          "type": "property"
        }
      },
      "custom.reservationType": {
        "binding": {
          "config": {
            "expression": "if({this.custom.selectedWaitingList} \u003d \u0027Quick Referral\u0027,\u0027Quick Referral\u0027,\u0027Waiting List\u0027) "
          },
          "type": "expr"
        }
      },
      "custom.selectedBedId": {
        "binding": {
          "config": {
            "path": "./EmbeddedView Inputs.props.params.bedId"
          },
          "type": "property"
        }
      },
      "custom.selectedBeginDate": {
        "binding": {
          "config": {
            "path": "./DatesAndNotes/EmbeddedView Dates Input.props.params.selectedBeginDate"
          },
          "type": "property"
        }
      },
      "custom.selectedEndDate": {
        "binding": {
          "config": {
            "path": "./DatesAndNotes/EmbeddedView Dates Input.props.params.selectedEndDate"
          },
          "type": "property"
        }
      },
      "custom.selectedParticipantId": {
        "binding": {
          "config": {
            "path": "./EmbeddedView Inputs.props.params.participantId"
          },
          "type": "property"
        }
      },
      "custom.selectedProgramId": {
        "binding": {
          "config": {
            "path": "./EmbeddedView Inputs.props.params.programId"
          },
          "type": "property"
        }
      },
      "custom.selectedPrograms": {
        "binding": {
          "config": {
            "parameters": {
              "participantId": "{view.params.participantId}"
            },
            "queryPath": "Participants/Enrollments/ParticipantSelectedEnrollments",
            "returnFormat": "json"
          },
          "transforms": [
            {
              "code": "\treturn [ oneValue[\u0027programId\u0027] for oneValue in value]",
              "type": "script"
            }
          ],
          "type": "query"
        }
      },
      "custom.selectedProviderId": {
        "binding": {
          "config": {
            "path": "./EmbeddedView Inputs.props.params.providerId"
          },
          "type": "property"
        }
      },
      "custom.selectedProviderTypeId": {
        "binding": {
          "config": {
            "path": "./EmbeddedView Inputs.props.params.providerTypeId"
          },
          "type": "property"
        }
      },
      "custom.selectedRoomId": {
        "binding": {
          "config": {
            "path": "./EmbeddedView Inputs.props.params.roomId"
          },
          "type": "property"
        }
      },
      "custom.selectedWaitingList": {
        "binding": {
          "config": {
            "path": "./EmbeddedView Inputs.props.params.waitingList"
          },
          "type": "property"
        }
      }
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "reservationselected",
          "pageScope": false,
          "script": "\t# implement your handler here\n\t\n\tself.view.params.reservationId \u003d payload[\u0027reservationId\u0027]\n\tself.getChild(\"DatesAndNotes\").getChild(\"EmbeddedView Notes\").props.params.CaseNote \u003d payload[\u0027notes\u0027]\n\t\n#\tsystem.date.parse(checkInDate[:24],\"E MMM dd yyyy HH:mm:ss\")\n\tsystem.perspective.print(\"reservation new poaylod\")\n\tsystem.perspective.print(payload)\n\t\t\t\n\tself.session.custom.dateRangeFromDate \u003d payload[\u0027checkInDate\u0027]\n\tself.session.custom.dateRangeToDate \u003d payload[\u0027checkOutDate\u0027]",
          "sessionScope": true,
          "viewScope": false
        },
        {
          "messageType": "refreshReservations",
          "pageScope": true,
          "script": "\t# implement your handler here\n\tself.view.params.reservationId \u003d -1",
          "sessionScope": true,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}