{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\ttry:\n\t\troot \u003d self.getChild(\"root\")\n\t\troot.setPropsDropdowns()\n\t\t#emvSearch \u003d root.getChild(\"emvSearch\")\n\t\t#emvSearch.props.params.keyUpPulse \u003d False\n\texcept:\n\t\timport traceback\n\t\tlogger \u003d system.util.getLogger(\"Shelter\")\n\t\tmsg \u003d self.name + \u0027:\\n\u0027\n\t\tmsg +\u003d traceback.format_exc()\n\t\tlogger.error(msg)\t\t\t"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {},
  "props": {
    "defaultSize": {
      "height": 30,
      "width": 1820
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "emvGender"
        },
        "position": {
          "basis": "150px"
        },
        "propConfig": {
          "props.params.actionPerformedPulse": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\n"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [
              {
                "label": "Client doesn\u0027t know",
                "value": "Client doesn\u0027t know"
              },
              {
                "label": "Client refused",
                "value": "Client refused"
              },
              {
                "label": "Data not collected",
                "value": "Data not collected"
              },
              {
                "label": "Female",
                "value": "Female"
              },
              {
                "label": "Male",
                "value": "Male"
              },
              {
                "label": "Non-Binary",
                "value": "Non-Binary"
              },
              {
                "label": "Transgender Female to Male",
                "value": "Transgender Female to Male"
              },
              {
                "label": "Transgender Male to Female",
                "value": "Transgender Male to Female"
              }
            ],
            "placeholder": "Gender",
            "selection": null
          },
          "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container",
            "marginLeft": "40px"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\tquery \u003d \"\"\"\n\tSELECT genderName FROM humans.Gender ORDER BY genderName\n\t\t\"\"\"\n\t\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[0]) for x in result]\n\t\n\t"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvRace"
        },
        "position": {
          "basis": "150px"
        },
        "propConfig": {
          "props.params.actionPerformedPulse": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\n"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [
              {
                "label": "American Indian or Alaska Native",
                "value": "American Indian or Alaska Native"
              },
              {
                "label": "Asian or Asian American",
                "value": "Asian or Asian American"
              },
              {
                "label": "Black, African American or African",
                "value": "Black, African American or African"
              },
              {
                "label": "Hispanic/Latina/e/o",
                "value": "Hispanic/Latina/e/o"
              },
              {
                "label": "Middle Eastern or North African",
                "value": "Middle Eastern or North African"
              },
              {
                "label": "Native Hawaiian or Other Pacific Island",
                "value": "Native Hawaiian or Other Pacific Island"
              },
              {
                "label": "White",
                "value": "White"
              },
              {
                "label": "Client doesn\u0027t know",
                "value": "Client doesn\u0027t know"
              },
              {
                "label": "Client refused",
                "value": "Client refused"
              },
              {
                "label": "Data not collected",
                "value": "Data not collected"
              }
            ],
            "placeholder": "Race and Ethnicity",
            "selection": null
          },
          "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\tquery \u003d \"\"\"\n\tSELECT * FROM\n\t(\n\tSELECT TOP 1000\n\t\traceName as \u0027race\u0027\n\tFROM\n\t\thumans.Race\n\t\twhere raceName not in (\u0027Client doesn\u0027\u0027t know\u0027, \u0027Client refused\u0027, \u0027Data not collected\u0027)\n\tORDER by raceName ) x\n\tUNION\n\tSELECT \n\t\traceName as \u0027race\u0027\n\tFROM\n\t\thumans.Race\n\t\twhere raceName in (\u0027Client doesn\u0027\u0027t know\u0027, \u0027Client refused\u0027, \u0027Data not collected\u0027)\n\t\t\"\"\"\n\t\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[0]) for x in result]\n\t\n\t"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvWaitingList"
        },
        "position": {
          "basis": "250px"
        },
        "propConfig": {
          "props.params.actionPerformedPulse": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\n"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": true,
            "options": [],
            "placeholder": "Waiting List",
            "selection": null
          },
          "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\tquery \u003d \"\"\"\n\t\tSELECT distinct r.programName as value, r.programName as label\n\tFROM participant.ReferralDashboard  r\n\tWHERE r.programName IS NOT NULL and r.referralStatus \u003d \u0027Approved\u0027\n\tAND CONCAT(r.participantid,r.programName) not in (SELECT CONCAT(participantId,waitingListName) from lodging.Reservation res )\n\n\t\t\t\"\"\"\n\t\t\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[1]) for x in result]\n\t\n\n\t"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvActiveInactive"
        },
        "position": {
          "basis": "150px"
        },
        "propConfig": {
          "props.params.actionPerformedPulse": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\n"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [
              {
                "label": "InActive",
                "value": "InActive"
              },
              {
                "label": "All",
                "value": "All"
              }
            ],
            "placeholder": "Active",
            "selection": null
          },
          "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "#\tlstValues \u003d [[\"Active\",\"Active\"],[\"InActive\",\"InActive\"],[\"All\",\"All\"]]\n\tlstValues \u003d [[\"InActive\",\"InActive\"],[\"All\",\"All\"]]\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[1]) for x in lstValues]\n\n\t"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvExpiredCheckedIn"
        },
        "position": {
          "basis": "180px"
        },
        "propConfig": {
          "props.params.actionPerformedPulse": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\n"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [
              {
                "label": "Expired",
                "value": "Expired"
              },
              {
                "label": "Checked-In",
                "value": "Checked-In"
              }
            ],
            "placeholder": "Expired/Checked-In",
            "selection": null
          },
          "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\tlstValues \u003d [[\"Expired\",\"Expired\"],[\"Checked-In\",\"Checked-In\"]]\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[1]) for x in lstValues]\n\n\t"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Placeholder"
        },
        "position": {
          "basis": "200px",
          "grow": 1
        },
        "props": {
          "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "lblSearch"
        },
        "position": {
          "basis": "50px"
        },
        "props": {
          "style": {
            "classes": "Table/Filter_Header",
            "textAlign": "end"
          },
          "text": "Search:"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "emvSearch"
        },
        "position": {
          "basis": "220px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.keyUpPulse": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\t"
            }
          }
        },
        "props": {
          "params": {
            "clear": false,
            "keyUpPulse": false,
            "searchText": ""
          },
          "path": "Providers/Dashboard/Components/Filters/Search_Bar",
          "style": {
            "classes": "Table/Search_Bar"
          },
          "useDefaultViewWidth": true
        },
        "type": "ia.display.view"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\troot \u003d self.parent\n\t\n\temvGender \u003d self.getSibling(\"emvGender\")\n\temvRace \u003d self.getSibling(\"emvRace\")\n\temvWaitingList \u003d self.getSibling(\"emvWaitingList\")\n\temvActiveInactive \u003d self.getSibling(\"emvActiveInactive\")\n\temvExpiredCheckedIn \u003d self.getSibling(\"emvExpiredCheckedIn\")\n\temvSearch \u003d self.getSibling(\"emvSearch\")\n\t\n\temvGender.props.params.clear \u003d True\n\temvRace.props.params.clear \u003d True\n\temvWaitingList.props.params.clear \u003d True\n\temvActiveInactive.props.params.clear \u003d True\n\temvExpiredCheckedIn.props.params.clear \u003d True\n\temvSearch.props.params.clear \u003d True\n\t\n\t\n\tpayload \u003d {}\n\tpayload[\u0027gender\u0027] \u003d None\n\tpayload[\u0027race\u0027] \u003d None\n\tpayload[\u0027waitingList\u0027] \u003d None\n\tpayload[\u0027activeInactive\u0027] \u003d None\n\tpayload[\u0027expiredCheckedIn\u0027] \u003d None  \n\tpayload[\u0027searchText\u0027] \u003d None\n\troot.sendMsgCondition(payload)"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "clearConditions"
        },
        "position": {
          "basis": "30px",
          "shrink": 0
        },
        "props": {
          "image": {
            "height": 16,
            "icon": {
              "color": "#0C4E8B",
              "path": "material/close"
            },
            "position": "center",
            "width": 16
          },
          "style": {
            "classes": "Filter/Filter_Border_Default Filter/Filter_Container",
            "marginRight": "37px"
          },
          "text": "",
          "textStyle": {
            "classes": "GreyColor"
          }
        },
        "type": "ia.input.button"
      }
    ],
    "custom": {
      "_devClean": false,
      "_devPulse": false,
      "_isDev": false
    },
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "custom._devClean": {
        "onChange": {
          "enabled": null,
          "script": "\t\n\temvProviderType \u003d self.getChild(\"emvProviderType\")\n\temvActivityRange \u003d self.getChild(\"emvActivityRange\")\n\temvSearch \u003d self.getChild(\"emvSearch\")\n\t\n\temvProviderType.props.params.clear \u003d True\n\temvActivityRange.props.params.clear \u003d True\n\temvSearch.props.params.clear \u003d True\n\t\n\n\t\n\tif self.custom._devClean:\n\t\tself.custom._devClean \u003d False"
        }
      },
      "custom._devPulse": {
        "onChange": {
          "enabled": null,
          "script": "\t\n\temvProviderType \u003d self.getChild(\"emvProviderType\")\n\temvActivityRange \u003d self.getChild(\"emvActivityRange\")\n\temvSearch \u003d self.getChild(\"emvSearch\")\n\t\n\t\n\tif self.custom._isDev:\n\t\tif currentValue.value is True:\n\t\t\tself.setPropsDropdowns()\n\t\telse:\n\t\t\temvProviderType.props.params.options \u003d []\n\t\t\temvActivityRange.props.params.options \u003d []\n\t\n\temvProviderType.props.params.actionPerformedPulse \u003d False\n\temvActivityRange.props.params.actionPerformedPulse \u003d False\n\temvSearch.props.params.keyUpPulse \u003d False"
        }
      }
    },
    "props": {
      "style": {
        "classes": "Filter/Header_Text"
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "setPropsDropdowns",
          "params": [],
          "script": "\temvGender \u003d self.getChild(\"emvGender\")\n\temvRace \u003d self.getChild(\"emvRace\")\n\temvWaitingList \u003d self.getChild(\"emvWaitingList\")\n\temvActiveInactive \u003d self.getChild(\"emvActiveInactive\")\n\temvExpiredCheckedIn \u003d self.getChild(\"emvExpiredCheckedIn\")\n\t\n\temvGender.setOptions()\n\temvRace.setOptions()\n\temvWaitingList.setOptions()\n\temvActiveInactive.setOptions()\n\temvExpiredCheckedIn.setOptions()\n"
        },
        {
          "name": "sendMsgCondition",
          "params": [
            "payload\u003dNone"
          ],
          "script": "\t\n\temvGender \u003d self.getChild(\"emvGender\")\n\temvRace \u003d self.getChild(\"emvRace\")\n\temvWaitingList \u003d self.getChild(\"emvWaitingList\")\n\temvActiveInactive \u003d self.getChild(\"emvActiveInactive\")\n\temvExpiredCheckedIn \u003d self.getChild(\"emvExpiredCheckedIn\")\n\temvSearch \u003d self.getChild(\"emvSearch\")\n\t\n\t\n\tif payload is None:\n\t\tpayload \u003d {}\n\t\tpayload[\u0027gender\u0027] \u003d emvGender.props.params.selection\n\t\tpayload[\u0027race\u0027] \u003d emvRace.props.params.selection\n\t\tpayload[\u0027waitingList\u0027] \u003d emvWaitingList.props.params.selection\n\t\tpayload[\u0027activeInactive\u0027] \u003d emvActiveInactive.props.params.selection\n\t\tpayload[\u0027expiredCheckedIn\u0027] \u003d emvExpiredCheckedIn.props.params.selection\n\t\tpayload[\u0027searchText\u0027] \u003d emvSearch.props.params.searchText\n\t\t\n\tsystem.perspective.sendMessage(\u0027mhByCondition\u0027, payload)\n\t\n"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "refreshReservations",
          "pageScope": true,
          "script": "\tself.sendMsgCondition()",
          "sessionScope": true,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}