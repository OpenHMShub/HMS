{
  "custom": {
    "devPulse": false
  },
  "params": {},
  "propConfig": {
    "custom.devPulse": {
      "onChange": {
        "enabled": null,
        "script": "\troot \u003d self.getChild(\"root\")\n\tif currentValue.value is True:\n\t\tpayload \u003d {}\n\t\tpayload[\u0027availableBeds\u0027] \u003d 100\n\t\tpayload[\u0027totalBeds\u0027] \u003d 99\n\n\t\tsystem.perspective.sendMessage(\u0027mhShelterDashboardKpiHeader\u0027, payload \u003d payload)\n\n\telse:\n\t\troot.cleanKpis()"
      },
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 185,
      "width": 1430
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "KPI1"
        },
        "position": {
          "basis": "345px",
          "grow": 1,
          "shrink": 0
        },
        "props": {
          "params": {
            "Title": "",
            "Value1": 0,
            "Value2": 0
          },
          "path": "Shelter/Dashboard/Cards/KPI/Ratio_Flex",
          "style": {
            "classes": "KPIs/KPI_Card",
            "marginLeft": "40px"
          },
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "KPI2"
        },
        "position": {
          "basis": "270px",
          "grow": 1,
          "shrink": 0
        },
        "props": {
          "params": {
            "Title": "",
            "Value": 0
          },
          "path": "Shelter/Dashboard/Cards/KPI/Percent_Flex",
          "style": {
            "classes": "KPIs/KPI_Card"
          },
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "KPI3"
        },
        "position": {
          "basis": "345px",
          "grow": 1,
          "shrink": 0
        },
        "props": {
          "params": {
            "Title": "",
            "Value": []
          },
          "path": "Shelter/Dashboard/Cards/KPI/Graph_Flex",
          "style": {
            "classes": "KPIs/KPI_Card"
          },
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "KPI4"
        },
        "position": {
          "basis": "270px",
          "grow": 1,
          "shrink": 0
        },
        "props": {
          "params": {
            "Title": "",
            "Value": 0
          },
          "path": "Shelter/Dashboard/Cards/KPI/Total_Flex",
          "style": {
            "classes": "KPIs/KPI_Card",
            "marginRight": "40px"
          },
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "alignContent": "flex-start",
      "alignItems": "center",
      "style": {
        "classes": "KPIs/KPI_Flex_Container",
        "overflow": "hidden",
        "overflowY": "hidden"
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "setKpi1_AvailableTotal",
          "params": [
            "availableBeds",
            "totalBeds"
          ],
          "script": "\tkpi1 \u003d self.getChild(\"KPI1\")\n\tkpi1.props.params.Title \u003d \u0027AVAILABLE/TOTAL BEDS\u0027\n\tkpi1.props.params.Value1 \u003d availableBeds\n\tkpi1.props.params.Value2 \u003d totalBeds\n"
        },
        {
          "name": "setKpi2_Utilization",
          "params": [
            "totalBeds"
          ],
          "script": "\tkpi2 \u003d self.getChild(\"KPI2\")\n\n\t######\n\tquery \u003d \"\"\"\nDECLARE @fromDate datetime \u003d ?\n\t\t,@toDate datetime \u003d ?\n\t\t\t\n;WITH cte AS (\nSELECT [id]\n\t,[bedId]\n\t,[participantId]\n\t,[eventStart]\n\t,[eventEnd]\n\t,CASE WHEN [eventStart] \u003c @fromDate THEN @fromDate ELSE eventStart END [correctedStart]\n\t, ISNULL([eventEnd], @toDate) [correctedEnd]\nFROM [lodging].[BedLog]\nWHERE ISNULL([eventEnd], @fromDate) \u003e\u003d @fromDate\nAND [eventStart] \u003c\u003d @toDate\n)\n\nSELECT [id]\n\t,[bedId]\n\t,[participantId]\n\t,[eventStart]\n\t,[eventEnd]\n\t,[correctedStart]\n\t,[correctedEnd]\n, DATEDIFF(hour,[correctedStart],[correctedEnd]) deltaHours\nFROM cte\t\n\t\"\"\"\n\t\n\tnow \u003d system.date.now()\n\tstartCurrentMonth \u003d system.date.getDate(system.date.getYear(now),system.date.getMonth(now),1)\n\tcurrentMonthHours \u003d system.date.hoursBetween(startCurrentMonth, now)\n\ttotalHours \u003d totalBeds * currentMonthHours\n\t\n\tresult \u003d system.db.runPrepQuery(query, [startCurrentMonth, now],\u0027HMSOps\u0027)\n\t\n\toccupiedHours \u003d 0\n\tfor row in result: \n\t\toccupiedHours +\u003d row[\u0027deltaHours\u0027]\n\t\t\n\tutilizationPercent \u003d float(100 *occupiedHours) / totalHours if totalHours !\u003d 0 else 0\n\t\n\t#ystem.perspective.print((\u0027occupiedHours,currentMonthHours,totalBeds, totalHours ,  utilizationPercent:\u0027, occupiedHours,currentMonthHours,totalBeds, totalHours , utilizationPercent))\n\t\n\tkpi2.props.params.Title \u003d \u0027UTILIZATION THIS MONTH\u0027\n\tkpi2.props.params.Value \u003d round(utilizationPercent,3)\n\n\t"
        },
        {
          "name": "setKpi3_WaitListTrend",
          "params": [],
          "script": "\tkpi3 \u003d self.getChild(\"KPI3\")\n\tkpi3.props.params.Value \u003d []\n\t\n\t######\n\tquery \u003d \"\"\"\n\tSELECT totalPeopleOnWaitlist, snapshotDate\n\tFROM [shelter].[WaitListSnapshot]\n\tWHERE snapshotDate \u003e\u003d ? AND snapshotDate \u003c\u003d ?\n\tORDER BY snapshotDate\n\t\"\"\"\n\tnow \u003d system.date.now()\n\tnowTime0 \u003d system.date.getDate(system.date.getYear(now), system.date.getMonth(now), system.date.getDayOfMonth(now))\n\tfourMonthsBeforeTime0 \u003d system.date.addMonths(nowTime0, -4)\n\n\tresult \u003d system.db.runPrepQuery(query, [fourMonthsBeforeTime0, nowTime0],\u0027HMSOps\u0027)\n\t\n\tsystem.perspective.print((\u0027kpi3 result: \u0027, result))\n\t\n\t\n\t\n\t#system.perspective.print((\u0027kpi3 _daysBetween: \u0027, _daysBetween))\t\n\tdata \u003d []\n\tif result is not None and result.getRowCount() \u003e 0:\n\t\tbeginDayInResult \u003d result.getValueAt(0,\u0027snapshotDate\u0027)\n\t\t_daysCount \u003d system.date.daysBetween(fourMonthsBeforeTime0, beginDayInResult) + 1\n\t\t_daysBetween \u003d[system.date.addDays(fourMonthsBeforeTime0, i) for i in range(_daysCount)]\n\t\tfor _day in _daysBetween:\n\t\t\tdata.append(dict(Enrollment \u003d 0, time \u003d _day))\n\t\tfor i in range(result.getRowCount()):\n\t\t\tdata.append(dict(Enrollment \u003d result.getValueAt(i,\u0027totalPeopleOnWaitlist\u0027), time \u003d result.getValueAt(i,\u0027snapshotDate\u0027)))\n\t\n\tif len(data) \u003d\u003d 0:\n\t\tdata.append(dict(Enrollment \u003d 0, time \u003d 0))\n\t\t\n\tseries \u003d [dict(data \u003d data, name \u003d \"Enrollment\")]\n\t\t\n\t#ystem.perspective.print((\u0027kpi 3 data: \u0027, data))\n\t\n\tkpi3.props.params.Title \u003d \u0027WAITING LIST TREND\u0027\n\tkpi3.props.params.Value \u003d series\n\t"
        },
        {
          "name": "setKpi4_AvgDaysPerOccupant",
          "params": [],
          "script": "\tkpi4 \u003d self.getChild(\"KPI4\")\n\t\n\t######\n\tquery \u003d \"\"\"\nDECLARE @fromDate datetime \u003d ?,\n\t\t\t@toDate datetime \u003d ?\n\t\n\t;WITH cte AS (\n\tSELECT TOP (1000) [id]\n\t\t,[bedId]\n\t\t,[participantId]\n\t\t,[eventStart]\n\t\t,[eventEnd]\n\t\t,CASE WHEN [eventStart] \u003c @fromDate THEN @fromDate ELSE [eventStart] END AS [correctedEventStart]\n\t\t,CASE WHEN ISNULL([eventEnd], @toDate) \u003c\u003d @toDate THEN ISNULL([eventEnd], @toDate) ELSE @toDate END AS [correctedEventEnd]\n\tFROM [lodging].[BedLog]\n\tWHERE ([BedLog].[eventStart]\u003c\u003d @toDate\n\t\t\tAND ISNULL([BedLog].[eventEnd],@toDate) \u003e\u003d @fromDate)\n\t)\n\t\n\tSELECT [id]\n\t\t,[bedId]\n\t\t,[participantId]\n\t\t,[eventStart]\n\t\t,[eventEnd]\n\t\t,[correctedEventStart]\n\t\t,[correctedEventEnd]\n\t\t,DATEDIFF(hour,[correctedEventStart],[correctedEventEnd])  hoursDiff\n\tFROM cte\n\tWHERE DATEDIFF(hour,[correctedEventStart],[correctedEventEnd]) \u003e 1\n\t\"\"\"\n\tnow \u003d system.date.now()\n\t#nowTime0 \u003d system.date.getDate(system.date.getYear(now), system.date.getMonth(now), system.date.getDayOfMonth(now))\n\tyearStart \u003d system.date.getDate(system.date.getYear(now), 0, 1)\n\n\tresult \u003d system.db.runPrepQuery(query, [yearStart, now],\u0027HMSOps\u0027)\n\n\tsumHours \u003d 0\n\tdistinctParticipantList \u003d []\n\tfor _row in result:\n\t\tsumHours +\u003d _row[\u0027hoursDiff\u0027]\n\t\tif _row[\u0027participantId\u0027] not in distinctParticipantList:\n\t\t\tdistinctParticipantList.append(_row[\u0027participantId\u0027])\n\t\n\toccupants \u003d len(distinctParticipantList)\n\tavgDaysPerOccupant \u003d round((sumHours / 24.0 / occupants),1) if occupants \u003e 0 else 0\n\t\n\t#ystem.perspective.print((\u0027sumHours, occupants, avgDaysPerOccupant: \u0027, sumHours, occupants, avgDaysPerOccupant ))\n\t\n\tkpi4.props.params.Title \u003d \u0027Avg Days Per Occupant\u0027\n\tkpi4.props.params.Value \u003d avgDaysPerOccupant\n\t\n\t\n"
        },
        {
          "name": "cleanKpis",
          "params": [],
          "script": "\tkpi1 \u003d self.getChild(\"KPI1\")\n\tkpi2 \u003d self.getChild(\"KPI2\")\n\tkpi3 \u003d self.getChild(\"KPI3\")\n\tkpi4 \u003d self.getChild(\"KPI4\")\t\n\t\n\t\n\t\n\t\n\tkpi1.props.params.Title \u003d \u0027\u0027\n\tkpi1.props.params.Value1 \u003d 0\n\tkpi1.props.params.Value2 \u003d 0\n\t\n\t\n\t\t\n\tkpi2.props.params.Title \u003d \u0027\u0027\n\tkpi2.props.params.Value \u003d 0\n\n\tkpi3.props.params.Title \u003d \u0027\u0027\n\tkpi3.props.params.Value \u003d []\n\n\tkpi4.props.params.Title \u003d \u0027\u0027\n\tkpi4.props.params.Value \u003d 0"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "mhShelterDashboardKpiHeader",
          "pageScope": true,
          "script": "\tsystem.perspective.print((\u0027kpishelter: \u0027))\n\tavailableBeds \u003d payload.get(\u0027availableBeds\u0027) \n\ttotalBeds \u003d payload.get(\u0027totalBeds\u0027) \n\t\n\n\tif totalBeds is None:\n\t\t# TODO: exec query and get totalBeds\n\t\traise ValueError(\u0027Missing totalBeds\u0027)\n\n\tif availableBeds is None:\n\t\traise ValueError(\u0027Missing availableBeds\u0027) # TODO: exec query and get totalBeds\n\t\t\n\t\n\tself.setKpi1_AvailableTotal(availableBeds, totalBeds)\n\tself.setKpi2_Utilization(totalBeds)\n\tself.setKpi3_WaitListTrend()\n\tself.setKpi4_AvgDaysPerOccupant()\n\n\t",
          "sessionScope": false,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}