{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\ttry:\n\t\tpass\n\t\t#payload \u003d{} #\u0027offset\u0027:0,\u0027fetch\u0027 :100 }\n\t\t\n\t\t\n\t\t#system.perspective.sendMessage(\u0027mhByCondition\u0027, payload \u003d payload)\n\n\texcept:\n\t\tpass\n\t\t#import traceback\n\t\t#logger \u003d system.util.getLogger(\"{}\".format(\u0027Providers_Table onStartUp\u0027))\n\t\t#msg \u003d traceback.format_exc()\n\t\t#logger.error(msg)\t\n\n"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "fetch": null,
    "resultRowCount": 16
  },
  "propConfig": {
    "params.fetch": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.resultRowCount": {
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 887,
      "width": 1200
    }
  },
  "root": {
    "children": [
      {
        "custom": {
          "_devPulse": true,
          "_devTxt": "",
          "_isDev": true,
          "jsonLastPayload": "{\"oneDay\":\"Sun Mar 06 14:01:43 CST 2022\",\"facilityId\":4,\"roomId\":47}",
          "lastPayload": {},
          "roomlLayout_NextStepDorm": [
            [
              {},
              {
                "beds": [
                  8,
                  7
                ],
                "type": "h"
              },
              {
                "beds": [
                  2,
                  1
                ],
                "type": "h"
              }
            ],
            [
              {},
              {
                "beds": [
                  9
                ],
                "type": "h"
              },
              {
                "beds": [
                  3
                ],
                "type": "h"
              }
            ],
            [
              {
                "beds": [
                  16,
                  15
                ],
                "type": "v"
              },
              {
                "beds": [
                  11,
                  10
                ],
                "type": "v"
              },
              {
                "beds": [
                  4,
                  5
                ],
                "type": "v"
              }
            ],
            [
              {},
              {
                "beds": [
                  13,
                  12
                ],
                "type": "h"
              },
              {}
            ],
            [
              {},
              {
                "beds": [
                  14
                ],
                "type": "h"
              },
              {
                "beds": [
                  6
                ],
                "type": "h"
              }
            ]
          ]
        },
        "events": {
          "component": {
            "onRowClick": {
              "config": {
                "script": "\t\n\tsystem.perspective.print((\u0027onRcEmplo\u0027))\n\tselectedColumn \u003d self.props.selection.selectedColumn \n\n\ttrackID \u003d event.value.get(\u0027id\u0027)\n\t\n\tsystem.perspective.print((\u0027trackID : {} {}\u0027.format(trackID , type(trackID)) ))\n\t\n\tif trackID is None:\n\t\tsystem.perspective.print((\u0027trackID is None : {} {}\u0027.format(trackID , type(trackID)) ))\n\t\treturn\n\t\n\tsystem.perspective.print((\u0027selectedColumn: \u0027, selectedColumn ))\n\n\tif selectedColumn \u003d\u003d \"id\":\n\t\tid \u003d \"PreviewEmployer\" \n\t\tparams \u003d {\"trackID\": trackID}\n\t\tsystem.perspective.openDock(id\u003did,params\u003dparams)\n\n\telif selectedColumn \u003d\u003d \"employerName\" or selectedColumn is None: \n\t\ttab_id \u003d \"1\"\n\t\tsystem.perspective.navigate(view \u003d \u0027Employers/Detail/Employer_Detail\u0027, params \u003d {\u0027trackID\u0027:trackID, \u0027tab_id\u0027:tab_id})\n\n\telse:\n\t\tpass\n"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Table"
        },
        "position": {
          "basis": "800px",
          "grow": 1
        },
        "propConfig": {
          "custom._devPulse": {
            "onChange": {
              "enabled": null,
              "script": "\t_json \u003d \"\"\"\n[\n  {\n\t\"a1\": {\n\t  \"info\": [\n\t\t{\n\t\t  \"l0\": \"xa0\",\n\t\t  \"l1\": \"xa1\",\n\t\t  \"l2\": \"xa2\",\n\t\t  \"l3\": \"xa3\"\n\t\t},\n\t\t{\n\t\t  \"l0\": \"xb0\",\n\t\t  \"l1\": \"xb1\",\n\t\t  \"l2\": \"xb2\",\n\t\t  \"l3\": \"xb3\"\n\t\t}\n\t  ],\n\t  \"type\": \"h\"\n\t}\n  },\n  {\n\t\"a1\": {\n\t  \"info\": [\n\t\t{\n\t\t  \"l0\": \"ya0\",\n\t\t  \"l1\": \"ya1\",\n\t\t  \"l2\": \"ya2\",\n\t\t  \"l3\": \"ya3\"\n\t\t},\n\t\t{\n\t\t  \"l0\": \"ya0\",\n\t\t  \"l1\": \"ya1\",\n\t\t  \"l2\": \"ya2\",\n\t\t  \"l3\": \"ya3\"\n\t\t}\n\t  ],\n\t  \"type\": \"v\"\n\t}\n  }\n]\n\t\"\"\"\n\t\n\t\n\tif self.custom._isDev:\n\t\tif currentValue.value is True:\n\t\t\t#self.props.data \u003d system.util.jsonDecode(_json)\n\t\t\tpayload \u003d {}\n\t\t\tpayload[\u0027oneDay\u0027] \u003d system.date.now()\n\t\t\tpayload[\u0027facilityId\u0027] \u003d 4\n\t\t\tpayload[\u0027roomId\u0027] \u003d 47\n\t\t\t\n\t\t\t\n\t\t\tsystem.perspective.sendMessage(\u0027mhByCondition\u0027, payload \u003d payload)\n\t\t\tself.custom.jsonLastPayload \u003d system.util.jsonEncode(payload)\n\t\t\t\n\n\t\telse:\n\t\t\t#self.props.data \u003d system.dataset.clearDataset(self.props.data)\n\t\t\tself.props.data \u003d [] # [{key: None for key in self.props.data[0]}]\n\t\t\tself.custom.jsonLastPayload \u003d None\n\n\n"
            }
          },
          "props.filter.text": {
            "access": "PUBLIC"
          }
        },
        "props": {
          "cells": {
            "style": {
              "borderColor": "#CCFFFF",
              "borderStyle": "solid",
              "classes": "Table/Cell_Dashboard"
            }
          },
          "columns": [
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "A",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "center",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "A"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "view",
              "resizable": false,
              "sort": "none",
              "sortable": false,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "Shelter/Room Layout/Components/ver4/BedCell",
              "visible": true,
              "width": 160
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "B",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "center",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "B"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "view",
              "resizable": false,
              "sort": "none",
              "sortable": false,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "Shelter/Room Layout/Components/ver4/BedCell",
              "visible": true,
              "width": 160
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "C",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "center",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "C"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "view",
              "resizable": false,
              "sort": "none",
              "sortable": false,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "Shelter/Room Layout/Components/ver4/BedCell",
              "visible": true,
              "width": 160
            }
          ],
          "data": [
            {
              "A": {
                "info": [],
                "type": "x"
              },
              "B": {
                "info": [
                  {
                    "l0": 8,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  },
                  {
                    "l0": 7,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  }
                ],
                "type": "h"
              },
              "C": {
                "info": [
                  {
                    "l0": 2,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  },
                  {
                    "l0": 1,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  }
                ],
                "type": "h"
              }
            },
            {
              "A": {
                "info": [],
                "type": "x"
              },
              "B": {
                "info": [
                  {
                    "l0": 9,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  }
                ],
                "type": "h"
              },
              "C": {
                "info": [
                  {
                    "l0": 3,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  }
                ],
                "type": "h"
              }
            },
            {
              "A": {
                "info": [
                  {
                    "l0": 16,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  },
                  {
                    "l0": 15,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  }
                ],
                "type": "v"
              },
              "B": {
                "info": [
                  {
                    "l0": 11,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  },
                  {
                    "l0": 10,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  }
                ],
                "type": "v"
              },
              "C": {
                "info": [
                  {
                    "l0": 4,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  },
                  {
                    "l0": 5,
                    "l1": "occupied",
                    "l2": "07/19/2021",
                    "l3": "Eddie Billy Frierson"
                  }
                ],
                "type": "v"
              }
            },
            {
              "A": {
                "info": [],
                "type": "x"
              },
              "B": {
                "info": [
                  {
                    "l0": 13,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  },
                  {
                    "l0": 12,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  }
                ],
                "type": "h"
              },
              "C": {
                "info": [],
                "type": "x"
              }
            },
            {
              "A": {
                "info": [],
                "type": "x"
              },
              "B": {
                "info": [
                  {
                    "l0": 14,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  }
                ],
                "type": "h"
              },
              "C": {
                "info": [
                  {
                    "l0": 6,
                    "l1": "",
                    "l2": "",
                    "l3": ""
                  }
                ],
                "type": "h"
              }
            }
          ],
          "pager": {
            "bottom": false,
            "initialOption": 100
          },
          "rows": {
            "striped": {
              "enabled": false
            }
          },
          "style": {
            "classes": "Background/Default",
            "overflowX": "hidden"
          },
          "virtualized": false
        },
        "scripts": {
          "customMethods": [
            {
              "name": "getDataDb",
              "params": [
                "payload"
              ],
              "script": "\timport extend.query\n\t\n\tdeclaration, queryCte, query, orderBy, fetchOffset \u003d self.getQuery()\n\n\targs \u003d []\t\n\t###############################################\n\toneDay \u003d payload.get(\u0027oneDay\u0027)\n\targs +\u003d [oneDay]\n\n\t###############################################\n\tfacilityId\u003d payload.get(\u0027facilityId\u0027)\n\targs +\u003d [facilityId]\n\tsystem.perspective.print((\"payload.get(\u0027facilityId\u0027): \",payload.get(\u0027facilityId\u0027)))\n\t###############################################\n\troomId\u003d payload.get(\u0027roomId\u0027)\n\targs +\u003d [roomId]\n\n\n\t###############################################\n\toffset \u003d payload.get(\u0027offset\u0027)\n\tfetch \u003d payload.get(\u0027fetch\u0027)\n\tif offset is not None and fetch is not None:\n\t\t#counterQuery \u003d \u0027{}; WITH cte AS ({}) SELECT COUNT(1) cnt FROM cte\u0027.format(declaration, query)\n\t\t# declaration, queryCte, query, orderBy, fetchOffset\n\t\tcounterQuery \u003d \u0027{} {} ,cte AS ({}) SELECT COUNT(1) cnt FROM cte\u0027.format(declaration, queryCte, query)\n\t\tresultRowCount \u003d system.db.runScalarPrepQuery(counterQuery, args, \u0027HMSOps\u0027)\n\t\targs +\u003d [offset]\n\t\targs +\u003d [fetch]\t\n\t\n\t\tquery \u003d \u0027{} {} {} {} {}\u0027.format(declaration, queryCte, query, orderBy, fetchOffset)\n\t\tresult \u003d system.db.runPrepQuery(query, args, \u0027HMSOps\u0027)\n\t\n\telse:\n\t\tquery \u003d \u0027{} {} {} {}\u0027.format(declaration, queryCte, query, orderBy)\n\t\tresult \u003d system.db.runPrepQuery(query, args, \u0027HMSOps\u0027)\t\n\t\tresultRowCount \u003d result.rowCount\n\t\n\tsystem.perspective.print((\u0027Exec: args\u0027,args)) \n\t\n\treturn result, resultRowCount\n"
            },
            {
              "name": "getLayoutDb",
              "params": [
                "payload"
              ],
              "script": "\t\n\tfacilityId\u003d payload.get(\u0027facilityId\u0027)\n\troomId\u003d payload.get(\u0027roomId\u0027)\n\n\n\tquery \u003d \"\"\"\nSELECT [jsonLayout] \nFROM [HMSOps].[lodging].[RoomLayout]\nWHERE [roomId] \u003d ?\n\t\n\t\"\"\"\n\n\tjsonLayout \u003d system.db.runScalarPrepQuery(query,[roomId],\u0027HMSOps\u0027)\n\n\treturn system.util.jsonDecode(jsonLayout)\n\t\n\t\n\t\n\texample_roomlLayout_NextStepDorm \u003d\t[\n\t  [\n\t    {},\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        91,\n\t        92\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        85,\n\t        86\n\t      ]\n\t    }\n\t  ],\n\t  [\n\t    {},\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        93\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        87\n\t      ]\n\t    }\n\t  ],\n\t  [\n\t    {\n\t      \"type\": \"v\",\n\t      \"beds\": [\n\t        95,\n\t        96\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"v\",\n\t      \"beds\": [\n\t        97,\n\t        98\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"v\",\n\t      \"beds\": [\n\t        89,\n\t        88\n\t      ]\n\t    }\n\t  ],\n\t  [\n\t    {},\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        99,\n\t        100\n\t      ]\n\t    },\n\t    {}\n\t  ],\n\t  [\n\t    {},\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        94\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        90\n\t      ]\n\t    }\n\t  ]\n\t]\n\t\n\n\t\n"
            },
            {
              "name": "getPropsColumns",
              "params": [
                "layout"
              ],
              "script": "\t#colPossibleNames \u003d [\u0027A\u0027, \u0027B\u0027, \u0027C\u0027, \u0027D\u0027, \u0027E\u0027, \u0027F\u0027, \u0027G\u0027, \u0027H\u0027, \u0027I\u0027, \u0027J\u0027, \u0027K\u0027, \u0027L\u0027, \u0027M\u0027, \u0027N\u0027, \u0027O\u0027, \u0027P\u0027, \u0027Q\u0027, \u0027R\u0027, \u0027S\u0027, \u0027T\u0027, \u0027U\u0027, \u0027V\u0027, \u0027W\u0027, \u0027X\u0027, \u0027Y\u0027, \u0027Z\u0027]\n\t\n\timport string\n\tcolPossibleNames \u003d list(string.ascii_uppercase)\n\t\n\t\n\tjsonDefaultColumn \u003d \"\"\"\n{\n\t  \"field\": \"a1\",\n\t  \"visible\": true,\n\t  \"editable\": false,\n\t  \"render\": \"view\",\n\t  \"justify\": \"left\",\n\t  \"align\": \"center\",\n\t  \"resizable\": false,\n\t  \"sortable\": false,\n\t  \"sort\": \"none\",\n\t  \"viewPath\": \"Shelter/Room Layout/Components/ver4/BedCell\",\n\t  \"viewParams\": {},\n\t  \"boolean\": \"checkbox\",\n\t  \"number\": \"value\",\n\t  \"progressBar\": {\n\t    \"max\": 100,\n\t    \"bar\": {\n\t      \"color\": \"#62A3F6\",\n\t      \"linecap\": \"round\",\n\t      \"width\": 5\n\t    },\n\t    \"track\": {\n\t      \"color\": \"#DADADA\",\n\t      \"linecap\": \"round\",\n\t      \"width\": 2\n\t    },\n\t    \"value\": {\n\t      \"color\": \"#7D7D7D\",\n\t      \"show\": true\n\t    }\n\t  },\n\t  \"toggleSwitch\": {\n\t    \"color\": {\n\t      \"selected\": \"#2196F3\",\n\t      \"unselected\": \"#FFFFFF\"\n\t    }\n\t  },\n\t  \"numberFormat\": \"0,0.##\",\n\t  \"dateFormat\": \"MM/DD/YYYY\",\n\t  \"width\": 160,\n\t  \"strictWidth\": true,\n\t  \"header\": {\n\t    \"title\": \"a1\",\n\t    \"justify\": \"center\",\n\t    \"align\": \"center\",\n\t    \"style\": {\n\t      \"classes\": \"Table/Column_Header\"\n\t    }\n\t  },\n\t  \"footer\": {\n\t    \"title\": \"\",\n\t    \"justify\": \"left\",\n\t    \"align\": \"center\",\n\t    \"style\": {\n\t      \"classes\": \"\"\n\t    }\n\t  },\n\t  \"style\": {\n\t    \"classes\": \"Table/Column_Normal\"\n\t  }\n\t}\n\t\"\"\"\n\t#try:\n\t\t#colQty \u003d len(layout[0])\n\t#except:\n\t\t#colQty \u003d None\n\t\n\t#if not(colQty):\n\t\t#raise ValueError(\u0027Layout list of list is not correct!\u0027)\n\t\n\ttry:\n\t\tcolQty \u003d len(layout[0])\n\texcept:\n\t\tcolQty \u003d 1\n\t\t\n\tcolNames \u003d colPossibleNames[:colQty]\n\n\t_columns \u003d []\n\tfor col in colNames:\n\t\t# This conversion json_\u003edict create actually deepcopy\n\t\tpyColumn \u003d system.util.jsonDecode(jsonDefaultColumn)\n\t\t\n\t\t# Note: Field must contain only letters and numbers.\n\t\tpyColumn[\u0027field\u0027] \u003d col\n\t\tpyColumn[\u0027header\u0027][\u0027title\u0027] \u003d col\n\n\t\t_columns.append(pyColumn)\n\t\n\t#ystem.perspective.print((\"_columns: \",_columns))\n\t\n\treturn _columns\n\n\n\t_example \u003d \"\"\"\nroomlLayout_NextStepDorm:\n\t\n\t[\n\t  [\n\t    {},\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        8,\n\t        7\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        2,\n\t        1\n\t      ]\n\t    }\n\t  ],\n\t  [\n\t    {},\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        9\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        3\n\t      ]\n\t    }\n\t  ],\n\t  [\n\t    {\n\t      \"type\": \"v\",\n\t      \"beds\": [\n\t        16,\n\t        15\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"v\",\n\t      \"beds\": [\n\t        11,\n\t        10\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"v\",\n\t      \"beds\": [\n\t        4,\n\t        5\n\t      ]\n\t    }\n\t  ],\n\t  [\n\t    {},\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        13,\n\t        12\n\t      ]\n\t    },\n\t    {}\n\t  ],\n\t  [\n\t    {},\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        14\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        6\n\t      ]\n\t    }\n\t  ]\n\t]\n\t\"\"\"\n"
            },
            {
              "name": "correctTimeForClient",
              "params": [
                "pyds",
                "columnsToCorrect"
              ],
              "script": "\t\n\t# !!!!!!!!!!!  NOT TESTED !!!!!!!!!!!!!!!!!!!!!!!\n\t\n\t# Table automaticaly change datetime according to client timezone, \n\t# For this table we don\u0027t need automatic conversion, we must recorrect datetimes, according client timezone.\n\t# Actually to see same values like in db.\n\t\n\t# This is correction client against ignition server\n\t# TODO add correction to SQL server\n\tcorrectionTime \u003d int(60*(system.date.getTimezoneOffset() - self.session.props.device.timezone.utcOffset)) \n\t\n\tlistDateFix \u003d [[]*len(columnsToCorrect)]\n\tfor rowIndex, row in enumerate(pyds):\n\t\tfor colIndex, col in enumerate(columnsToCorrect):\n\t\t\tlistDateFix[colIndex].append(system.date.addMinutes(row[col], correctionTime))\n\t\n\n\tfor index, item in enumerate(listDateFix):\n\t\tcolNames \u003d system.dataset.getColumnHeaders(pyds)\n\t\tcolPosition \u003d colNames.index(columnsToCorrect[index])\n\t\tpyds \u003d system.dataset.filterColumns(pyds, [ x for x in colNames if x !\u003d columnsToCorrect[index]])\n\t\tpyds \u003d system.dataset.addColumn(pyds,colPosition,item,columnsToCorrect[index])\n\t\n\treturn pyds\n"
            },
            {
              "name": "setMisc",
              "params": [],
              "script": "\t\n\tself.props.cells.style\u003d {\n\t    \"classes\": \"Table/Cell_Dashboard\"\n\t}\n\t\n\tself.props.style \u003d {\n\t  \"classes\": \"Background/Default\",\n\t  \"overflowX\": \"hidden\"\n\t}\n"
            },
            {
              "name": "doByCondition",
              "params": [
                "payload"
              ],
              "script": "\timport java.lang\n\n\t# 1. Add fetch to payload if not exist. We can send from pager or use value self.view.params.fetch.\n\t# This should be step before offset\n\tfetch \u003d payload.get(\u0027fetch\u0027)\n\t\n\tif not(fetch):\n\t\tfetch \u003d self.view.params.fetch\n\t\n\t# If fetch value is integer greater then 0, pager exist\n\tif fetch and fetch \u003e 1:\n\t\tpayload[\u0027fetch\u0027] \u003d fetch\n\n\t\t#  2. If payload has \u0027offset\u0027, it means that comming from pager. Then take lastPayload \n\t\t# stored as json string, deserialize to python dict and  add node\u0027 offset\u0027\n\t\t# Else means payload is comming from conditions. Don\u0027t do anything just continue\n\t\tif payload.get(\u0027offset\u0027) is not None:\n\t\t\toffset \u003d payload[\u0027offset\u0027]\n\t\t\tpayload \u003d {}\n\t\t\tfor key in self.custom.lastPayload:\n\t\t\t\tpayload[key] \u003d self.custom.lastPayload[key]\n\t\t\t\n\t\t\t\n\t\t\tpayload[\u0027offset\u0027] \u003d offset\n\t\t\tpayload[\u0027fetch\u0027] \u003d fetch\n\t\telse:\n\t\t\tpayload[\u0027offset\u0027] \u003d 0\n\t\n\t# 3. Get data from DB. Data is dataset which contain only fetch number of rows. \n\t# _resultRowCount is scalar value which represent number of rows in case the that query is executed without  OFFSET ... FETCH...\n\t_data, _resultRowCount \u003d self.getDataDb(payload)\n\t_layout \u003d self.getLayoutDb(payload)\n\tsystem.perspective.print((\u0027_layout: \u0027, _layout))\n\t\n\tself.view.params.resultRowCount \u003d _resultRowCount\n\n\t\n\n\t# 4. Set some misc props if necessary (explicit)\n\t#self.setMisc()\n\n\n\t\n\t# 5. Step get columns props (explicit adjustment)\n\tself.props.columns \u003d self.getPropsColumns(_layout)\n\n\t# 6. Correct values in datetime column according client timezone. (check comments inside function)\n\t#_data \u003d self.correctTimeForClient(_data, [\u0027dob\u0027])\n\t\n\t# Set Kpis\n\t#self.sendMessageToKpis(_data)\n\n\n\t# 7. Add dummy empty raw if result is empty dataset. Reason to do that is to avoid loosing foqus on search cell in filters.\n\t\n\t_colNames \u003d system.dataset.getColumnHeaders(_data)\n\t\n\tif _data.rowCount \u003d\u003d 0:\n\t\t_lstData \u003d [{col: None for col in _colNames}]\n\telse:\n\t\t_pyds \u003d system.dataset.toPyDataSet(_data)\n\t\t_lstData \u003d [{col: row[col] for col in _colNames} for row in _pyds]\n\n\t#system.perspective.print((\u0027_lstData: \u0027,_lstData))\n\n\t_layoutAndData \u003d self.joinDataAndLayout(_lstData, _layout)\n\tself.props.data \u003d _layoutAndData\n\t\n\t#yy \u003d self.getBedInfo(None,_lstData)\n\t#system.perspective.print((\u0027yy: \u0027,yy))\n\n\t#_makeUped \u003d self.getMakeUpData(_lstData)\n\t#self.props.data \u003d _makeUped[:3]\n\t\n\t#self.custom.jsonLastPayload \u003d system.util.jsonEncode(payload)\n\t\n\t# Remove fetch and offset, it is not necessary to store.\n\t#payload.pop(\u0027offset\u0027,None)\n\t#payload.pop(\u0027fetch\u0027,None)\n\t#self.custom.lastPayload \u003d payload\n\n\n"
            },
            {
              "name": "getQuery",
              "params": [],
              "script": "\t\n\tdeclaration \u003d \t\"\"\"\n\n\t\"\"\"\n\t\n\tqueryCte \u003d \"\"\"\nWITH cte AS (\nSELECT TOP (1000) \n\t [Facility].[id] AS [facilityId]\n\t,[Facility].[facilityName]\n\t,[Facility].[beds]\n\t,[Facility].[rooms]\n\t,[Room].[roomName]\n\t,[Room].[isHandicapAccess]\n\t,[Room].[gender]\n\t,[Room].[smoking]\n\t,[Bed].[bedName]\n\t,TRY_CAST(SUBSTRING([roomName], patindex(\u0027%[0-9]%\u0027, [roomName]) - 1,10) AS INT) AS [roomNo]\n\t,TRY_CAST(SUBSTRING([bedName], patindex(\u0027%[0-9]%\u0027, [bedName]) - 1,10) AS INT) AS [bedNo]\nFROM [HMSOps].[lodging].[Facility]\n\tLEFT JOIN [lodging].[Room] ON [Room].[facilityId] \u003d [Facility].[id]\n\tLEFT JOIN [lodging].[Bed] ON [Bed].[roomId] \u003d [Room].[id]\nWHERE 1\u003d1\n\tAND [Facility].[timeRetired] IS NULL\n\tAND [Room].[timeRetired] IS NULL\n\tAND [Bed].[timeRetired] IS NULL\n)\nSELECT \n*\nFROM cte\n\n\t\"\"\"\n\torderBy \u003d \"\"\"\nORDER BY [facilityName]\n\t,CAST([roomNo] AS INT)\n\t,[roomName]\n\t,CAST([bedNo] AS INT)\n\t,[bedName]\n\"\"\"\n\n\n\tfetchOffset \u003d \"\"\"\nOFFSET ? ROWS \nFETCH NEXT ? ROWS ONLY;  \n\t\"\"\"\t\n\treturn declaration, queryCte, query, orderBy, fetchOffset"
            },
            {
              "name": "getMakeUpData",
              "params": [
                "lstData"
              ],
              "script": "\t\n\n\t_style \u003d {\t\"color\": \"#0c4e85\",\n\t\t\t\t\"cursor\": \"pointer\",\n\t\t\t\t\"fontFamily\": \"Proxima Nova ExCn Medium\",\n\t\t\t\t\"text-align\": \"left\"}\n\t\t\t\t\t\n\n\n\tfor row in lstData:\n\t\tfor key in row:\n\t\t\tif key \u003d\u003d \u0027employerName\u0027:\n\t\t\t\trow[key] \u003d {\u0027value\u0027: row[key] if row[key] is not None else \u0027\u0027, \"style\": _style}\n\t\t\tif key \u003d\u003d \u0027website\u0027:\n\t\t\t\trow[key] \u003d row[key][:27] + \u0027 ~ \u0027 + row[key][-7:] if row[key] and len(row[key]) \u003e 40 else row[key]\n\treturn lstData"
            },
            {
              "name": "joinDataAndLayout",
              "params": [
                "data",
                "layout"
              ],
              "script": "\t#colPossibleNames \u003d [\u0027A\u0027, \u0027B\u0027, \u0027C\u0027, \u0027D\u0027, \u0027E\u0027, \u0027F\u0027, \u0027G\u0027, \u0027H\u0027, \u0027I\u0027, \u0027J\u0027, \u0027K\u0027, \u0027L\u0027, \u0027M\u0027, \u0027N\u0027, \u0027O\u0027, \u0027P\u0027, \u0027Q\u0027, \u0027R\u0027, \u0027S\u0027, \u0027T\u0027, \u0027U\u0027, \u0027V\u0027, \u0027W\u0027, \u0027X\u0027, \u0027Y\u0027, \u0027Z\u0027]\n\t\n\timport string\n\tcolPossibleNames \u003d list(string.ascii_uppercase)\n\t\n\t\n\tlayoutData \u003d []\n\tfor rowIndex, row in enumerate(layout):\n\t\tlayoutData.append({})\n\t\tfor colIndex, cell in enumerate(row):\n\t\t\t\n\t\t\t_colName \u003d colPossibleNames[colIndex]\n\t\t\tlayoutData[rowIndex][_colName] \u003d {}\n\t\t\t\n\t\t\t_type \u003d cell.get(\u0027type\u0027)\n\t\t\t\n\t\t\tif _type:\n\t\t\t\tlayoutData[rowIndex][_colName][\u0027type\u0027] \u003d _type\n\t\t\telse:\n\t\t\t\tlayoutData[rowIndex][_colName][\u0027type\u0027] \u003d \u0027x\u0027\n\t\t\t\n\t\t\t_beds \u003d cell.get(\u0027beds\u0027)\n\t\t\tif _beds and isinstance(_beds,list):\n\t\t\t\t_info \u003d self.getBedInfo(_beds, data)\n\t\t\t\tlayoutData[rowIndex][_colName][\u0027info\u0027] \u003d _info\n\t\t\telse:\n\t\t\t\tlayoutData[rowIndex][_colName][\u0027info\u0027] \u003d []\n\t\n\t# implement your method here\n\t\n\t\n\t#system.perspective.print((\u0027layoutData: \u0027, layoutData))\n\t\n\treturn layoutData\n\t\n\t_example \u003d \"\"\"\nroomlLayout_NextStepDorm:\n\t\n\t[\n\t  [\n\t    {},\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        8,\n\t        7\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        2,\n\t        1\n\t      ]\n\t    }\n\t  ],\n\t  [\n\t    {},\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        9\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        3\n\t      ]\n\t    }\n\t  ],\n\t  [\n\t    {\n\t      \"type\": \"v\",\n\t      \"beds\": [\n\t        16,\n\t        15\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"v\",\n\t      \"beds\": [\n\t        11,\n\t        10\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"v\",\n\t      \"beds\": [\n\t        4,\n\t        5\n\t      ]\n\t    }\n\t  ],\n\t  [\n\t    {},\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        13,\n\t        12\n\t      ]\n\t    },\n\t    {}\n\t  ],\n\t  [\n\t    {},\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        14\n\t      ]\n\t    },\n\t    {\n\t      \"type\": \"h\",\n\t      \"beds\": [\n\t        6\n\t      ]\n\t    }\n\t  ]\n\t]\n\t\n\t\n\t############################################################################################################################\n\t\n\t\n\tExample table data:\n\t\n\t\n\t[\n\t  {\n\t    \"a1\": {\n\t      \"type\": \"h\",\n\t      \"info\": [\n\t        {\n\t          \"l0\": \"xa0\",\n\t          \"l1\": \"xa1\",\n\t          \"l2\": \"xa2\",\n\t          \"l3\": \"xa3\"\n\t        },\n\t        {\n\t          \"l0\": \"xb0\",\n\t          \"l1\": \"xb1\",\n\t          \"l2\": \"xb2\",\n\t          \"l3\": \"xb3\"\n\t        }\n\t      ]\n\t    }\n\t  },\n\t  {\n\t    \"a1\": {\n\t      \"type\": \"v\",\n\t      \"info\": [\n\t        {\n\t          \"l0\": \"ya0\",\n\t          \"l1\": \"ya1\",\n\t          \"l2\": \"ya2\",\n\t          \"l3\": \"ya3\"\n\t        },\n\t        {\n\t          \"l0\": \"ya0\",\n\t          \"l1\": \"ya1\",\n\t          \"l2\": \"ya2\",\n\t          \"l3\": \"ya3\"\n\t        }\n\t      ]\n\t    }\n\t  }\n\t]\n\n\t\n\"\"\""
            },
            {
              "name": "getBedInfo",
              "params": [
                "beds",
                "data"
              ],
              "script": "\txbeds \u003d [\n\t  87,\n\t  88\n\t]\n\t\n\txinfo \u003d [\n\t\t{\n\t\t  \"l0\": \"xa0\",\n\t\t  \"l1\": \"xa1\",\n\t\t  \"l2\": \"xa2\",\n\t\t  \"l3\": \"xa3\"\n\t\t},\n\t\t{\n\t\t  \"l0\": \"xb0\",\n\t\t  \"l1\": \"xb1\",\n\t\t  \"l2\": \"xb2\",\n\t\t  \"l3\": \"xb3\"\n\t\t}\n\t]\n\t# implement your method here\n\tinfo \u003d []\n\n\tfor bed in beds:\n\t\t_dictAux \u003d {\u0027l0\u0027: \u0027err\u0027 , \u0027l1\u0027: \u0027\u0027, \u0027l2\u0027: \u0027\u0027, \u0027l3\u0027: \u0027\u0027 }\n\t\t\n\t\tfor item in data:\n\t\t\tif item[\u0027bedId\u0027] \u003d\u003d bed:\n\t\t\t\t_bedState \u003d item[\u0027bedState\u0027] if item[\u0027bedState\u0027] else \u0027\u0027\n\t\t\t\t_bedNameNo \u003d item[\u0027bedNameNo\u0027] if item[\u0027bedNameNo\u0027] else \u0027\u0027\n\t\t\t\t_bedStateDate \u003d system.date.format(item[\u0027bedStateDate\u0027],\u0027MM/dd/yyyy\u0027) if item[\u0027bedStateDate\u0027] else \u0027\u0027\n\t\t\t\t_participantName \u003d item[\u0027participantName\u0027] if item[\u0027participantName\u0027] else \u0027\u0027\n\t\t\t\t_dictAux \u003d {\u0027l0\u0027:_bedNameNo , \u0027l1\u0027: _bedState, \u0027l2\u0027: _bedStateDate, \u0027l3\u0027: _participantName }\n\t\t\t\tbreak\n\t\t\n\t\tinfo.append(_dictAux)\n\n\t#system.perspective.print((\u0027info: \u0027, info))\n\treturn info"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "mhByCondition",
              "pageScope": true,
              "script": "\t#ystem.perspective.print((\u0027Msgstep1\u0027))\n\tself.doByCondition(payload)",
              "sessionScope": false,
              "viewScope": false
            }
          ]
        },
        "type": "ia.display.table"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "alignContent": "flex-start",
      "alignItems": "flex-start",
      "direction": "column",
      "justify": "space-around",
      "style": {
        "classes": "Background/Default",
        "overflow": "visible"
      }
    },
    "type": "ia.container.flex"
  }
}