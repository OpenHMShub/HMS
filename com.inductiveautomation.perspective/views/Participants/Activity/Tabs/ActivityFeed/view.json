{
  "custom": {
    "activity_feed": [
      {
        "CardType": "Header",
        "Date": 1759190400000,
        "ID": 0,
        "Size": ""
      },
      {
        "CardType": "RegistrationUpdated",
        "Date": 1756996333867,
        "ID": 0,
        "Size": ""
      },
      {
        "CardType": "ParticipantAdded",
        "Date": 1756996140537,
        "ID": 0,
        "Size": ""
      }
    ]
  },
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\tproject \u003d \"HMS\" \n\tparticipant_id \u003d self.params.participantID\n\tresults \u003d []\n\t## Check if parameters are filled in correctly \n\tif (participant_id is None) or (int(participant_id) \u003c 0):\n\t\tvalid \u003d False\n\t\tsystem.perspective.print(\"Participant ID Error\")\n\telse:\n\t\tvalid \u003d True\n\t\tsystem.perspective.print(\"Data Valid\")\n\t\t\t\n\t### Check if data is valid otherwise show error message.\n\tif valid:\n\t\ttry:\n\t\t\t#Get KPI Info\n\t\t\tpath \u003d \"Participants/KPI/Detail/IncidentDetail\"\n\t\t\tparameters \u003d {\"participant_id\":participant_id}\n\t\t\t#system.perspective.print(\u0027Delete Case Note: \u0027 + str(employer_id))\n\t\t\tresults \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\t\n\n\t\t\tif results is not None:\n\t\t\t\t#KPI1 Total Incidents\t\t\n\t\t\t\t#totalIncidents \u003d results.getRowCount()\n\t\t\t\ttotalIncidents \u003d participant_id\t\t\n\t\t\t\t\"\"\"#KPI1 Hire Percentage\t\t\n\t\t\t\thireDecisions \u003d 0\n\t\t\t\thiredApplicants \u003d 0\n\t\t\t\tfor row in range(results.getRowCount()):\n\t\t\t\t\tif results.getValueAt(row, \"hired_state\") is not None:\n\t\t\t\t\t\thireDecisions +\u003d 1\n\t\t\t\t\t\tif results.getValueAt(row, \"hired_state\"):\n\t\t\t\t\t\t\thiredApplicants +\u003d 1\n\t\t\t\t\t\t\t\n\t\t\t\thiredApplicantsfloat \u003d float(hiredApplicants)\n\t\t\t\thireDecisionsfloat \u003d float(hireDecisions)\n\t\t\t\tif hireDecisionsfloat \u003e 1:\n\t\t\t\t\thirePercent \u003d int((hiredApplicantsfloat/hireDecisionsfloat)*100)\n\t\t\t\telse:\n\t\t\t\t\thirePercent \u003d 0\n\t\t\t\t\"\"\"\t\n\t\t\t\t#KPI3 Applicants A Month\n\t\t\t\tMonthCount \u003d 6\n\t\t\t\tincidentsMonthly \u003d []\n\t\t\t\tnow \u003d system.date.now()\n\t\t\t\tfor i in reversed(range(MonthCount)):\n\t\t\t\t\timonthago \u003d system.date.addMonths(now, -i)\n\t\t\t\t\tcmonthago \u003d system.date.addMonths(imonthago, 1)\n\t\t\t\t\tmonth \u003d system.date.getMonth(imonthago) + 1\n\t\t\t\t\tdateMonth \u003d system.date.getMonth(imonthago)\n\t\t\t\t\tdateYear \u003d system.date.getYear(imonthago)\n\t\t\t\t\tdate \u003d system.date.getDate(dateYear, dateMonth, 01)\n\t\t\t\t\tdatetime \u003d system.date.setTime(date, 00, 00, 00)\n\t\t\t\t\tappend_item \u003d {\"time\": system.date.format(datetime, \"M/d/yyyy\") , \"incidents\": 0}\n\t\t\t\t\tresultMonths \u003d 0\n\t\t\t\t\tfor row in range(results.getRowCount()):\n\t\t\t\t\t\tresultMonth \u003d results.getValueAt(row, \"incident_date\")\n\t\t\t\t\t\tif month \u003d\u003d resultMonth:\n\t\t\t\t\t\t\tresultMonths +\u003d 1\n\t\t\t\t\t\t\t\n\t\t\t\t\tappend_item[\"incidents\"] \u003d resultMonths\n\t\t\t\t\tincidentsMonthly.append(append_item)\n\n\t\t\t\t\t#Update Detail KPIs\n\t\t\t\t\tsystem.perspective.sendMessage(\"totalIncidentsDetail\", payload \u003d {\"totalIncidentsDetail\": totalIncidents}, scope \u003d \"session\")\n\t\t\t\t\t#system.perspective.sendMessage(\"hirePercentDetail\", payload \u003d {\"hirePercentDetail\": hirePercent}, scope \u003d \"session\")\n\t\t\t\t\tsystem.perspective.sendMessage(\"participantsDetailIncidentsPerMonth\", payload \u003d {\"incidentsMonthly\": incidentsMonthly}, scope \u003d \"session\")\n\t\t\t\t\n\t\t\telse:\n\t\t\t\t#Update Detail KPIs\n\t\t\t\tsystem.perspective.sendMessage(\"totalApplicantsDetail\", payload \u003d {\"totalApplicantsDetail\": 0}, scope \u003d \"session\")\n\t\t\t\tsystem.perspective.sendMessage(\"hirePercentDetail\", payload \u003d {\"hirePercentDetail\": 0}, scope \u003d \"session\")\t\n\t\t\t\t\n\t\t\t\n\t\texcept:\n\t\t\tlogger \u003d system.util.getLogger(\"Employer get KPI data failed on Detail ActivityFeed tab onStartUp\")\n\t\t\t#msg \u003d traceback.format_exc()\n\t\t\t#logger.error(msg)\t\n\telse:\n\t\tlogger \u003d system.util.getLogger(\"No Employer ID to get KPI data, failed on Detail ActivityFeed tab onStartUp\")\n\t\t#msg \u003d traceback.format_exc()\n\t\t#logger.error(msg)"
        },
        "enabled": false,
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "participantID": 8
  },
  "propConfig": {
    "custom.activity_feed": {
      "binding": {
        "config": {
          "parameters": {
            "activity_range": "{/root/Embed_Filter.props.params.activity_range}",
            "participantId": "{view.params.participantID}"
          },
          "queryPath": "Participants/Activities/ActivityFeed"
        },
        "transforms": [
          {
            "code": "\timport traceback\n\ttry:\n\t\t#system.perspective.print(\u0027Participants Activity Feed Refresh\u0027)\n\t\tdisplay_list \u003d [\u0027Header\u0027]#Always display the date headers\n\t\tfilters \u003d self.getChild(\"root\").getChild(\"Embed_Filter\").props.params.selection\n\t\t#filters \u003d None\n\t\tif filters is not None:\n\t\t\tfor filter in range(len(filters)):\n\t\t\t\tdisplay_list.append(str(filters[filter]))\n\t\tsystem.perspective.print(display_list)\n\t\t#instances is the data object to return\n\t\tinstances \u003d []\n\t\t#Iterate over the results of the query\n\t\tfor row in range(value.getRowCount()):\n\t\t\tobject \u003d {}\n\t\t\tobject[\u0027ID\u0027] \u003d value.getValueAt(row, \"ID\")\n\t\t\tobject[\u0027CardType\u0027] \u003d value.getValueAt(row, \"CardType\")\n\t\t\tobject[\u0027Date\u0027] \u003d system.date.toMillis(value.getValueAt(row, \"Date\"))\n\t\t\tobject[\u0027Size\u0027] \u003d \"\"\n\t\t\tif len(display_list) \u003e 1:#A filter exists if \u003e 1\n\t\t\t\tif object[\u0027CardType\u0027] in display_list:\n\t\t\t\t\tinstances.append(object)\n\t\t\telse:#No filters\n\t\t\t\tinstances.append(object)\n\t\t\n\t\treturn instances\n\t\n\t\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"Participants ActivityFeed FlexRepeater_Activity.props.instances\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)",
            "type": "script"
          }
        ],
        "type": "query"
      },
      "onChange": {
        "enabled": null,
        "script": "\tproject \u003d \"HMS\" \n\tparticipant_id \u003d self.params.participantID\n\tresults \u003d []\n\t## Check if parameters are filled in correctly \n\tif (participant_id is None) or (int(participant_id) \u003c 0):\n\t\tvalid \u003d False\n\t\t#system.perspective.print(\"Participant ID Error\")\n\telse:\n\t\tvalid \u003d True\n\t\t#system.perspective.print(\"Data Valid\")\n\t\t\t\n\t### Check if data is valid otherwise show error message.\n\tif valid:\n\t\ttry:\n\t\t\t#Get KPI Info\n\t\t\tpath \u003d \"Participants/KPI/Detail/IncidentDetail\"\n\t\t\tparameters \u003d {\"participant_id\":participant_id}\n\t\t\t#system.perspective.print(\u0027Delete Case Note: \u0027 + str(employer_id))\n\t\t\tresults \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\n\n\t\t\tif results is not None:\n\t\t\t\tif results.getRowCount() \u003e 0:\n\t\t\t\t\t#system.perspective.print(\"Results Not None\")\n\t\t\t\t\t\n\t\t\t\t\t#KPI1 Total Incidents\t\t\n\t\t\t\t\ttotalIncidents \u003d results.getRowCount()\n\t\t\t\t\t#totalIncidents \u003d paticipant_id\n\t\t\t\t\t#system.perspective.print(\"KPI1\")\n\t\t\t\t\t\t\t\n\t\t\t\t\t#KPI2 Days Since Last Incident\t\t\n\t\t\t\t\tnow \u003d system.date.now()\n\t\t\t\t\tlastIncident \u003d results.getValueAt(results.getRowCount() - 1, \"incident_date\")\n\t\t\t\t\tdaysLastIncidnet \u003d system.date.daysBetween(lastIncident, now)\n\t\t\t\t\t#system.perspective.print(\"KPI2\")\n\t\t\t\t\t\n\t\t\t\t\t#KPI3 Applicants A Month\n\t\t\t\t\tMonthCount \u003d 6\n\t\t\t\t\tincidentsMonthly \u003d []\n\t\t\t\t\tnow \u003d system.date.now()\n\t\t\t\t\tfor i in reversed(range(MonthCount)):\n\t\t\t\t\t\timonthago \u003d system.date.addMonths(now, -i)\n\t\t\t\t\t\tcmonthago \u003d system.date.addMonths(imonthago, 1)\n\t\t\t\t\t\tmonth \u003d system.date.getMonth(imonthago) + 1\n\t\t\t\t\t\tdateMonth \u003d system.date.getMonth(imonthago)\n\t\t\t\t\t\tdateYear \u003d system.date.getYear(imonthago)\n\t\t\t\t\t\tdate \u003d system.date.getDate(dateYear, dateMonth, 01)\n\t\t\t\t\t\tdatetime \u003d system.date.setTime(date, 00, 00, 00)\n\t\t\t\t\t\tappend_item \u003d {\"time\": system.date.format(datetime, \"M/d/yyyy\") , \"incidents\": 0}\n\t\t\t\t\t\tresultMonths \u003d 0\n\t\t\t\t\t\tfor row in range(results.getRowCount()):\n\t\t\t\t\t\t\tresultMonth \u003d results.getValueAt(row, \"incident_month\")\n\t\t\t\t\t\t\tif month \u003d\u003d resultMonth:\n\t\t\t\t\t\t\t\tresultMonths +\u003d 1\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tappend_item[\"incidents\"] \u003d resultMonths\n\t\t\t\t\t\tincidentsMonthly.append(append_item)\n\t\t\t\t\t\t#system.perspective.print(\"KPI3\")\n\t\t\t\t\t\t\n\t\t\t\t\t#Update Detail KPIs\n\t\t\t\t\tsystem.perspective.sendMessage(\"totalIncidentsDetail\", payload \u003d {\"totalIncidentsDetail\": totalIncidents}, scope \u003d \"page\")\n\t\t\t\t\tsystem.perspective.sendMessage(\"daysLastIncidnetDetail\", payload \u003d {\"daysLastIncidnet\": daysLastIncidnet}, scope \u003d \"page\")\n\t\t\t\t\tsystem.perspective.sendMessage(\"participantsDetailIncidentsPerMonth\", payload \u003d {\"incidentsMonthly\": incidentsMonthly}, scope \u003d \"page\")\n\t\t\t\t\t\n\t\t\t\telse:\n\t\t\t\t\t#Update Detail KPIs\n\t\t\t\t\tsystem.perspective.sendMessage(\"totalIncidentsDetail\", payload \u003d {\"totalIncidentsDetail\": 0}, scope \u003d \"session\")\n\t\t\t\t\tsystem.perspective.sendMessage(\"daysLastIncidnetDetail\", payload \u003d {\"daysLastIncidnet\": 0}, scope \u003d \"session\")\n\t\t\t\t\t#KPI3 Update\n\t\t\t\t\tMonthCount \u003d 6\n\t\t\t\t\tincidentsMonthly \u003d []\n\t\t\t\t\tnow \u003d system.date.now()\n\t\t\t\t\tfor i in reversed(range(MonthCount)):\n\t\t\t\t\t\timonthago \u003d system.date.addMonths(now, -i)\n\t\t\t\t\t\tcmonthago \u003d system.date.addMonths(imonthago, 1)\n\t\t\t\t\t\tmonth \u003d system.date.getMonth(imonthago) + 1\n\t\t\t\t\t\tdateMonth \u003d system.date.getMonth(imonthago)\n\t\t\t\t\t\tdateYear \u003d system.date.getYear(imonthago)\n\t\t\t\t\t\tdate \u003d system.date.getDate(dateYear, dateMonth, 01)\n\t\t\t\t\t\tdatetime \u003d system.date.setTime(date, 00, 00, 00)\n\t\t\t\t\t\tappend_item \u003d {\"time\": system.date.format(datetime, \"M/d/yyyy\") , \"incidents\": 0}\n\t\t\t\t\t\tincidentsMonthly.append(append_item)\n\t\t\t\t\t\t\n\t\t\t\t\tsystem.perspective.sendMessage(\"participantsDetailIncidentsPerMonth\", payload \u003d {\"incidentsMonthly\": incidentsMonthly}, scope \u003d \"session\")\t\n\t\t\t\t\t\n\t\t\t\t\t#system.perspective.print(\"KPI No Row Data Update\")\n\t\t\telse:\n\t\t\t\t#Update Detail KPIs\n\t\t\t\tsystem.perspective.sendMessage(\"totalIncidentsDetail\", payload \u003d {\"totalIncidentsDetail\": 0}, scope \u003d \"session\")\n\t\t\t\tsystem.perspective.sendMessage(\"daysLastIncidnetDetail\", payload \u003d {\"daysLastIncidnet\": 0}, scope \u003d \"session\")\n\t\t\t\t#KPI3 Update\n\t\t\t\tMonthCount \u003d 6\n\t\t\t\tincidentsMonthly \u003d []\n\t\t\t\tnow \u003d system.date.now()\n\t\t\t\tfor i in reversed(range(MonthCount)):\n\t\t\t\t\timonthago \u003d system.date.addMonths(now, -i)\n\t\t\t\t\tcmonthago \u003d system.date.addMonths(imonthago, 1)\n\t\t\t\t\tmonth \u003d system.date.getMonth(imonthago) + 1\n\t\t\t\t\tdateMonth \u003d system.date.getMonth(imonthago)\n\t\t\t\t\tdateYear \u003d system.date.getYear(imonthago)\n\t\t\t\t\tdate \u003d system.date.getDate(dateYear, dateMonth, 01)\n\t\t\t\t\tdatetime \u003d system.date.setTime(date, 00, 00, 00)\n\t\t\t\t\tappend_item \u003d {\"time\": system.date.format(datetime, \"M/d/yyyy\") , \"incidents\": 0}\n\t\t\t\t\tincidentsMonthly.append(append_item)\n\t\t\t\t\t\n\t\t\t\tsystem.perspective.sendMessage(\"participantsDetailIncidentsPerMonth\", payload \u003d {\"incidentsMonthly\": incidentsMonthly}, scope \u003d \"session\")\t\n\t\t\t\t\n\t\t\t\t#system.perspective.print(\"KPI Dataset Is None Update\")\t\t\t\n\t\texcept:\n\t\t\tlogger \u003d system.util.getLogger(\"Participant get KPI data failed on Detail ActivityFeed tab onStartUp\")\n\t\t\t#msg \u003d traceback.format_exc()\n\t\t\t#logger.error(msg)\t\n\t\t\t#system.perspective.print(\"KPI Except\")\n\telse:\n\t\tlogger \u003d system.util.getLogger(\"No Participant ID to get KPI data, failed on Detail ActivityFeed tab onStartUp\")\n\t\t#msg \u003d traceback.format_exc()\n\t\t#logger.error(msg)\n\t\t#system.perspective.print(\"KPI Else\")"
      },
      "persistent": true
    },
    "params.participantID": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {},
  "root": {
    "children": [
      {
        "meta": {
          "name": "Embed_Filter"
        },
        "position": {
          "basis": "30px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.participant_id": {
            "binding": {
              "config": {
                "path": "view.params.participantID"
              },
              "type": "property"
            }
          },
          "props.params.selection": {
            "onChange": {
              "enabled": null,
              "script": "\tif origin \u003d\u003d \u0027Browser\u0027:\n\t\t#system.perspective.print(\u0027Filter Changed\u0027)\n\t\tview \u003d self.view\n\t\tview.refreshBinding(\"custom.activity_feed\")"
            }
          }
        },
        "props": {
          "params": {
            "activity_range": 365,
            "selection": null
          },
          "path": "Participants/Activity/Filter/ActivityFilter"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "FlexRepeater_Activity"
        },
        "position": {
          "grow": 1
        },
        "propConfig": {
          "props.instances": {
            "binding": {
              "config": {
                "path": "view.custom.activity_feed"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "alignContent": "flex-start",
          "direction": "column",
          "elementPosition": {
            "basis": "auto",
            "grow": 0,
            "shrink": 0
          },
          "elementStyle": {
            "classes": "ActivityCards/Card"
          },
          "path": "Participants/Activity/ActivityCard",
          "useDefaultViewWidth": false
        },
        "type": "ia.display.flex-repeater"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Alternative"
      }
    },
    "type": "ia.container.flex"
  }
}