{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\ttry:\n\t\troot \u003d self.getChild(\"root\")\n\t\troot.setPropsDropdowns()\n\t\t#emvSearch \u003d root.getChild(\"emvSearch\")\n\t\t#emvSearch.props.params.keyUpPulse \u003d False\n\texcept:\n\t\timport traceback\n\t\tlogger \u003d system.util.getLogger(\"Shelter\")\n\t\tmsg \u003d self.name + \u0027:\\n\u0027\n\t\tmsg +\u003d traceback.format_exc()\n\t\tlogger.error(msg)\t\t\t"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "allSelection": 1,
    "congregation": null,
    "dateRangeFrom": "Fri Jun 06 13:14:23 UTC 2025 00:00:00",
    "dateRangeTo": "Fri Jun 06 13:14:23 UTC 2025 23:59:59",
    "program": null,
    "searchText": "%%",
    "shelter": null
  },
  "propConfig": {
    "params.allSelection": {
      "binding": {
        "config": {
          "path": "/root/emvAll.props.params.selection"
        },
        "transforms": [
          {
            "code": "\tif value \u003d\u003d None or value \u003d\u003d -1:\n\t\tvalue \u003d 1\n\treturn value",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.congregation": {
      "binding": {
        "config": {
          "path": "/root/emvCongregation.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.dateRangeFrom": {
      "binding": {
        "config": {
          "path": "session.custom.dateRangeFromDate"
        },
        "transforms": [
          {
            "code": "\tdate \u003d str(value) + \u0027 00:00:00\u0027\n\treturn date",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.dateRangeTo": {
      "binding": {
        "config": {
          "path": "session.custom.dateRangeToDate"
        },
        "transforms": [
          {
            "code": "\tdate \u003d str(value) + \u0027 23:59:59\u0027\n\treturn date",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.program": {
      "binding": {
        "config": {
          "path": "/root/emvProgram.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.searchText": {
      "binding": {
        "config": {
          "path": "/root/emvSearch.props.params.searchText"
        },
        "transforms": [
          {
            "code": "\tif value is None or value \u003d\u003d \u0027\u0027 or len(value) \u003d\u003d 0:\n\t\treturn \"%%\"\n\telse:\n\t\treturn \"%\" + str(value) + \"%\"",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.shelter": {
      "binding": {
        "config": {
          "path": "/root/emvShelter.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 30,
      "width": 1200
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Placeholder"
        },
        "position": {
          "basis": "200px",
          "display": false,
          "grow": 1
        },
        "props": {
          "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvDateRange"
        },
        "position": {
          "basis": "180px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.selectedDateRange": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()"
            }
          }
        },
        "props": {
          "params": {
            "selectedDateRange": " 2025-06-06 13:14:23.783 to 2025-06-06 13:14:23.783"
          },
          "path": "Shelter/Templates/DateRange/DateInput",
          "style": {
            "classes": "Filter/Filter_Container",
            "marginLeft": "40px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvAll"
        },
        "position": {
          "basis": "150px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.actionPerformedPulse": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\t"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [
              {
                "label": "All",
                "value": 1
              },
              {
                "label": "Shelter",
                "value": 2
              },
              {
                "label": "Winter Shelter",
                "value": 3
              }
            ],
            "placeholder": "All",
            "selection": 1
          },
          "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container",
            "marginLeft": "4px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvShelter"
        },
        "position": {
          "basis": "150px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.actionPerformedPulse": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\t"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [
              {
                "label": "All Guest House",
                "value": "All Guest House"
              },
              {
                "label": "Living Waters Center",
                "value": "Living Waters Center"
              },
              {
                "label": "Living Waters Center",
                "value": "Living Waters Center"
              },
              {
                "label": "New Hope Community Chapel",
                "value": "New Hope Community Chapel"
              }
            ],
            "placeholder": "Shelter",
            "selection": null
          },
          "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container",
            "marginLeft": "4px"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\t\n\tquery \u003d \"\"\" \nSELECT facilityName FROM lodging.Facility WHERE facilityName IS NOT NULL AND timeRetired IS NULL ORDER BY facilityName\n\t\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tfacilityNameList \u003d [ dict(value \u003d x[0],label \u003d x[0]) for x in result]\n\tfacilityNameList.insert(0,{\u0027value\u0027:\u0027All Guest House\u0027,\u0027label\u0027:\u0027All Guest House\u0027})\n\t\n\t\n\tself.props.params.options \u003d facilityNameList\n#\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[0]) for x in result]\n\t\n"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvCongregation"
        },
        "position": {
          "basis": "160px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.actionPerformedPulse": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\t"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [],
            "placeholder": "Congregation",
            "selection": null
          },
          "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container",
            "marginLeft": "4px"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\t\n\tquery \u003d \"\"\" \n\tSELECT locationName FROM shelter.Location\n\twhere timeRetired IS NULL\n\torder by locationName\t\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[0]) for x in result]\n\t\n"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvProgram"
        },
        "position": {
          "basis": "150px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.actionPerformedPulse": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\t"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [
              {
                "label": "Food Assistance Program",
                "value": "Food Assistance Program"
              },
              {
                "label": "GPD Shelter Program",
                "value": "GPD Shelter Program"
              }
            ],
            "placeholder": "Program",
            "selection": null
          },
          "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\t\n\tquery \u003d \"\"\"\nSELECT programName FROM interaction.Program WHERE programName IS NOT NULL AND timeRetired IS NULL ORDER BY programName\n\t\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[0]) for x in result]\n"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "toExcel"
        },
        "position": {
          "basis": "30px",
          "shrink": 0
        },
        "props": {
          "params": {
            "defaultFilePrefix": "Shelter"
          },
          "path": "1_TEMPLATES/Tables/TableToExcel"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "toPDF"
        },
        "position": {
          "basis": "30px",
          "shrink": 0
        },
        "props": {
          "params": {
            "defaultFilePrefix": "Shelter"
          },
          "path": "1_TEMPLATES/Tables/TableToPDF"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "FlexContainer"
        },
        "position": {
          "basis": "50px",
          "grow": 1
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "lblSearch"
        },
        "position": {
          "basis": "50px"
        },
        "props": {
          "style": {
            "classes": "Table/Filter_Header",
            "textAlign": "end"
          },
          "text": "Search:"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "emvSearch"
        },
        "position": {
          "basis": "220px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.keyUpPulse": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()\t"
            }
          }
        },
        "props": {
          "params": {
            "clear": false,
            "keyUpPulse": false,
            "searchText": ""
          },
          "path": "Providers/Dashboard/Components/Filters/Search_Bar",
          "style": {
            "classes": "Table/Search_Bar"
          },
          "useDefaultViewWidth": true
        },
        "type": "ia.display.view"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\troot \u003d self.parent\n\t\n\temvAll \u003d self.getSibling(\"emvAll\")\n\temvShelter \u003d self.getSibling(\"emvShelter\")\n\temvCongregation \u003d self.getSibling(\"emvCongregation\")\n\temvProgram \u003d self.getSibling(\"emvProgram\")\n\temvSearch \u003d self.getSibling(\"emvSearch\")\n\t\n\temvAll.props.params.clear \u003d True\n\temvShelter.props.params.clear \u003d True \n\temvCongregation.props.params.clear \u003d True\n\temvProgram.props.params.clear \u003d True\n\temvSearch.props.params.clear \u003d True\n\tself.session.custom.dateRangeFromDate \u003d system.date.format(system.date.now(), \"MM/dd/yyyy\")\n\tself.session.custom.dateRangeToDate \u003d system.date.format(system.date.now(), \"MM/dd/yyyy\")\n\t\n"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "clearConditions"
        },
        "position": {
          "basis": "30px",
          "shrink": 0
        },
        "props": {
          "image": {
            "height": 16,
            "icon": {
              "color": "#0C4E8B",
              "path": "material/close"
            },
            "position": "center",
            "width": 16
          },
          "style": {
            "classes": "Filter/Filter_Border_Default Filter/Filter_Container",
            "marginRight": "40px"
          },
          "text": "",
          "textStyle": {
            "classes": "GreyColor"
          }
        },
        "type": "ia.input.button"
      }
    ],
    "custom": {
      "_devClean": false,
      "_devPulse": false,
      "_isDev": false
    },
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "custom._devClean": {
        "onChange": {
          "enabled": null,
          "script": "\t\n\temvProviderType \u003d self.getChild(\"emvProviderType\")\n\temvActivityRange \u003d self.getChild(\"emvActivityRange\")\n\temvSearch \u003d self.getChild(\"emvSearch\")\n\t\n\temvProviderType.props.params.clear \u003d True\n\temvActivityRange.props.params.clear \u003d True\n\temvSearch.props.params.clear \u003d True\n\t\n\n\t\n\tif self.custom._devClean:\n\t\tself.custom._devClean \u003d False"
        }
      },
      "custom._devPulse": {
        "onChange": {
          "enabled": null,
          "script": "\t\n\temvProviderType \u003d self.getChild(\"emvProviderType\")\n\temvActivityRange \u003d self.getChild(\"emvActivityRange\")\n\temvSearch \u003d self.getChild(\"emvSearch\")\n\t\n\t\n\tif self.custom._isDev:\n\t\tif currentValue.value is True:\n\t\t\tself.setPropsDropdowns()\n\t\telse:\n\t\t\temvProviderType.props.params.options \u003d []\n\t\t\temvActivityRange.props.params.options \u003d []\n\t\n\temvProviderType.props.params.actionPerformedPulse \u003d False\n\temvActivityRange.props.params.actionPerformedPulse \u003d False\n\temvSearch.props.params.keyUpPulse \u003d False"
        }
      }
    },
    "props": {
      "style": {
        "classes": "Filter/Header_Text"
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "setPropsDropdowns",
          "params": [],
          "script": "\temvShelter \u003d self.getChild(\"emvShelter\")\n\temvProgram \u003d self.getChild(\"emvProgram\")\n\temvDateRange \u003d self.getChild(\"emvDateRange\")\n\temvCongregation \u003d self.getChild(\"emvCongregation\")\n\t\n\temvShelter.setOptions()\n\temvProgram.setOptions()\n\temvCongregation.setOptions()\n\t## Set default option as All\n\tself.getChild(\"emvAll\").props.params.selection \u003d 1\n#\temvDateRange.setOptions()"
        },
        {
          "name": "sendMsgCondition",
          "params": [
            "payload\u003dNone"
          ],
          "script": "\t\n\temvShelter \u003d self.getChild(\"emvShelter\")\n\temvProgram \u003d self.getChild(\"emvProgram\")\n#\temvDateRange \u003d self.getChild(\"emvDateRange\")\n\temvSearch \u003d self.getChild(\"emvSearch\")\n\t\n\t\n\tif payload is None:\n\t\tpayload \u003d {}\n\t\tpayload[\u0027shelter\u0027] \u003d emvShelter.props.params.selection\n\t\tpayload[\u0027program\u0027] \u003d emvProgram.props.params.selection\n\t\tpayload[\u0027dateRangeFrom\u0027] \u003d self.session.custom.dateRangeFromDate\n\t\tpayload[\u0027dateRangeTo\u0027] \u003d self.session.custom.dateRangeToDate\n\t\tpayload[\u0027searchText\u0027] \u003d emvSearch.props.params.searchText\n#\tsystem.perspective.print(payload)\n#\tsystem.perspective.sendMessage(\u0027mhByCondition\u0027, payload)\n\t\n"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "refreshReservations",
          "pageScope": true,
          "script": "\tself.sendMsgCondition()",
          "sessionScope": true,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}