{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\tnewTaskData \u003d {\n\t\t\t\t\t  \"Created\": None,\n\t\t\t\t\t  \"Due Date\": \"\",\n\t\t\t\t\t  \"Task\": \"\",\n\t\t\t\t\t  \"Task Type\": \"\",\n\t\t\t\t\t  \"completed\": \"\",\n\t\t\t\t\t  \"id\": -1,\n\t\t\t\t\t  \"notes\": \"\",\n\t\t\t\t\t  \"priority\": None,\n\t\t\t\t\t  \"priorityId\": None,\n\t\t\t\t\t  \"staffId\": -1,\n\t\t\t\t\t  \"staffName\": \"\",\n\t\t\t\t\t  \"status\": \"Not Started\",\n\t\t\t\t\t  \"statusId\": 1,\n\t\t\t\t\t  \"taskTypeId\": None,\n\t\t\t\t\t  \"participantId\": None,\n\t\t\t\t\t  \"assignerName\": \"\",\n\t\t\t\t\t  \"assignerId\": self.session.custom.loggedInStaffEmployeeID\n\t\t\t\t\t}\n\tnewTaskData[\u0027Created\u0027] \u003d system.date.format(system.date.now(),\u0027MM/dd/YYYY hh:mm a\u0027)\n\tself.params.Row_Data \u003d newTaskData"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "Row_Data": {
      "Created": "09/03/2025 11:36 AM",
      "Due Date": "",
      "Task": "",
      "Task Type": "",
      "assignerId": -1,
      "assignerName": "",
      "completed": null,
      "id": -1,
      "notes": "",
      "participantId": "",
      "priority": null,
      "priorityId": null,
      "staffId": -1,
      "staffName": "",
      "status": "Not Started",
      "statusId": 1,
      "taskTypeId": null
    },
    "view_height": "286px"
  },
  "propConfig": {
    "custom.edit_data": {
      "persistent": true
    },
    "params.Row_Data": {
      "paramDirection": "inout",
      "persistent": true
    },
    "params.view_height": {
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 286,
      "width": 1440
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView Header"
        },
        "position": {
          "basis": "25px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.Text": {
            "binding": {
              "config": {
                "path": "view.params.Row_Data.id"
              },
              "transforms": [
                {
                  "expression": "if({value} \u003d -1,\u0027New Task\u0027,\u0027Edit Task\u0027)",
                  "type": "expression"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "path": "1_globalTEMPLATES/Header/Header"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedView Row1"
        },
        "position": {
          "basis": "200px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.Row_Data": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.params.Row_Data"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Participants/Tasks/Dashboard/Main/Edit/Row",
          "style": {
            "marginLeft": 25,
            "marginRight": 25
          }
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tnewTaskData \u003d {\n\t\t\t\t  \"Created\": None,\n\t\t\t\t  \"Due Date\": \"\",\n\t\t\t\t  \"Task\": \"\",\n\t\t\t\t  \"Task Type\": \"\",\n\t\t\t\t  \"completed\": \"\",\n\t\t\t\t  \"id\": -1,\n\t\t\t\t  \"notes\": \"\",\n\t\t\t\t  \"priority\": None,\n\t\t\t\t  \"priorityId\": None,\n\t\t\t\t  \"staffId\": -1,\n\t\t\t\t  \"staffName\": \"\",\n\t\t\t\t  \"status\": \"Not Started\",\n\t\t\t\t  \"statusId\": 1,\n\t\t\t\t  \"taskTypeId\": None,\n\t\t\t\t  \"participantId\": None,\n\t\t\t\t  \"assignerName\": \"\",\n\t\t\t\t  \"assignerId\": self.session.custom.loggedInStaffEmployeeID\n\t\t\t\t}\n\tnewTaskData[\u0027Created\u0027] \u003d system.date.format(system.date.now(),\u0027MM/dd/YYYY hh:mm a\u0027)\n\tself.view.params.Row_Data \u003d newTaskData\n\tsystem.perspective.sendMessage(\"clearTaskSelection\", payload \u003d {}, scope \u003d \u0027session\u0027)\n\t\n\t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_new"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Secondary",
                "marginBottom": "5px",
                "marginLeft": "20px",
                "marginTop": "5px"
              },
              "text": "New Task"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "dom": {
                "onClick": [
                  {
                    "config": {
                      "script": "\tdataToUpdate \u003d self.parent.parent.getChild(\"EmbeddedView Row1\").props.params.Row_Data\n\tlogger \u003d system.util.getLogger(\"SaveParticipantTaskLogger\")\n#\tsystem.perspective.print(\"dataToUpdate\")\n#\tsystem.perspective.print(dataToUpdate)\n\t\n\tmissingFields \u003d \"\"\n\t## check that you have all mandetaory fields entered\n\tif dataToUpdate[\u0027Task\u0027] \u003d\u003d None or dataToUpdate[\u0027Task\u0027] \u003d\u003d \"\":\n\t\tmissingFields \u003d missingFields + \", Subject\"  \n#\tif dataToUpdate[\u0027taskTypeId\u0027] \u003d\u003d None or dataToUpdate[\u0027taskTypeId\u0027] \u003d\u003d \"\" or dataToUpdate[\u0027taskTypeId\u0027] \u003d\u003d -1:\n#\t\tmissingFields \u003d missingFields + \", Task Type\"\n#\tif dataToUpdate[\u0027priorityId\u0027] \u003d\u003d None or dataToUpdate[\u0027priorityId\u0027] \u003d\u003d \"\" or dataToUpdate[\u0027priorityId\u0027] \u003d\u003d -1:\n#\t\tmissingFields \u003d missingFields + \", Priority\"\n\tif dataToUpdate[\u0027staffId\u0027] \u003d\u003d None or dataToUpdate[\u0027staffId\u0027] \u003d\u003d \"\" or dataToUpdate[\u0027staffId\u0027] \u003d\u003d -1:\n\t\tmissingFields \u003d missingFields + \", Staff\"\t\n#\tif dataToUpdate[\u0027assignerId\u0027] \u003d\u003d None or dataToUpdate[\u0027assignerId\u0027] \u003d\u003d \"\" or dataToUpdate[\u0027assignerId\u0027] \u003d\u003d -1:\n#\t\t\tmissingFields \u003d missingFields + \", Assigner\"\t\n#\tif dataToUpdate[\u0027statusId\u0027] \u003d\u003d None or dataToUpdate[\u0027statusId\u0027] \u003d\u003d \"\" or dataToUpdate[\u0027statusId\u0027] \u003d\u003d -1:\n#\t\tmissingFields \u003d missingFields + \", Status\"\t\t\n#\tif dataToUpdate[\u0027participantId\u0027] \u003d\u003d None or dataToUpdate[\u0027participantId\u0027] \u003d\u003d \"\" or dataToUpdate[\u0027participantId\u0027] \u003d\u003d -1:\n#\t\tmissingFields \u003d missingFields + \", Congregation\"\t\n\tif dataToUpdate[\u0027Due Date\u0027] \u003d\u003d None or dataToUpdate[\u0027Due Date\u0027] \u003d\u003d \"\" :\n\t\tmissingFields \u003d missingFields + \", Due Date\"\n\t\n\tif missingFields !\u003d \"\":\n\t\terrorMessage \u003d \"Ensure \" + missingFields[1:] + \" value(s) are selected\"\n\t\tself.getSibling(\"Label\").showMessage(errorMessage)\n\telse:\n\t\ttry:\n\t\t\tactivityType \u003d \"\"\n\t\t\tnoteIdForLog \u003d dataToUpdate[\u0027id\u0027]\n\t\t\tstatusToAssign \u003d None\n\t\t\tparticipantId \u003d None if (dataToUpdate[\u0027participantId\u0027]\u003d\u003d\u0027\u0027 or dataToUpdate[\u0027participantId\u0027]\u003d\u003d-1) else dataToUpdate[\u0027participantId\u0027]\n\t\t\ttaskTypeId \u003d None if (dataToUpdate[\u0027taskTypeId\u0027]\u003d\u003d\u0027\u0027 or dataToUpdate[\u0027taskTypeId\u0027]\u003d\u003d-1) else dataToUpdate[\u0027taskTypeId\u0027]\n\t\t\tpriorityId \u003d None if (dataToUpdate[\u0027priorityId\u0027]\u003d\u003d\u0027\u0027 or dataToUpdate[\u0027priorityId\u0027]\u003d\u003d-1) else dataToUpdate[\u0027priorityId\u0027]\n\t\t\tstatusId \u003d None if (dataToUpdate[\u0027statusId\u0027]\u003d\u003d\u0027\u0027 or dataToUpdate[\u0027statusId\u0027]\u003d\u003d-1) else dataToUpdate[\u0027statusId\u0027]\n\t\t\tgetStatus \u003d \"SELECT Status FROM shelter.Status where id \u003d ?\"\n\t\t\tresult \u003d system.db.runPrepQuery(getStatus, [dataToUpdate[\u0027statusId\u0027]])\n\t\t\tif result is not None and result.getRowCount()\u003e0:\n\t\t\t\tstatusToAssign \u003d result.getValueAt(0,0)\n\t\t\tif dataToUpdate[\u0027id\u0027] \u003d\u003d -1:\n\t\t\t\tinsertQ \u003d \"INSERT INTO participant.Tasks (participantId, taskTypeId, title, dueDate, staffId, assignerId, priority, statusId, notes, timeCreated) VALUES (?,?,?,?,?,?,?,?,?, CURRENT_TIMESTAMP)\"\n\t\t\t\tparam \u003d [participantId, taskTypeId, dataToUpdate[\u0027Task\u0027],dataToUpdate[\u0027Due Date\u0027], dataToUpdate[\u0027staffId\u0027], dataToUpdate[\u0027assignerId\u0027], priorityId, statusId , dataToUpdate[\u0027notes\u0027]]\n\t\t\t\tlogger.info(\"insertQ: \" + insertQ)\n\t\t\t\tlogger.info(\"param: \" + param)\n\t\t\t\tnewTaskId \u003d system.db.runPrepUpdate(insertQ, [participantId, taskTypeId, dataToUpdate[\u0027Task\u0027],dataToUpdate[\u0027Due Date\u0027], dataToUpdate[\u0027staffId\u0027], dataToUpdate[\u0027assignerId\u0027], priorityId, statusId , dataToUpdate[\u0027notes\u0027]], getKey \u003d 1) #, dataToUpdate[\u0027Created\u0027] \n\t\t\t\tself.getSibling(\"Label\").showMessage(\"New task created successfully.\")\n\t\t\t\tself.view.params.Row_Data.id \u003d newTaskId\n\t\t\t\tactivityType \u003d \"task_added\"\n\t\t\t\tnoteIdForLog \u003d newTaskId\n\t\t\telse:\n\t\t\t\tupdateQ \u003d \"UPDATE participant.Tasks SET participantId \u003d ?, taskTypeId \u003d ?, title \u003d ?, dueDate \u003d ?, staffId \u003d ?, assignerId \u003d ?, priority \u003d ?, statusId \u003d ?, notes \u003d ?, completedDate \u003d ? WHERE id \u003d ?\"\n#\t\t\t\tsystem.perspective.print(updateQ)\n\t\t\t\tcompletedDate \u003d self.parent.parent.getChild(\"EmbeddedView Row1\").props.params.Row_Data.completed\n\t\t\t\tcompletedDate \u003d None if completedDate \u003d\u003d \u0027\u0027 else completedDate\n\t\t\t\tsystem.db.runPrepUpdate(updateQ, [participantId, taskTypeId, dataToUpdate[\u0027Task\u0027],dataToUpdate[\u0027Due Date\u0027], dataToUpdate[\u0027staffId\u0027], dataToUpdate[\u0027assignerId\u0027], priorityId, statusId , dataToUpdate[\u0027notes\u0027], completedDate, dataToUpdate[\u0027id\u0027]])\n\t\t\t\tself.getSibling(\"Label\").showMessage(\"Task updated successfully.\")\n\t\t\t\tactivityType \u003d \"task_modified\"\n\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshTasksDashboardData\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t## clear data from edit section\n\t\t\tnewTaskData \u003d {\n\t\t\t\t\t\t  \"Created\": None,\n\t\t\t\t\t\t  \"Due Date\": \"\",\n\t\t\t\t\t\t  \"Task\": \"\",\n\t\t\t\t\t\t  \"Task Type\": \"\",\n\t\t\t\t\t\t  \"completed\": \"\",\n\t\t\t\t\t\t  \"id\": -1,\n\t\t\t\t\t\t  \"notes\": \"\",\n\t\t\t\t\t\t  \"priority\": None,\n\t\t\t\t\t\t  \"priorityId\": None,\n\t\t\t\t\t\t  \"staffId\": -1,\n\t\t\t\t\t\t  \"staffName\": \"\",\n\t\t\t\t\t\t  \"status\": \"Not Started\",\n\t\t\t\t\t\t  \"statusId\": 1,\n\t\t\t\t\t\t  \"taskTypeId\": None,\n\t\t\t\t\t\t  \"participantId\": None,\n\t\t\t\t\t\t  \"assignerName\": \"\",\n\t\t\t\t\t\t  \"assignerId\": self.session.custom.loggedInStaffEmployeeID\n\t\t\t\t\t\t}\n\t\t\tnewTaskData[\u0027Created\u0027] \u003d system.date.format(system.date.now(),\u0027MM/dd/YYYY hh:mm a\u0027)\n\t\t\tself.view.params.Row_Data \u003d newTaskData\n\t\t\t## also log to the Activity Log\n\t\t\tinsertLogQ \u003d \"INSERT INTO participant.TaskActivityLog (participantId, activityType, activityDescription, timeCreated, status) VALUES (?,?,?,CURRENT_TIMESTAMP, ?)\"\n\t\t\tsystem.db.runPrepUpdate(insertLogQ, [dataToUpdate[\u0027participantId\u0027],activityType,dataToUpdate[\u0027Task\u0027],statusToAssign])\n\t\texcept Exception as e:\n\t\t\tsystem.perspective.print(\"exception : \" + str(e))\n\t\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong. Please try again.\")\t"
                    },
                    "enabled": false,
                    "scope": "G",
                    "type": "script"
                  },
                  {
                    "config": {
                      "script": "\tdataToUpdate \u003d self.parent.parent.getChild(\"EmbeddedView Row1\").props.params.Row_Data\n\tlogger \u003d system.util.getLogger(\"SaveParticipantTaskLogger\")\n#\tsystem.perspective.print(\"dataToUpdate\")\n#\tsystem.perspective.print(dataToUpdate)\n\t\n\tmissingFields \u003d \"\"\n\t## check that you have all mandetaory fields entered\n\tif dataToUpdate[\u0027Task\u0027] \u003d\u003d None or dataToUpdate[\u0027Task\u0027] \u003d\u003d \"\":\n\t\tmissingFields \u003d missingFields + \", Subject\"  \n#\tif dataToUpdate[\u0027taskTypeId\u0027] \u003d\u003d None or dataToUpdate[\u0027taskTypeId\u0027] \u003d\u003d \"\" or dataToUpdate[\u0027taskTypeId\u0027] \u003d\u003d -1:\n#\t\tmissingFields \u003d missingFields + \", Task Type\"\n#\tif dataToUpdate[\u0027priorityId\u0027] \u003d\u003d None or dataToUpdate[\u0027priorityId\u0027] \u003d\u003d \"\" or dataToUpdate[\u0027priorityId\u0027] \u003d\u003d -1:\n#\t\tmissingFields \u003d missingFields + \", Priority\"\n\tif dataToUpdate[\u0027staffId\u0027] \u003d\u003d None or dataToUpdate[\u0027staffId\u0027] \u003d\u003d \"\" or dataToUpdate[\u0027staffId\u0027] \u003d\u003d -1:\n\t\tmissingFields \u003d missingFields + \", Staff\"\t\n#\tif dataToUpdate[\u0027assignerId\u0027] \u003d\u003d None or dataToUpdate[\u0027assignerId\u0027] \u003d\u003d \"\" or dataToUpdate[\u0027assignerId\u0027] \u003d\u003d -1:\n#\t\t\tmissingFields \u003d missingFields + \", Assigner\"\t\n#\tif dataToUpdate[\u0027statusId\u0027] \u003d\u003d None or dataToUpdate[\u0027statusId\u0027] \u003d\u003d \"\" or dataToUpdate[\u0027statusId\u0027] \u003d\u003d -1:\n#\t\tmissingFields \u003d missingFields + \", Status\"\t\t\n#\tif dataToUpdate[\u0027participantId\u0027] \u003d\u003d None or dataToUpdate[\u0027participantId\u0027] \u003d\u003d \"\" or dataToUpdate[\u0027participantId\u0027] \u003d\u003d -1:\n#\t\tmissingFields \u003d missingFields + \", Congregation\"\t\n\tif dataToUpdate[\u0027Due Date\u0027] \u003d\u003d None or dataToUpdate[\u0027Due Date\u0027] \u003d\u003d \"\" :\n\t\tmissingFields \u003d missingFields + \", Due Date\"\n\t\n\tif missingFields !\u003d \"\":\n\t\terrorMessage \u003d \"Ensure \" + missingFields[1:] + \" value(s) are selected\"\n\t\tself.getSibling(\"Label\").showMessage(errorMessage)\n\telse:\n\t\ttry:\n\t\t\tactivityType \u003d \"\"\n\t\t\tnoteIdForLog \u003d dataToUpdate[\u0027id\u0027]\n\t\t\tstatusToAssign \u003d None\n\t\t\tparticipantId \u003d None if (dataToUpdate[\u0027participantId\u0027]\u003d\u003d\u0027\u0027 or dataToUpdate[\u0027participantId\u0027]\u003d\u003d-1) else dataToUpdate[\u0027participantId\u0027]\n\t\t\ttaskTypeId \u003d None if (dataToUpdate[\u0027taskTypeId\u0027]\u003d\u003d\u0027\u0027 or dataToUpdate[\u0027taskTypeId\u0027]\u003d\u003d-1) else dataToUpdate[\u0027taskTypeId\u0027]\n\t\t\tpriorityId \u003d None if (dataToUpdate[\u0027priorityId\u0027]\u003d\u003d\u0027\u0027 or dataToUpdate[\u0027priorityId\u0027]\u003d\u003d-1) else dataToUpdate[\u0027priorityId\u0027]\n\t\t\tstatusId \u003d None if (dataToUpdate[\u0027statusId\u0027]\u003d\u003d\u0027\u0027 or dataToUpdate[\u0027statusId\u0027]\u003d\u003d-1) else dataToUpdate[\u0027statusId\u0027]\n\t\t\t\n\t\t\tassignerId \u003d None if (dataToUpdate[\u0027assignerId\u0027]\u003d\u003d\u0027\u0027 or dataToUpdate[\u0027assignerId\u0027]\u003d\u003d-1) else dataToUpdate[\u0027assignerId\u0027]\n\t\t\t\n\t\t\tgetStatus \u003d \"SELECT Status FROM shelter.Status where id \u003d ?\"\n\t\t\tresult \u003d system.db.runPrepQuery(getStatus, [dataToUpdate[\u0027statusId\u0027]])\n\t\t\tif result is not None and result.getRowCount()\u003e0:\n\t\t\t\tstatusToAssign \u003d result.getValueAt(0,0)\n\t\t\tif dataToUpdate[\u0027id\u0027] \u003d\u003d -1:\n\t\t\t\tinsertQ \u003d \"INSERT INTO participant.Tasks (participantId, taskTypeId, title, dueDate, staffId, assignerId, priority, statusId, notes, timeCreated) VALUES (?,?,?,?,?,?,?,?,?, CURRENT_TIMESTAMP)\"\n\t\t\t\tparam \u003d [participantId, taskTypeId, dataToUpdate[\u0027Task\u0027],dataToUpdate[\u0027Due Date\u0027], dataToUpdate[\u0027staffId\u0027], dataToUpdate[\u0027assignerId\u0027], priorityId, statusId , dataToUpdate[\u0027notes\u0027]]\n\t\t\t\tlogger.info(\"insertQ: \" + insertQ)\n\t\t\t\tlogger.info(\"param: \" + str(param))\n\t\t\t\t\n\t\t\t\tnewTaskId \u003d system.db.runPrepUpdate(insertQ, [participantId, taskTypeId, dataToUpdate[\u0027Task\u0027], dataToUpdate[\u0027Due Date\u0027], dataToUpdate[\u0027staffId\u0027], assignerId, priorityId, statusId, dataToUpdate[\u0027notes\u0027]], getKey \u003d 1) #, dataToUpdate[\u0027Created\u0027] \n\t\t\t\t#newTaskId \u003d system.db.runPrepUpdate(insertQ, [participantId, taskTypeId, dataToUpdate[\u0027Task\u0027], dataToUpdate[\u0027Due Date\u0027], 44, 44, priorityId, statusId, dataToUpdate[\u0027notes\u0027]], getKey \u003d 1) #, dataToUpdate[\u0027Created\u0027] \n\t\t\t\t\n\t\t\t\tself.getSibling(\"Label\").showMessage(\"New task created successfully.\")\n\t\t\t\tself.view.params.Row_Data.id \u003d newTaskId\n\t\t\t\tactivityType \u003d \"task_added\"\n\t\t\t\tnoteIdForLog \u003d newTaskId\n\t\t\telse:\n\t\t\t\tupdateQ \u003d \"UPDATE participant.Tasks SET participantId \u003d ?, taskTypeId \u003d ?, title \u003d ?, dueDate \u003d ?, staffId \u003d ?, assignerId \u003d ?, priority \u003d ?, statusId \u003d ?, notes \u003d ?, completedDate \u003d ? WHERE id \u003d ?\"\n#\t\t\t\tsystem.perspective.print(updateQ)\n\t\t\t\tcompletedDate \u003d self.parent.parent.getChild(\"EmbeddedView Row1\").props.params.Row_Data.completed\n\t\t\t\tcompletedDate \u003d None if completedDate \u003d\u003d \u0027\u0027 else completedDate\n\t\t\t\tsystem.db.runPrepUpdate(updateQ, [participantId, taskTypeId, dataToUpdate[\u0027Task\u0027],dataToUpdate[\u0027Due Date\u0027], dataToUpdate[\u0027staffId\u0027], assignerId, priorityId, statusId, dataToUpdate[\u0027notes\u0027], completedDate, dataToUpdate[\u0027id\u0027]])\n\t\t\t\tself.getSibling(\"Label\").showMessage(\"Task updated successfully.\")\n\t\t\t\tactivityType \u003d \"task_modified\"\n\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshTasksDashboardData\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t## clear data from edit section\n\t\t\tnewTaskData \u003d {\n\t\t\t\t\t\t  \"Created\": None,\n\t\t\t\t\t\t  \"Due Date\": \"\",\n\t\t\t\t\t\t  \"Task\": \"\",\n\t\t\t\t\t\t  \"Task Type\": \"\",\n\t\t\t\t\t\t  \"completed\": \"\",\n\t\t\t\t\t\t  \"id\": -1,\n\t\t\t\t\t\t  \"notes\": \"\",\n\t\t\t\t\t\t  \"priority\": None,\n\t\t\t\t\t\t  \"priorityId\": None,\n\t\t\t\t\t\t  \"staffId\": -1,\n\t\t\t\t\t\t  \"staffName\": \"\",\n\t\t\t\t\t\t  \"status\": \"Not Started\",\n\t\t\t\t\t\t  \"statusId\": 1,\n\t\t\t\t\t\t  \"taskTypeId\": None,\n\t\t\t\t\t\t  \"participantId\": None,\n\t\t\t\t\t\t  \"assignerName\": \"\",\n\t\t\t\t\t\t  \"assignerId\": self.session.custom.loggedInStaffEmployeeID\n\t\t\t\t\t\t}\n\t\t\tnewTaskData[\u0027Created\u0027] \u003d system.date.format(system.date.now(),\u0027MM/dd/YYYY hh:mm a\u0027)\n\t\t\tself.view.params.Row_Data \u003d newTaskData\n\t\t\t## also log to the Activity Log\n\t\t\tinsertLogQ \u003d \"INSERT INTO participant.TaskActivityLog (participantId, activityType, activityDescription, timeCreated, status) VALUES (?,?,?,CURRENT_TIMESTAMP, ?)\"\n\t\t\tsystem.db.runPrepUpdate(insertLogQ, [dataToUpdate[\u0027participantId\u0027],activityType,dataToUpdate[\u0027Task\u0027],statusToAssign])\n\t\texcept Exception as e:\n\t\t\timport traceback\n\t\t\tlogger.error(\"Exception while saving task: \" + str(e))\n\t\t\tlogger.error(traceback.format_exc())\n\t\t\tself.getSibling(\"Label\").showMessage(\"Error: \" + str(e))"
                    },
                    "scope": "G",
                    "type": "script"
                  }
                ]
              }
            },
            "meta": {
              "name": "button_update"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.Row_Data.id} \u003d -1, \"SAVE TASK\", \"UPDATE TASK\")"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              }
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\t### Declare parameters\n\tproject \u003d \"HMS\" \n\tid \u003d self.view.params.Row_Data.id\n\t\t\t\n\ttry:\n\t\tpath \u003d \"Participants/Tasks/Delete_Task\"\n\t\tparameters \u003d {\"row_id\":id}\n\t\t\n\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\t\n\n\t\t##### Refresh the table\n\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshTasksDashboardData\", payload\u003d{}, scope\u003d\"session\")\n\t\t\n\t\t### Let the user know that the record was deleted\n\t\tself.getSibling(\"Label\").showMessage(\"Task Deleted.\")\t\n\t\tnewTaskData \u003d {\n\t\t\t\t  \"Created\": None,\n\t\t\t\t  \"Due Date\": \"\",\n\t\t\t\t  \"Task\": \"\",\n\t\t\t\t  \"Task Type\": \"\",\n\t\t\t\t  \"completed\": \"\",\n\t\t\t\t  \"id\": -1,\n\t\t\t\t  \"notes\": \"\",\n\t\t\t\t  \"priority\": \"\",\n\t\t\t\t  \"priorityId\": -1,\n\t\t\t\t  \"staffId\": -1,\n\t\t\t\t  \"staffName\": \"\",\n\t\t\t\t  \"status\": \"Not Started\",\n\t\t\t\t  \"statusId\": 1,\n\t\t\t\t  \"taskTypeId\": -1,\n\t\t\t\t  \"participantId\": -1,\n\t\t\t\t  \"assignerName\": \"\",\n\t\t\t\t  \"assignerId\": -1\n\t\t\t\t}\n\t\tself.view.params.Row_Data \u003d newTaskData\n\t\t\n\texcept:\n\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while deleting data. Please try again.\")\t\n\n\t\t\n\t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_delete"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.Row_Data.id} \u003e -1 \u0026\u0026 {session.custom.isAdministrator}, True, False)"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Delete",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              },
              "text": "Delete Task"
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "Label",
              "visible": false
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Text/Error_Message"
              },
              "text": "Please fill in all the fields correctly before saving."
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "showMessage",
                  "params": [
                    "message"
                  ],
                  "script": "\timport time\n\tself.props.text \u003d message\n\tself.meta.visible \u003d True\n\ttime.sleep(5)\n\tself.meta.visible \u003d False\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "root Actions"
        },
        "position": {
          "basis": "50px",
          "shrink": 0
        },
        "props": {
          "style": {
            "borderTopColor": "#9db8d1",
            "borderTopStyle": "solid",
            "borderTopWidth": "1px",
            "classes": "Background/Default",
            "marginTop": "5px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "type": "ia.container.flex"
  }
}