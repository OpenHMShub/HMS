{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\ttry:\n\t\tpayload \u003d{\u0027offset\u0027:0,\u0027fetch\u0027 :100 }\n\t\t#system.perspective.sendMessage(\u0027mhByCondition_ProvReff\u0027, payload \u003d payload)\n\n\texcept:\n\t\timport traceback\n\t\tlogger \u003d system.util.getLogger(\"{}\".format(\u0027Providers_Table onStartUp\u0027))\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)\t\n\n"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "fetch": 100,
    "resultRowCount": 5
  },
  "propConfig": {
    "params.fetch": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.resultRowCount": {
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 620,
      "width": 1200
    }
  },
  "root": {
    "children": [
      {
        "custom": {
          "_devPulse": false,
          "_devTxt": "",
          "_isDev": false,
          "jsonLastPayload": null,
          "lastPayload": {
            "activity_start": null,
            "program_id": null,
            "provider_id": 30,
            "referral_status_id": 5,
            "search_text": ""
          }
        },
        "events": {
          "component": {
            "onRowClick": {
              "config": {
                "script": "\tselectedColumn \u003d self.props.selection.selectedColumn\n\t#system.perspective.print(selectedColumn)\n\tif selectedColumn \u003d\u003d \"name\": \n\t\t#participantID \u003d self.props.data.getValueAt(event.row, \u0027participant_id\u0027)\n\t\tparticipantID \u003d self.props.data[event.row][\u0027participant_id\u0027]\n\t\tif participantID is None:\n\t\t\treturn\t\n\t\t\n\t\ttab_id \u003d 1\n\t\tsystem.perspective.print((\u0027participantID\u0027, participantID))\n\t\tsystem.perspective.navigate(view \u003d \u0027Participants/Detail/Participant_Detail\u0027, params \u003d {\u0027participantID\u0027:participantID, \u0027tab_id\u0027: 1})\n\telse:\n\t\tpass\t"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Table"
        },
        "position": {
          "grow": 1
        },
        "propConfig": {
          "custom._devPulse": {
            "onChange": {
              "enabled": null,
              "script": "\t\n\tif self.custom._isDev:\t\n\t\tif currentValue.value is True:\n\t\t\tpayload \u003d {}\n\t\t\tpayload[\u0027provider_id\u0027] \u003d 30\n\t\t\tpayload[\u0027program_id\u0027] \u003d None\n\t\t\tpayload[\u0027referral_status_id\u0027] \u003d 5\n\t\t\tpayload[\u0027activity_start\u0027] \u003d None\n\t\t\tpayload[\u0027search_text\u0027] \u003d \u0027\u0027\n\t\t\t\n\t\t\tsystem.perspective.sendMessage(\u0027mhByCondition_ProvReff\u0027, payload \u003d payload)\n\t\t\tself.custom.jsonLastPayload \u003d system.util.jsonEncode(payload)\n\n\t\telse:\n\t\t\t#self.props.data \u003d system.dataset.clearDataset(self.props.data)\n\t\t\tself.props.data \u003d [{key: None for key in self.props.data[0]}]\n\t\t\tself.custom.jsonLastPayload \u003d None\n\n\n"
            }
          },
          "props.filter.text": {
            "access": "PUBLIC"
          }
        },
        "props": {
          "cells": {
            "style": {
              "classes": "Table/Cell_Detail"
            }
          },
          "columns": [
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "participant_id",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header_Detail"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal_Detail"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "name",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header_Detail"
                },
                "title": "Name"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal_Detail"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 350
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "dob",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header_Detail"
                },
                "title": "Birth Date"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal_Detail"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 150
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "age",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header_Detail"
                },
                "title": "Age"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal_Detail"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 100
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "referral_date",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header_Detail"
                },
                "title": "Referral Date"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal_Detail"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 150
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "referral_type",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header_Detail"
                },
                "title": "Referral Type"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal_Detail"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 250
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "referral_status",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header_Detail"
                },
                "title": "Status"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal_Detail"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 200
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "program_name",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header_Detail"
                },
                "title": "Program"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal_Detail"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            }
          ],
          "data": [
            {
              "age": null,
              "dob": null,
              "name": null,
              "participant_id": null,
              "program_name": null,
              "referral_date": null,
              "referral_status": null,
              "referral_type": null
            }
          ],
          "pager": {
            "bottom": false,
            "initialOption": 100
          },
          "rows": {
            "striped": {
              "enabled": false
            }
          },
          "selection": {
            "data": [
              {
                "age": null,
                "dob": null,
                "name": null,
                "participant_id": null,
                "program_name": null,
                "referral_date": null,
                "referral_status": null,
                "referral_type": null
              }
            ],
            "selectedColumn": "name",
            "selectedRow": 0
          },
          "style": {
            "classes": "Background/Default",
            "overflowX": "hidden"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "getDataDb",
              "params": [
                "payload"
              ],
              "script": "\t#ystem.perspective.print((\u0027payload start\u0027,payload))\n\t\n\tdeclaration, query, orderBy, fetchOffset \u003d self.getQuery()\n\n\targs \u003d []\t\n\t\n\t###############################################\n\tprovider_id\u003d payload.get(\u0027provider_id\u0027)\n\targs +\u003d [provider_id]\n\n\t###############################################\n\tprogram_id\u003d payload.get(\u0027program_id\u0027)\n\targs +\u003d [program_id]\n\n\t###############################################\n\treferral_status_id \u003d payload.get(\u0027referral_status_id\u0027)\n\targs +\u003d [referral_status_id]\n\n\t###############################################\n\t# This param must be java.util.Date or None. Not allowed empty string \u0027\u0027\n\tactivity_start\u003d payload.get(\u0027activity_start\u0027)\n\targs +\u003d [activity_start]\n\n\t###############################################\n\tsearch_text \u003d payload.get(\u0027search_text\u0027)\n\t\n\tif search_text is None:\n\t\tsearch_text \u003d \u0027\u0027\n\t\n\targs +\u003d [search_text]\n\t\n\t###############################################\n\toffset \u003d payload.get(\u0027offset\u0027)\n\tfetch \u003d payload.get(\u0027fetch\u0027)\n\t\n\tif offset is not None and fetch is not None:\n\t\tcounterQuery \u003d \u0027{}; WITH cte AS ({}) SELECT COUNT(1) cnt FROM cte\u0027.format(declaration, query)\n\t\tresultRowCount \u003d system.db.runScalarPrepQuery(counterQuery, args, \u0027HMSOps\u0027)\n\n\t\targs +\u003d [offset]\n\t\targs +\u003d [fetch]\t\n\t\n\t\tquery \u003d \u0027{} {} {} {}\u0027.format(declaration, query, orderBy, fetchOffset)\n\t\tsystem.perspective.print(query)\n\t\tresult \u003d system.db.runPrepQuery(query, args, \u0027HMSOps\u0027)\n\t\n\telse:\n\t\tcounterQuery \u003d None\n\t\tquery \u003d \u0027{} {} {}\u0027.format(declaration, query, orderBy)\n\t\tresult \u003d system.db.runPrepQuery(query, args, \u0027HMSOps\u0027)\t\n\t\tresultRowCount \u003d result.rowCount\n\t\n\t#ystem.perspective.print((\u0027Exec: cQ , Q\u0027,counterQuery, query)) \t\n\t#system.perspective.print((\u0027Exec: Q\u0027,query)) \t\t\n\tsystem.perspective.print((\u0027Exec: args\u0027,args)) \n\t#ystem.perspective.print((\u0027payload end\u0027,payload)) \n\treturn result, resultRowCount\n"
            },
            {
              "name": "getPropsColumns",
              "params": [
                "dataset"
              ],
              "script": "\tjsonDefaultColumn \u003d \"\"\"\n  {\n\t    \"field\": \"\",\n\t    \"visible\": true,\n\t    \"editable\": false,\n\t    \"render\": \"auto\",\n\t    \"justify\": \"left\",\n\t    \"align\": \"center\",\n\t    \"resizable\": true,\n\t    \"sortable\": true,\n\t    \"sort\": \"none\",\n\t    \"viewPath\": \"\",\n\t    \"viewParams\": {},\n\t    \"boolean\": \"checkbox\",\n\t    \"number\": \"value\",\n\t    \"progressBar\": {\n\t      \"max\": 100,\n\t      \"bar\": {\n\t        \"color\": \"#62A3F6\",\n\t        \"linecap\": \"round\",\n\t        \"width\": 5\n\t      },\n\t      \"track\": {\n\t        \"color\": \"#DADADA\",\n\t        \"linecap\": \"round\",\n\t        \"width\": 2\n\t      },\n\t      \"value\": {\n\t        \"color\": \"#7D7D7D\",\n\t        \"show\": true\n\t      }\n\t    },\n\t    \"toggleSwitch\": {\n\t      \"color\": {\n\t        \"selected\": \"#2196F3\",\n\t        \"unselected\": \"#FFFFFF\"\n\t      }\n\t    },\n\t    \"numberFormat\": \"0,0.##\",\n\t    \"dateFormat\": \"MM/DD/YYYY\",\n\t    \"width\": \"\",\n\t    \"strictWidth\": false,\n\t    \"header\": {\n\t      \"title\": \"\",\n\t      \"justify\": \"left\",\n\t      \"align\": \"center\",\n\t      \"style\": {\n\t        \"classes\": \"Table/Column_Header_Detail\"\n\t      }\n\t    },\n\t    \"footer\": {\n\t      \"title\": \"\",\n\t      \"justify\": \"left\",\n\t      \"align\": \"center\",\n\t      \"style\": {\n\t        \"classes\": \"\"\n\t      }\n\t    },\n\t    \"style\": {\n\t      \"classes\": \"Table/Column_Normal_Detail\"\n\t    }\n\t  },\t\n\t\"\"\"\n\n\tcolumnsForced \u003d [\n\t  {\n\t    \"field\": \"name\",\n\t    \"width\": 350,\n\t    \"title\": \"Name\"\n\t  },\n\t  {\n\t    \"field\": \"dob\",\n\t    \"width\": 150,\n\t    \"title\": \"Birth Date\"\n\t  },\n\t  {\n\t    \"field\": \"age\",\n\t    \"width\": 100,\n\t    \"title\": \"Age\"\n\t  },\n\t  {\n\t    \"field\": \"referral_date\",\n\t    \"width\": 150,\n\t    \"title\": \"Referral Date\"\n\t  },\t  \n\t  {\n\t    \"field\": \"referral_type\",\n\t    \"width\": 250,\n\t    \"title\": \"Referral Type\"\n\t  },\n\t  {\n\t    \"field\": \"referral_status\",\n\t    \"width\": 200,\n\t    \"title\": \"Status\"\n\t  },\n\t  {\n\t    \"field\": \"program_name\",\n\t    \"width\": \"\",\n\t    \"title\": \"Program\"\n\t  }\n\t]\n\n\tcolNames \u003d system.dataset.getColumnHeaders(dataset)\n\n\t_columns \u003d []\n\tfor col in colNames:\n\t\t# This conversion json_\u003edict create actually deepcopy\n\t\tpyColumn \u003d system.util.jsonDecode(jsonDefaultColumn)\n\t\t\n\t\t# Note: Field must contain only letters and numbers.\n\t\tpyColumn[\u0027field\u0027] \u003d col\n\t\t\n\t\t_dictCol \u003d None\n\t\tfor item in columnsForced:\n\t\t\tif item[\u0027field\u0027] \u003d\u003d pyColumn[\u0027field\u0027]:\n\t\t\t\t_dictCol \u003d item.copy() \n\t\t\t\n\t\t\n\t\t#ystem.perspective.print((_dictCol))\n\t\t\n\t\tpyColumn[\u0027header\u0027][\u0027title\u0027] \u003d _dictCol[\u0027title\u0027] if _dictCol else \u0027\u0027\n\t\t\n\t\tif _dictCol and _dictCol.get(\u0027width\u0027):\n\t\t\tpyColumn[\u0027width\u0027] \u003d _dictCol[\u0027width\u0027]\n\t\t\tpyColumn[\u0027strictWidth\u0027] \u003d True\n\n\t\t#if col \u003d\u003d \u0027id\u0027:\n\t\t\t#pyColumn[\u0027header\u0027][\u0027title\u0027] \u003d \u0027 \u0027\n\t\t\t#pyColumn[\"render\"] \u003d \"view\"\n\t\t\t#pyColumn[\"justify\"] \u003d \"center\"\n\t\t\t#pyColumn[\"resizable\"] \u003d False\n\t\t\t#pyColumn[\"sortable\"] \u003d False\n\t\t\t#pyColumn[\"viewPath\"] \u003d \"Providers/Dashboard/Components/Tables/Templates/TableOptions\"\t\n\t\t\t\t\n\t\tif col \u003d\u003d \u0027participant_id\u0027:\n\t\t\tpyColumn[\"visible\"] \u003d False\n\t\t\n\t\t#if col \u003d\u003d \u0027name\u0027:\n\t\t\t#pyColumn[\"render\"] \u003d \"view\"\n\t\t\t#pyColumn[\"viewPath\"] \u003d \"Providers/Referrals/Detail/Main/Table/Templates/NameLink\"\t\n\t\n\t\t#if col \u003d\u003d \u0027zipCode\u0027:\n\t\t\t#pyColumn[\u0027numberFormat\u0027] \u003d \"none\"\t\n\t\t\t\t\t\n\t\t_columns.append(pyColumn)\n\t\n\t#ystem.perspective.print((\"_columns: \",_columns))\n\t\n\treturn _columns"
            },
            {
              "name": "correctTimeForClient",
              "params": [
                "pyds",
                "columnsToCorrect"
              ],
              "script": "\t\n\t# !!!!!!!!!!!  NOT TESTED !!!!!!!!!!!!!!!!!!!!!!!\n\t\n\t# Table automaticaly change datetime according to client timezone, \n\t# For this table we don\u0027t need automatic conversion, we must recorrect datetimes, according client timezone.\n\t# Actually to see same values like in db.\n\t\n\t# This is correction client against ignition server\n\t# TODO add correction to SQL server\n\tcorrectionTime \u003d int(60*(system.date.getTimezoneOffset() - self.session.props.device.timezone.utcOffset)) \n\t\n\tlistDateFix \u003d [[]*len(columnsToCorrect)]\n\tfor rowIndex, row in enumerate(pyds):\n\t\tfor colIndex, col in enumerate(columnsToCorrect):\n\t\t\tlistDateFix[colIndex].append(system.date.addMinutes(row[col], correctionTime))\n\t\n\n\tfor index, item in enumerate(listDateFix):\n\t\tcolNames \u003d system.dataset.getColumnHeaders(pyds)\n\t\tcolPosition \u003d colNames.index(columnsToCorrect[index])\n\t\tpyds \u003d system.dataset.filterColumns(pyds, [ x for x in colNames if x !\u003d columnsToCorrect[index]])\n\t\tpyds \u003d system.dataset.addColumn(pyds,colPosition,item,columnsToCorrect[index])\n\t\n\treturn pyds\n"
            },
            {
              "name": "setMisc",
              "params": [],
              "script": "\t\n\tself.props.cells.style\u003d {\n\t    \"classes\": \"Table/Cell_Detail\"\n\t}\n\t\n\tself.props.style \u003d {\n\t  \"classes\": \"Background/Default\",\n\t  \"overflowX\": \"hidden\"\n\t}\n"
            },
            {
              "name": "doByCondition",
              "params": [
                "payload"
              ],
              "script": "\timport java.lang\n\n\t# 1. Add fetch to payload if not exist. We can send from pager or use value self.view.params.fetch.\n\t# This should be step before offset\n\tfetch \u003d payload.get(\u0027fetch\u0027)\n\t\n\tif not(fetch):\n\t\tfetch \u003d self.view.params.fetch\n\t\n\t# If fetch value is integer greater then 0, pager exist\n\tif fetch and fetch \u003e 1:\n\t\tpayload[\u0027fetch\u0027] \u003d fetch\n\n\t\t#  2. If payload has \u0027offset\u0027, it means that comming from pager. Then take lastPayload \n\t\t# stored as json string, deserialize to python dict and  add node\u0027 offset\u0027\n\t\t# Else means payload is comming from conditions. Don\u0027t do anything just continue\n\t\tif payload.get(\u0027offset\u0027) is not None:\n\t\t\toffset \u003d payload[\u0027offset\u0027]\n\t\t\tpayload \u003d {}\n\t\t\tfor key in self.custom.lastPayload:\n\t\t\t\tpayload[key] \u003d self.custom.lastPayload[key]\n\t\t\t\n\t\t\t\n\t\t\tpayload[\u0027offset\u0027] \u003d offset\n\t\t\tpayload[\u0027fetch\u0027] \u003d fetch\n\t\telse:\n\t\t\tpayload[\u0027offset\u0027] \u003d 0\n\t\n\t\t\n\t# 3. Get data from DB. Data is dataset which contain only fetch number of rows. \n\t# _resultRowCount is scalar value which represent number of rows in case the that query is executed without  OFFSET ... FETCH...\n\t_data, _resultRowCount \u003d self.getDataDb(payload)\n\t\n\tself.view.params.resultRowCount \u003d _resultRowCount\n\n\t\n\t# 4. Set some misc props if necessary (explicit)\n\tself.setMisc()\n\n\t# 5. Step get columns props (explicit adjustment)\n\tself.props.columns \u003d self.getPropsColumns(_data)\n\n\t# 6. Correct values in datetime column according client timezone. (check comments inside function)\n\t#_data \u003d self.correctTimeForClient(_data, [\u0027dob\u0027])\n\n\t# 7. Add dummy empty raw if result is empty dataset. Reason to do that is to avoid loosing foqus on search cell in filters.\n\t#colTypes \u003d _data.getColumnTypes()\n\t#if _data.rowCount \u003d\u003d 0:\n\t\t#_dummyRow \u003d [\u0027\u0027 if x is java.lang.String else None for x in colTypes]\n\t\t#_data \u003d system.dataset.addRow(_data, _dummyRow)\n\t\n\t_colNames \u003d system.dataset.getColumnHeaders(_data)\n\t\n\tif _data.rowCount \u003d\u003d 0:\n\t\t_lstData \u003d [{col: None for col in _colNames}]\n\telse:\n\t\t_pyds \u003d system.dataset.toPyDataSet(_data)\n\t\t_lstData \u003d [{col: row[col] for col in _colNames} for row in _pyds]\n\n\t#ystem.perspective.print((\u0027_lstData: \u0027,_lstData))\n\t\n\tself.props.data \u003d _lstData\n\t#self.props.data \u003d _data\n\t\n\tself.custom.jsonLastPayload \u003d system.util.jsonEncode(payload)\n\t\n\t# Remove fetch and offset, it is not necessary to store.\n\tpayload.pop(\u0027offset\u0027,None)\n\tpayload.pop(\u0027fetch\u0027,None)\n\tself.custom.lastPayload \u003d payload\n\n"
            },
            {
              "name": "getQuery",
              "params": [],
              "script": "\tdeclaration \u003d \t\"\"\"\nDECLARE @provider_id AS INT \u003d ?\nDECLARE @program_id AS INT \u003d ?\nDECLARE @referral_status_id AS INT \u003d ?\nDECLARE @activity_start AS DATE \u003d ?\nDECLARE @search_text VARCHAR(max) \u003d ? \n\"\"\"\n\t\n\tquery \u003d \"\"\"\nSELECT \n\t[participant].[id] AS [participant_id]\n\t,CONCAT_WS(\u0027 \u0027,[Human].firstName, [Human].middleName, [Human].lastName) AS [name]\n\t,[Human].dob AS [dob]\n\t,DATEDIFF(year, [Human].dob, GETDATE()) AS [age]\n\t,[Referral].[timeCreated] AS [referral_date]\n\t,[ReferralType].[ReferralTypeName] AS [referral_type]\n\t,[ReferralStatus].[ReferralStatusName] AS [referral_status]\n\t,[Program].[programName] AS [program_name]\nFROM [participant].[Referral]\n\tLEFT JOIN [participant].[Participant] ON [Referral].[ParticipantId] \u003d [Participant].[id]\n\tLEFT JOIN [humans].[Human] ON [Participant].[humanId] \u003d [Human].[id]\n\tLEFT JOIN [organization].[Provider] ON [Referral].[providerId] \u003d [Provider].[id]\n\tLEFT JOIN [participant].[ReferralType] ON [Referral].[Type_id] \u003d [ReferralType].[id]\n\tLEFT JOIN [participant].[ReferralStatus] ON [Referral].[Status_Id] \u003d [ReferralStatus].[id]\n\tLEFT JOIN [interaction].[Program] ON [Program].[id] \u003d [Referral].[ProgramId]\nWHERE 1\u003d1\n\tAND ([Referral].[ProviderId] \u003d @provider_id OR ISNULL(@provider_id, -1) \u003d -1)\n\tAND ([Program].[id] \u003d @program_id OR ISNULL(@program_id, -1) \u003d -1)\n\tAND ([ReferralStatus].[id] \u003d @referral_status_id OR ISNULL(@referral_status_id, -1) \u003d -1)\n\tAND ([Referral].timeCreated \u003e\u003d @activity_start OR ISNULL(YEAR(@activity_start), -1) \u003d -1)\n\tAND (\n\t\t@search_text \u003d \u0027\u0027 \n\t\tOR [Human].[firstname] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\t\tOR [Human].[middleName] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\t\tOR [Human].[lastName] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\t\tOR CONVERT(VARCHAR(10),[Human].[dob],101) LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\t\tOR CONVERT(VARCHAR(10),[Referral].[timeCreated],101) LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027) \n\t\tOR [ReferralType].[ReferralTypeName] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\t\tOR [ReferralStatus].[ReferralStatusName] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\t\tOR [Program].[programName] LIKE CONCAT(\u0027%\u0027,@search_text,\u0027%\u0027)\n\t)\n\t\"\"\"\n\torderBy \u003d \"\"\"\nORDER BY [Human].[firstname]\"\"\"\n\n\tfetchOffset \u003d \"\"\"\nOFFSET ? ROWS \nFETCH NEXT ? ROWS ONLY;  \n\t\"\"\"\t\n\treturn declaration, query, orderBy, fetchOffset\t\t"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "mhByCondition_ProvReff",
              "pageScope": true,
              "script": "\t\n\tself.doByCondition(payload)\n\t\n\tfrom threading import Timer\n\tdef refresh():\n\t\tself.doByCondition(payload)\n\tTimer(1.0,refresh).start()\n\t\t",
              "sessionScope": true,
              "viewScope": true
            }
          ]
        },
        "type": "ia.display.table"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "justify": "space-around",
      "style": {
        "overflow": "visible"
      }
    },
    "type": "ia.container.flex"
  }
}