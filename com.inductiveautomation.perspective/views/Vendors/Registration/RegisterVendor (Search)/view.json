{
  "custom": {
    "vendorId": -1
  },
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\t\n\troot \u003d self.getChild(\"root\")\n\troot.clearAll()\n\n\n\t"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {},
  "propConfig": {
    "custom.vendorId": {
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "width": 600
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "emvHeader"
        },
        "position": {
          "shrink": 0
        },
        "props": {
          "params": {
            "text": "Register Vendor"
          },
          "path": "Vendors/Registration/Cards/RegistrationHeader",
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "custom": {
              "filterValue": "DO NOT RETURN ROWS"
            },
            "events": {
              "dom": {
                "onKeyUp": {
                  "config": {
                    "script": "\t\n\troot \u003d self.parent.parent\n\ttbl \u003d root.getChild(\"Table\")\n\temvStreet \u003d self.getSibling(\"Street\")\n\tbtnCreateEdit \u003d root.getChild(\"FlexContainer\").getChild(\"ButtonCreateEdit\")\n\t\n\t#self.view.custom.employerId \u003d -1\n\t\n\tpayload \u003d {\u0027vendorName\u0027: self.props.params.textValue, \u0027street\u0027: emvStreet.props.params.textValue}\n\t\n\t\n\ttbl.doByCondition(payload)\n\t\n\tif self.props.params.textValue and emvStreet.props.params.textValue:\n\t\tbtnCreateEdit.meta.visible \u003d True\n\telse:\n\t\tbtnCreateEdit.meta.visible \u003d False\n\t\t\n\n"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "VendorName"
            },
            "position": {
              "basis": "50px",
              "grow": 1,
              "shrink": 0
            },
            "propConfig": {
              "props.params.textValue": {
                "persistent": false
              }
            },
            "props": {
              "params": {
                "textLabel": "Vendor Name*"
              },
              "path": "Vendors/Registration/Cards/TextInputSearch",
              "useDefaultViewHeight": true
            },
            "type": "ia.display.view"
          },
          {
            "events": {
              "dom": {
                "onKeyUp": {
                  "config": {
                    "script": "\troot \u003d self.parent.parent\n\ttbl \u003d root.getChild(\"Table\")\n\temvName \u003d self.getSibling(\"VendorName\")\n\tbtnCreateEdit \u003d root.getChild(\"FlexContainer\").getChild(\"ButtonCreateEdit\")\n\t\n\tpayload \u003d {\u0027vendorName\u0027: emvName.props.params.textValue, \u0027street\u0027: self.props.params.textValue}\n\t\n\ttbl.doByCondition(payload)\t\n\t\n\tif self.props.params.textValue and emvName.props.params.textValue:\n\t\tbtnCreateEdit.meta.visible \u003d True\n\telse:\n\t\tbtnCreateEdit.meta.visible \u003d False"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Street"
            },
            "position": {
              "basis": "50px",
              "grow": 1,
              "shrink": 0
            },
            "propConfig": {
              "props.params.textValue": {
                "persistent": false
              }
            },
            "props": {
              "params": {
                "textLabel": "Address"
              },
              "path": "Employers/Registration/Cards/TextInputSearch",
              "useDefaultViewHeight": true
            },
            "type": "ia.display.view"
          }
        ],
        "meta": {
          "name": "FlexContainerSearch"
        },
        "position": {
          "basis": "120px",
          "shrink": 0
        },
        "props": {
          "direction": "column",
          "style": {
            "paddingLeft": "20px",
            "paddingRight": "320px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\troot \u003d self.view.getChild(\"root\")\n\troot.clearAll()\n\n\t\n"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "ButtonClear"
            },
            "position": {
              "basis": "120px"
            },
            "props": {
              "style": {
                "classes": "Buttons/Delete",
                "marginBottom": "15px",
                "marginTop": "15px"
              },
              "text": "Clear"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\troot \u003d self.view.getChild(\"root\")\n\temvName \u003d root.getChild(\"FlexContainerSearch\").getChild(\"VendorName\")\n\temvStreet \u003d root.getChild(\"FlexContainerSearch\").getChild(\"Street\")\n\ttbl \u003d self.parent.parent.getChild(\"Table\")\n\n\t_vendorId \u003d self.view.custom.vendorId\n\tsystem.perspective.print((\u0027click id: \u0027,_vendorId))\n\t\n\t\n\tif isinstance(_vendorId, (int, long)) and _vendorId \u003e\u003d 0:\n\t\tparams \u003d {\u0027vendorInfo\u0027: {\t\u0027vendorId\u0027: _vendorId}}\n\telse:\n\t\t_vendorName \u003d  emvName.props.params.textValue\n\t\t_street \u003d emvStreet.props.params.textValue\n\t\tparams \u003d {\u0027vendorInfo\u0027: {\n\t\t\t\u0027vendorName\u0027: _vendorName,\n\t\t\t\u0027street\u0027: _street}\n\t\t\t}\n\t\n\n\tsystem.perspective.print((\u0027params: \u0027,params))\n\troot.clearAll()\t\n\tsystem.perspective.openDock(\"RegisterVendor\", params \u003d params)\n\n\n\t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "ButtonCreateEdit",
              "visible": false
            },
            "position": {
              "basis": "120px"
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "path": "view.custom.employerId"
                  },
                  "enabled": false,
                  "transforms": [
                    {
                      "code": "\ttry:\n\t\tif value is None:\n\t\t\treturn \u0027CREATE\u0027\n\t\telif value \u003d\u003d -1:\n\t\t\treturn \u0027CREATE\u0027\t\n\t\telif long(value) \u003e\u003d 0:\n\t\t\treturn \u0027EDIT\u0027\n\t\telse:\n\t\t\treturn \u0027ERROR\u0027\n\texcept:\n\t\treturn \u0027ERROR\u0027\n\t\n\treturn value",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "15px",
                "marginLeft": "20px",
                "marginTop": "15px"
              },
              "text": ""
            },
            "type": "ia.input.button"
          }
        ],
        "meta": {
          "name": "FlexContainer"
        },
        "position": {
          "basis": "65px",
          "shrink": 0
        },
        "props": {
          "style": {
            "paddingLeft": "25px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "custom": {
          "_devPulse": false,
          "_devTxt": "",
          "_isDev": false,
          "jsonLastPayload": null,
          "lastPayload": {
            "employerName": "abb",
            "street": "c"
          }
        },
        "events": {
          "component": {
            "onRowClick": {
              "config": {
                "script": "\tselectedColumn \u003d self.props.selection.selectedColumn\n\n\tif selectedColumn in [\"vendorName\", \"street\"]:\n\t\troot \u003d self.view.getChild(\"root\")\n\t\temvName \u003d self.parent.getChild(\"FlexContainerSearch\").getChild(\"VendorName\")\n\t\temvStreet \u003d root.getChild(\"FlexContainerSearch\").getChild(\"Street\")\n\t\tbtnCreateEdit \u003d root.getChild(\"FlexContainer\").getChild(\"ButtonCreateEdit\")\n\n\t\temvName.props.params.textValue \u003d event.value[\u0027vendorName\u0027]\n\t\temvStreet.props.params.textValue \u003d event.value[\u0027street\u0027]\n\t\tself.view.custom.vendorId \u003d event.value[\u0027id\u0027]\n\t\tbtnCreateEdit.props.text \u003d \u0027EDIT\u0027\n\t\tbtnCreateEdit.meta.visible \u003d True\t\t\n\t\t\n"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Table"
        },
        "position": {
          "grow": 1,
          "shrink": 0
        },
        "propConfig": {
          "custom._devPulse": {
            "onChange": {
              "enabled": null,
              "script": "\tif self.custom._isDev:\n\t\tif currentValue.value is True:\n\t\t\tpayload \u003d {}\n\t\t\tpayload[\u0027employerName\u0027] \u003d \u0027and\u0027\n\t\t\t\n\t\t\tsystem.perspective.sendMessage(\u0027mhByCondition\u0027, payload \u003d payload)\n\t\t\tself.custom.jsonLastPayload \u003d system.util.jsonEncode(payload)\n\n\t\telse:\n\t\t\t#self.props.data \u003d system.dataset.clearDataset(self.props.data)\n\t\t\tself.props.data \u003d [{key: None for key in self.props.data[0]}]\n\t\t\tself.custom.jsonLastPayload \u003d None\n\n\n"
            }
          },
          "props.filter.text": {
            "access": "PUBLIC"
          },
          "props.selection.style.backgroundColor": {
            "binding": {
              "config": {
                "path": "this.props.selection.selectedRow"
              },
              "transforms": [
                {
                  "code": "\treturn \"#FFFFFF00\" if value is None or value \u003d\u003d -1 else \"#9AF4EB4D\"",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "cells": {
            "style": {
              "classes": "Table/Cell_Dashboard"
            }
          },
          "columns": [
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "id",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header_Detail Background/Default"
                },
                "title": "id"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "vendorName",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header_Detail Background/Default"
                },
                "title": "Vendor Name"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "street",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header_Detail Background/Default"
                },
                "title": "Address"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            }
          ],
          "pager": {
            "initialOption": 100
          },
          "rows": {
            "highlight": {
              "color": "#ccffff"
            },
            "striped": {
              "enabled": false
            }
          },
          "style": {
            "classes": "Background/Default",
            "overflowX": "hidden"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "getDataDb",
              "params": [
                "payload"
              ],
              "script": "\timport extend.query\n\t\n\tdeclaration, queryCte, query, orderBy, fetchOffset \u003d self.getQuery()\n\n\targs \u003d []\t\n\n\t###############################################\n\n\temployerName\u003d payload.get(\u0027vendorName\u0027)\n\targs +\u003d [employerName]\n\n\t###############################################\n\n\tstreet\u003d payload.get(\u0027street\u0027)\n\targs +\u003d [street]\n\n\t###############################################\n\n\tquery \u003d \u0027{} {} {} {}\u0027.format(declaration, queryCte, query, orderBy)\n\tresult \u003d system.db.runPrepQuery(query, args, \u0027HMSOps\u0027)\t\n\tresultRowCount \u003d result.rowCount\n\t\n\tsystem.perspective.print((\u0027Exec: args\u0027,args)) \n\n\treturn result, resultRowCount\n"
            },
            {
              "name": "getPropsColumns",
              "params": [
                "dataset"
              ],
              "script": "\tjsonDefaultColumn \u003d \"\"\"\n  {\n\t    \"field\": \"\",\n\t    \"visible\": true,\n\t    \"editable\": false,\n\t    \"render\": \"auto\",\n\t    \"justify\": \"left\",\n\t    \"align\": \"center\",\n\t    \"resizable\": true,\n\t    \"sortable\": true,\n\t    \"sort\": \"none\",\n\t    \"viewPath\": \"\",\n\t    \"viewParams\": {},\n\t    \"boolean\": \"checkbox\",\n\t    \"number\": \"value\",\n\t    \"progressBar\": {\n\t      \"max\": 100,\n\t      \"bar\": {\n\t        \"color\": \"#62A3F6\",\n\t        \"linecap\": \"round\",\n\t        \"width\": 5\n\t      },\n\t      \"track\": {\n\t        \"color\": \"#DADADA\",\n\t        \"linecap\": \"round\",\n\t        \"width\": 2\n\t      },\n\t      \"value\": {\n\t        \"color\": \"#7D7D7D\",\n\t        \"show\": true\n\t      }\n\t    },\n\t    \"toggleSwitch\": {\n\t      \"color\": {\n\t        \"selected\": \"#2196F3\",\n\t        \"unselected\": \"#FFFFFF\"\n\t      }\n\t    },\n\t    \"numberFormat\": \"0,0.##\",\n\t    \"dateFormat\": \"MM/DD/YYYY\",\n\t    \"width\": \"\",\n\t    \"strictWidth\": false,\n\t    \"header\": {\n\t      \"title\": \"\",\n\t      \"justify\": \"left\",\n\t      \"align\": \"center\",\n\t      \"style\": {\n\t        \"classes\": \"Table/Column_Header_Detail Background/Default\"\n\t      }\n\t    },\n\t    \"footer\": {\n\t      \"title\": \"\",\n\t      \"justify\": \"left\",\n\t      \"align\": \"center\",\n\t      \"style\": {\n\t        \"classes\": \"\"\n\t      }\n\t    },\n\t    \"style\": {\n\t      \"classes\": \"Table/Column_Normal\"\n\t    }\n\t  },\t\n\t\"\"\"\n\n\tcolumnsForced \u003d [\n\t  {\n\t    \"field\": \"id\",\n\t    \"width\": \"\",\n\t    \"title\": \"id\"\n\t  },\n\t  {\n\t    \"field\": \"vendorName\",\n\t    \"width\": \"\",\n\t    \"title\": \"Vendor Name\"\n\t  },\n\t  {\n\t\t\"field\": \"street\",\n\t\t\"width\": \"\",\n\t\t\"title\": \"Address\"\n\t  }\n\t]\n\n\n\tcolNames \u003d system.dataset.getColumnHeaders(dataset)\n\n\t_columns \u003d []\n\tfor col in colNames:\n\t\t# This conversion json_\u003edict create actually deepcopy\n\t\tpyColumn \u003d system.util.jsonDecode(jsonDefaultColumn)\n\t\t\n\t\t# Field must not contain spaces. Spaces are already removed for props.data on same way.\n\t\tpyColumn[\u0027field\u0027] \u003d col\n\t\t\n\t\t_dictCol \u003d None\n\t\tfor item in columnsForced:\n\t\t\tif item[\u0027field\u0027] \u003d\u003d pyColumn[\u0027field\u0027]:\n\t\t\t\t_dictCol \u003d item.copy() \n\n\t\t#ystem.perspective.print((_dictCol))\n\t\t\n\t\tpyColumn[\u0027header\u0027][\u0027title\u0027] \u003d _dictCol[\u0027title\u0027] if _dictCol else \u0027\u0027\n\t\t\n\t\tif _dictCol and _dictCol.get(\u0027width\u0027):\n\t\t\tpyColumn[\u0027width\u0027] \u003d _dictCol[\u0027width\u0027]\n\t\t\tpyColumn[\u0027strictWidth\u0027] \u003d True\n\n\n\t\tif col \u003d\u003d \u0027id\u0027:\n\t\t\tpyColumn[\"visible\"] \u003d False\n\t\t\n\t\tif col \u003d\u003d \u0027vendorName\u0027:\n\t\t\t_style \u003d{\t\"classes\": \"Table/Column_Normal\",\n\t\t\t\t\t\t\"paddingLeft\": \"25px\"\n\t\t\t\t\t}\n\t\t\tpyColumn[\u0027style\u0027] \u003d _style\t\n\t\t_columns.append(pyColumn)\n\t\n\t#ystem.perspective.print((\"_columns: \",_columns))\n\t\n\treturn _columns"
            },
            {
              "name": "correctTimeForClient",
              "params": [
                "pyds",
                "columnsToCorrect"
              ],
              "script": "\t\n\t# !!!!!!!!!!!  NOT TESTED !!!!!!!!!!!!!!!!!!!!!!!\n\t\n\t# Table automaticaly change datetime according to client timezone, \n\t# For this table we don\u0027t need automatic conversion, we must recorrect datetimes, according client timezone.\n\t# Actually to see same values like in db.\n\t\n\t# This is correction client against ignition server\n\t# TODO add correction to SQL server\n\tcorrectionTime \u003d int(60*(system.date.getTimezoneOffset() - self.session.props.device.timezone.utcOffset)) \n\t\n\tlistDateFix \u003d [[]*len(columnsToCorrect)]\n\tfor rowIndex, row in enumerate(pyds):\n\t\tfor colIndex, col in enumerate(columnsToCorrect):\n\t\t\tlistDateFix[colIndex].append(system.date.addMinutes(row[col], correctionTime))\n\t\n\n\tfor index, item in enumerate(listDateFix):\n\t\tcolNames \u003d system.dataset.getColumnHeaders(pyds)\n\t\tcolPosition \u003d colNames.index(columnsToCorrect[index])\n\t\tpyds \u003d system.dataset.filterColumns(pyds, [ x for x in colNames if x !\u003d columnsToCorrect[index]])\n\t\tpyds \u003d system.dataset.addColumn(pyds,colPosition,item,columnsToCorrect[index])\n\t\n\treturn pyds\n"
            },
            {
              "name": "setMisc",
              "params": [],
              "script": "\t\n\tself.props.cells.style\u003d {\n\t    \"classes\": \"Table/Cell_Dashboard_NoBG\"\n\t}\n\t\n\tself.props.style \u003d {\n\t  \"classes\": \"Background/Default\",\n\t  \"overflowX\": \"hidden\"\n\t}\n"
            },
            {
              "name": "doByCondition",
              "params": [
                "payload"
              ],
              "script": "\timport java.lang\n\n\t\n\t# 3. Get data from DB. Data is dataset which contain only fetch number of rows. \n\t# _resultRowCount is scalar value which represent number of rows in case the that query is executed without  OFFSET ... FETCH...\n\t_data, _resultRowCount \u003d self.getDataDb(payload)\n\n\t# 4. Set some misc props if necessary (explicit)\n\tself.setMisc()\n\n\t# 5. Step get columns props (explicit adjustment)\n\tself.props.columns \u003d self.getPropsColumns(_data)\n\n\t# 6. Correct values in datetime column according client timezone. (check comments inside function)\n\t#_data \u003d self.correctTimeForClient(_data, [\u0027dob\u0027])\n\n\t# 7. Send message to Kpis\n\t#self.sendMessageToKpis(_data)\n\n\t# 8. Add dummy empty raw if result is empty dataset. Reason to do that is to avoid loosing foqus on search cell in filters.\n\t_colNames \u003d system.dataset.getColumnHeaders(_data)\n\t\n\tif _data.rowCount \u003d\u003d 0:\n\t\t_lstData \u003d [{col: None for col in _colNames}]\n\telse:\n\t\t_pyds \u003d system.dataset.toPyDataSet(_data)\n\t\t_lstData \u003d [{col: row[col] for col in _colNames} for row in _pyds]\n\n\t#ystem.perspective.print((\u0027_lstData: \u0027,_lstData))\n\t\n\tself.props.data \u003d _lstData\n\t\n\t#self.custom.jsonLastPayload \u003d system.util.jsonEncode(payload) if payload else None\n\t\n\t# Remove fetch and offset, it is not necessary to store.\n\t#payload.pop(\u0027offset\u0027,None)\n\t#payload.pop(\u0027fetch\u0027,None)\n\t#self.custom.lastPayload \u003d payload\n\t\n\tself.setOthersProps(_lstData)\n\t\n\t\n\t\n\n\n"
            },
            {
              "name": "getQuery",
              "params": [],
              "script": "\tdeclaration \u003d \t\"\"\"\nDECLARE \n\t @vendorName NVARCHAR(max) \u003d ?\n\t,@street NVARCHAR(max) \u003d ?\n\t\"\"\"\n\t\n\tqueryCte \u003d \"\"\"\n\"\"\"\n\n\tquery \u003d \"\"\"\nSELECT\n\t [id]\n\t,[vendorName] \n\t,[street]\nFROM [organization].[Vendor]\nWHERE 1\u003d1\n\tAND (ISNULL(@vendorName,\u0027\u0027) !\u003d \u0027\u0027 OR ISNULL(@street,\u0027\u0027) !\u003d \u0027\u0027)\n\tAND ([vendorName] LIKE CONCAT(\u0027%\u0027,@vendorName,\u0027%\u0027) OR @vendorName \u003d \u0027\u0027 OR @vendorName IS NULL)\n\tAND ([street] LIKE CONCAT(\u0027%\u0027,@street,\u0027%\u0027) OR ISNULL(@street,\u0027\u0027) \u003d \u0027\u0027)\n\"\"\"\n\torderBy \u003d \"\"\"\nORDER BY [vendorName]\n\t\"\"\"\n\n\tfetchOffset \u003d \"\"\"\nOFFSET ? ROWS \nFETCH NEXT ? ROWS ONLY;  \n\t\"\"\"\t\n\treturn declaration, queryCte, query, orderBy, fetchOffset\n\n\t\t"
            },
            {
              "name": "setOthersProps",
              "params": [
                "lstData"
              ],
              "script": "\t\n\temvName \u003d self.parent.getChild(\"FlexContainerSearch\").getChild(\"VendorName\")\n\temvStreet \u003d self.parent.getChild(\"FlexContainerSearch\").getChild(\"Street\")\n\tbtnCreateEdit \u003d self.parent.getChild(\"FlexContainer\").getChild(\"ButtonCreateEdit\")\n\t\n\t_vendorName \u003d emvName.props.params.textValue\n\t_street \u003d emvStreet.props.params.textValue\n\t\n\tif lstData and len(lstData) \u003d\u003d 1 and lstData[0][\u0027id\u0027] is not None: \n\t\tif  _vendorName.lower() \u003d\u003d lstData[0][\u0027vendorName\u0027].lower() and _street.lower() \u003d\u003d lstData[0][\u0027street\u0027].lower():\n\t\t\temvName.props.params.textValue \u003d lstData[0][\u0027vendorName\u0027]\n\t\t\tself.view.custom.vendorId \u003d lstData[0][\u0027id\u0027]\n\t\t\temvStreet.props.params.textValue \u003d lstData[0][\u0027street\u0027]\n\t\t\tbtnCreateEdit.props.text \u003d \u0027EDIT\u0027\n\t\t\tbtnCreateEdit.meta.visible \u003d True\n\t\t\treturn\n\t \n\tif  _vendorName.strip() !\u003d \u0027\u0027 and _street.strip() !\u003d \u0027\u0027:\n\t\tself.view.custom.vendorId \u003d -1\n\t\tbtnCreateEdit.props.text \u003d \u0027CREATE\u0027\t\n\t\tbtnCreateEdit.meta.visible \u003d True\n\telse:\n\t\tself.view.custom.vendorId \u003d -1\n\t\tbtnCreateEdit.props.text \u003d \u0027\u0027\t\n\t\tbtnCreateEdit.meta.visible \u003d False\n"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "mhByCondition",
              "pageScope": true,
              "script": "\t#ystem.perspective.print((\u0027Msgstep1\u0027))\n\tself.doByCondition(payload)",
              "sessionScope": false,
              "viewScope": false
            }
          ]
        },
        "type": "ia.display.table"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "clearAll",
          "params": [],
          "script": "\temvName \u003d self.getChild(\"FlexContainerSearch\").getChild(\"VendorName\")\n\temvStreet \u003d self.getChild(\"FlexContainerSearch\").getChild(\"Street\")\n\tbtnCreateEdit \u003d self.getChild(\"FlexContainer\").getChild(\"ButtonCreateEdit\")\n\t\n\ttbl \u003d self.getChild(\"Table\")\n\n\temvName.props.params.textValue \u003d \u0027\u0027\n\temvStreet.props.params.textValue \u003d \u0027\u0027\n\tbtnCreateEdit.props.text \u003d \u0027\u0027\t\n\tbtnCreateEdit.meta.visible \u003d False\n\tself.view.custom.vendorId \u003d -1\n\ttbl.props.data \u003d []\n\n\n\t\n\t\n\t\n"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "clearVendorSearchPane",
          "pageScope": true,
          "script": "\tself.clearAll()",
          "sessionScope": false,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}