{
  "custom": {
    "toUpdateDelete": false
  },
  "params": {
    "noteId": null,
    "vendorId": -1
  },
  "propConfig": {
    "custom.edit_data": {
      "persistent": true
    },
    "custom.toUpdateDelete": {
      "persistent": true
    },
    "params.noteId": {
      "onChange": {
        "enabled": null,
        "script": "\troot \u003d self.getChild(\"root\")\n\troot.setNoteDb(currentValue.value)"
      },
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.note_id": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.vendorId": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 200,
      "width": 1043
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView Header"
        },
        "position": {
          "basis": "25px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.Text": {
            "binding": {
              "config": {
                "path": "view.params.noteId"
              },
              "transforms": [
                {
                  "expression": "if({value} \u003d -1,\u0027New Note\u0027,\u0027Edit Note\u0027)",
                  "type": "expression"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Employers/Templates/Header"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedView_Row1"
        },
        "position": {
          "basis": "110px"
        },
        "props": {
          "params": {
            "note": ""
          },
          "path": "Employers/Notes/Detail/Cards/Row1",
          "style": {
            "marginLeft": 25,
            "marginRight": 25
          }
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\troot \u003d self.view.getChild(\"root\")\n\troot.clearInputs()\n\tself.view.custom.toUpdateDelete \u003d False\n\tsystem.perspective.sendMessage(messageType\u003d\u0027ClearVendorNote_Selection\u0027,payload\u003d {}, scope\u003d\u0027session\u0027)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_new"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "expression": "{session.custom.isWSManager} || {session.custom.isManager} || {session.custom.isAdministrator} || {session.custom.isSupportCoordinator} || {session.custom.isWSSupportCoordinator}"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Secondary",
                "marginBottom": "5px",
                "marginLeft": "20px",
                "marginTop": "5px"
              },
              "text": "New Note"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\t\n\troot \u003d self.parent.parent\n\n\tnoteId \u003d self.view.params.noteId\n\tvendorId \u003d self.view.params.vendorId\n\t\n\tvalidationMsg \u003d root.getValidationMessage()\n\t\n\tif validationMsg:\n\t\tself.getSibling(\"Label\").showMessage(validationMsg)\n\t\treturn\n\t\n\ttry:\n\t\tif self.view.custom.toUpdateDelete is True:\n\t\t\troot.updateNoteDb()\n#\t\t\tself.getSibling(\"Label\").showMessage(\"Note Updated\")\n\t\telse:\n\t\t\troot.insertNoteDb()\n#\t\t\tself.getSibling(\"Label\").showMessage(\"Note Created\")\n\texcept:\n\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\t\n\t\traise\n\t\n\telse:\n\t\troot.clearInputs()\n\t\tsystem.perspective.sendMessage(messageType\u003d\u0027ClearVendorNote_Selection\u0027,payload\u003d {}, scope\u003d\u0027session\u0027)\n\t\tpayload\u003d{}\n\t\tpayload[\u0027vendorId\u0027] \u003d self.view.params.vendorId\n\t\tsystem.perspective.sendMessage(messageType\u003d\u0027mhByCondition\u0027,payload\u003d payload, scope\u003d\u0027page\u0027,\n\t\t\tsessionId\u003dself.session.props.id,pageId\u003dself.page.props.pageId)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_save"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "expression": "{session.custom.isWSManager} || {session.custom.isManager} || {session.custom.isAdministrator} || {session.custom.isSupportCoordinator} || {session.custom.isWSSupportCoordinator}"
                  },
                  "type": "expr"
                }
              },
              "props.text": {
                "binding": {
                  "config": {
                    "expression": "{view.custom.toUpdateDelete}"
                  },
                  "transforms": [
                    {
                      "code": "\tif value is True:\n\t\treturn \u0027UPDATE NOTE\u0027\n\telse:\n\t\treturn \u0027SAVE NOTE\u0027",
                      "type": "script"
                    }
                  ],
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              }
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\troot \u003d self.parent.parent\n\ttry:\n\t\troot.deleteNoteDb()\n\texcept:\n\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while deletition. Please try again.\")\t\n\t\traise\t\n\t\n\troot.clearInputs()\n\t\n\tpayload\u003d{}\n\tpayload[\u0027vendorId\u0027] \u003d self.view.params.vendorId\n\tsystem.perspective.sendMessage(messageType\u003d\u0027mhByCondition\u0027,payload\u003dpayload,scope\u003d\u0027page\u0027,\n\t\tsessionId\u003dself.session.props.id,pageId\u003dself.page.props.pageId)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_delete"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "propConfig": {
              "meta.visible": {
                "binding": {
                  "config": {
                    "expression": "{view.custom.toUpdateDelete} \u0026\u0026 {session.custom.isAdministrator}"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Delete",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              },
              "text": "Delete Note"
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "Label",
              "visible": false
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Text/Error_Message"
              },
              "text": "Something went wrong while saving data. Please try again."
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "showMessage",
                  "params": [
                    "message"
                  ],
                  "script": "\timport time\n\tself.props.text \u003d message\n\tself.meta.visible \u003d True\n\ttime.sleep(5)\n\tself.meta.visible \u003d False\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "root Actions"
        },
        "position": {
          "basis": "50px"
        },
        "props": {
          "style": {
            "borderTopColor": "#9db8d1",
            "borderTopStyle": "solid",
            "borderTopWidth": "1px",
            "classes": "Background/Default",
            "marginTop": "5px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "insertNoteDb",
          "params": [],
          "script": "\tquery \u003d \"\"\"\nINSERT INTO [organization].[VendorNotes]\n\t([vendorId]\n\t,[note]\n\t,[timeCreated]\n\t,[userName])\n VALUES\n\t(?,?,?,?)\n\"\"\"\n\n\temvRow1 \u003d self.getChild(\"EmbeddedView_Row1\")\n\t\n\tvendorId \u003d self.view.params.vendorId\n\tnote \u003d emvRow1.props.params.note\n\ttimeCreated \u003d system.date.now()\n\tuserName \u003d self.session.props.auth.user.userName\n\t\n\targs \u003d [vendorId, note, timeCreated, userName]\n\tnoteId \u003d system.db.runPrepUpdate(query, args, \u0027HMSOps\u0027)\n\t\n\treturn noteId"
        },
        {
          "name": "updateNoteDb",
          "params": [],
          "script": "\n\tquery \u003d \"\"\"\nUPDATE [organization].[VendorNotes]\nSET \n\t [note] \u003d ?\n\t,[userName] \u003d ?\nWHERE [id] \u003d ?\n\t\"\"\"\n\t\n\temvRow1 \u003d self.getChild(\"EmbeddedView_Row1\")\n\tnote \u003d emvRow1.props.params.note\n\tuserName \u003d self.session.props.auth.user.userName\n\tnoteId \u003d self.view.params.noteId\n\t\n\targs \u003d [note, userName, noteId]\n\n\tsystem.db.runPrepUpdate(query, args, \u0027HMSOps\u0027)\n#\tsystem.perspective.sendMessage(messageType\u003d\u0027mhByCondition\u0027,payload\u003d {}, scope\u003d\u0027page\u0027,\n#\t\t\t\tsessionId\u003dself.session.props.id,pageId\u003dself.page.props.pageId)\n\treturn noteId"
        },
        {
          "name": "setNoteDb",
          "params": [
            "noteId"
          ],
          "script": "\temvRow1 \u003d self.getChild(\"EmbeddedView_Row1\")\n\n\tif isinstance(noteId, (int, long)) and noteId \u003e\u003d 0:\n\t\t\n\t\tquery \u003d \"\"\"\n\t\t\tSELECT\t\n\t\t\t\t [id]\n\t\t\t\t,[note]\n\t\t\tFROM [organization].[VendorNotes]\n\t\t\tWHERE [id] \u003d ?\"\"\"\n\t\t\t\t\n\t\tresult \u003d system.db.runPrepQuery(query, [noteId], \u0027HMSOps\u0027)\n\n\t\temvRow1.props.params.note \u003d result.getValueAt(0, \u0027note\u0027)\n\t\tself.view.custom.toUpdateDelete \u003d True\n\telse:\n\t\temvRow1.props.params.note \u003d \u0027\u0027\n\t\tself.view.custom.toUpdateDelete \u003d False\n\t\t"
        },
        {
          "name": "deleteNoteDb",
          "params": [],
          "script": "\tquery \u003d \"\"\"\nDELETE FROM [organization].[VendorNotes]\n\t  WHERE [id] \u003d ?\n\"\"\"\n\tnoteId \u003d self.view.params.noteId\n\targs \u003d [noteId]\n\tnoteId \u003d system.db.runPrepUpdate(query, args, \u0027HMSOps\u0027)\n\t"
        },
        {
          "name": "getValidationMessage",
          "params": [],
          "script": "\timport re\n\t\n\temvRow1 \u003d self.getChild(\"EmbeddedView_Row1\")\n\n\t_note \u003d emvRow1.props.params.note\n\tif _note:\n\t\tvalidationMsg \u003d \u0027\u0027\n\telse:\n\t\tvalidationMsg \u003d \u0027Write some text!\u0027\n\t\t\n\treturn validationMsg\t"
        },
        {
          "name": "clearInputs",
          "params": [],
          "script": "\temvRow1 \u003d self.getChild(\"EmbeddedView_Row1\")\n\temvRow1.props.params.note \u003d \u0027\u0027"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": []
    },
    "type": "ia.container.flex"
  }
}