{
  "custom": {
    "allowSuspended": null,
    "allowWithPartialRegistration": null,
    "allowWithoutShelterProgram": null,
    "currentSeasonId": "4",
    "disableForPastDates": null,
    "noOfSelectedGuests": 0,
    "participantToAdd": {
      "dateOfBirth": {
        "$": [
          "ts",
          192,
          1685523953482
        ],
        "$ts": 80802000000
      },
      "id": 432517,
      "name": "Tony Amaker"
    },
    "selectedEvent": {
      "id": "",
      "location": "",
      "name": "",
      "noOfAttendees": "",
      "points": "",
      "scheduleDate": "2023-05-31 11:30:00",
      "scheduleId": "",
      "status": ""
    }
  },
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\tsystem.perspective.sendMessage(\"ResetSearch\", payload\u003d{}, scope\u003d\"session\")\n\tsystem.perspective.sendMessage(\"ResetRegistration\", payload\u003d{}, scope\u003d\"session\")"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "selectedId": 0,
    "selected_id": 0
  },
  "propConfig": {
    "custom.allowSuspended": {
      "binding": {
        "config": {
          "expression": "lookup({view.custom.settingsData},\u0027allow_suspended_participants\u0027,true,\u0027settingName\u0027,\u0027settingValue\u0027)"
        },
        "type": "expr"
      },
      "persistent": true
    },
    "custom.allowWithPartialRegistration": {
      "binding": {
        "config": {
          "expression": "lookup({view.custom.settingsData},\u0027allow_participants_with_partial_registration\u0027,true,\u0027settingName\u0027,\u0027settingValue\u0027)"
        },
        "type": "expr"
      },
      "persistent": true
    },
    "custom.allowWithoutShelterProgram": {
      "binding": {
        "config": {
          "expression": "lookup({view.custom.settingsData},\u0027allow_participants_without_winter_shelter\u0027,true,\u0027settingName\u0027,\u0027settingValue\u0027)"
        },
        "type": "expr"
      },
      "persistent": true
    },
    "custom.currentSeasonId": {
      "binding": {
        "config": {
          "queryPath": "WinterShelterGlobal/getCurrentSeason"
        },
        "transforms": [
          {
            "code": "\treturn value.getValueAt(0,\u0027id\u0027)",
            "type": "script"
          },
          {
            "formatType": "numeric",
            "formatValue": "integer",
            "type": "format"
          }
        ],
        "type": "query"
      },
      "persistent": true
    },
    "custom.disableForPastDates": {
      "binding": {
        "config": {
          "expression": "lookup({view.custom.settingsData},\u0027disable_checkin_for_past_dates\u0027,true,\u0027settingName\u0027,\u0027settingValue\u0027)"
        },
        "type": "expr"
      },
      "persistent": true
    },
    "custom.noOfSelectedGuests": {
      "binding": {
        "config": {
          "path": "/root/FlexContainer/participantsList.props.instances"
        },
        "transforms": [
          {
            "code": "\tcount \u003d 0\n\tif value is not None and len(value) \u003e 0:\n\t\tfor instance in value:\n\t\t\tif instance[\u0027markedForDelete\u0027] \u003d\u003d False:\n\t\t\t\tcount \u003d count + 1\n\t\t\n\treturn count\t",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "persistent": true
    },
    "custom.participantToAdd": {
      "persistent": true
    },
    "custom.selectedEvent": {
      "persistent": true
    },
    "params.dob_day": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.dob_month": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.dob_year": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.first_name": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.last_name": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.middle_name": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.nick_name": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.race_id": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.search_active": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.search_selection": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.selectedId": {
      "paramDirection": "output"
    },
    "params.selected_first_name": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.selected_last_name": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.selected_middle_name": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.ssn": {
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 500,
      "width": 250
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Header"
        },
        "position": {
          "basis": "25px",
          "shrink": 0
        },
        "props": {
          "params": {
            "Text": "Selected Participants"
          },
          "path": "1_globalTEMPLATES/Header/Header",
          "style": {
            "borderTopLeftRadius": "8px",
            "borderTopRightRadius": "8px"
          },
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "meta": {
              "name": "eventName"
            },
            "position": {
              "basis": "30px"
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "path": "view.custom.selectedEvent.name"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Table/Column_Medium"
              },
              "textStyle": {
                "textAlign": "left",
                "textIndent": 15
              }
            },
            "type": "ia.display.label"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "Label"
                },
                "position": {
                  "basis": "55px"
                },
                "propConfig": {
                  "props.text": {
                    "binding": {
                      "config": {
                        "path": "view.custom.noOfSelectedGuests"
                      },
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "style": {
                    "classes": "KPIs/KPI_Value"
                  },
                  "textStyle": {
                    "textAlign": "right"
                  }
                },
                "type": "ia.display.label"
              },
              {
                "meta": {
                  "name": "Label_0"
                },
                "position": {
                  "basis": "51px",
                  "grow": 1
                },
                "propConfig": {
                  "props.text": {
                    "binding": {
                      "config": {
                        "path": "view.custom.selectedEvent.scheduleDate"
                      },
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "style": {
                    "classes": "KPIs/KPI_Value"
                  },
                  "textStyle": {
                    "fontSize": "35px",
                    "textAlign": "center"
                  }
                },
                "type": "ia.display.label"
              },
              {
                "meta": {
                  "name": "Label_1"
                },
                "position": {
                  "basis": "70px",
                  "display": false
                },
                "propConfig": {
                  "props.text": {
                    "binding": {
                      "config": {
                        "path": "view.custom.selectedCongregation.totalBeds"
                      },
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "style": {
                    "classes": "KPIs/KPI_Value"
                  },
                  "textStyle": {
                    "textAlign": "left"
                  }
                },
                "type": "ia.display.label"
              }
            ],
            "meta": {
              "name": "NoOfGuests"
            },
            "position": {
              "basis": "50px",
              "display": false,
              "shrink": 0
            },
            "props": {
              "style": {
                "overflow": "hidden"
              }
            },
            "type": "ia.container.flex"
          },
          {
            "meta": {
              "name": "participantsList"
            },
            "position": {
              "basis": "340px",
              "grow": 1
            },
            "propConfig": {
              "props.instances": {
                "binding": {
                  "config": {
                    "parameters": {
                      "scheduleId": "{view.custom.selectedEvent.scheduleId}"
                    },
                    "queryPath": "Event/ParticipantEvents/CheckIn/GetParticipants"
                  },
                  "transforms": [
                    {
                      "code": "\timport copy\n\tinstances \u003d []\n\tinstanceStruct \u003d {\n\t\t\t  \"instanceStyle\": {\n\t\t\t    \"classes\": \"\"\n\t\t\t  },\n\t\t\t  \"instancePosition\": {},\n\t\t\t  \"participantId\": -1,\n\t\t\t  \"eventId\":self.view.custom.selectedEvent.id,\n\t\t\t  \"participantName\":\u0027\u0027,\n\t\t\t  \"birthDate\":None,\n\t\t\t  \"scheduleId\":self.view.custom.selectedEvent.scheduleId,\n\t\t\t  \"fromDB\": True,\n\t\t\t  \"markedForDelete\":False \n\t\t\t}\n\tif value is not None and value.getRowCount() \u003e 0:\n\t\tfor i in range(value.getRowCount()):\n\t\t\tthisStruct \u003d copy.deepcopy(instanceStruct)\n\t\t\tthisStruct[\u0027participantId\u0027] \u003d value.getValueAt(i,\u0027participantId\u0027)\n\t\t\tthisStruct[\u0027participantName\u0027] \u003d value.getValueAt(i,\u0027participantName\u0027)\n\t\t\tthisStruct[\u0027birthDate\u0027] \u003d value.getValueAt(i,\u0027BirthDate\u0027)\n\t\t\tinstances.append(thisStruct)\n\treturn instances",
                      "type": "script"
                    }
                  ],
                  "type": "query"
                }
              }
            },
            "props": {
              "direction": "column",
              "path": "Events/ParticipantEvents/CheckIn/Dashboard/Cards/OneParticipant",
              "style": {
                "borderColor": "#0C4E8B",
                "borderStyle": "solid",
                "borderWidth": "1px",
                "marginBottom": 5,
                "marginLeft": 15,
                "marginRight": 15,
                "marginTop": 5
              },
              "useDefaultViewWidth": false
            },
            "type": "ia.display.flex-repeater"
          },
          {
            "children": [
              {
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {
                        "script": "\timport time\n\tparticipantsList \u003d \tself.parent.parent.getChild(\"participantsList\").props.instances\n\t\t\t\t\n\tif len(participantsList) \u003e 0:\n\t\t# get checkIn participants list\n\t\tcheckInParticipants \u003d \u0027\u0027\n\t\tfor participant in participantsList:\n\t\t\tcheckInParticipants \u003d  checkInParticipants + str(participant[\u0027participantId\u0027]) + \",\"\n\t\tcheckInParticipants \u003d \u0027(\u0027 + checkInParticipants[:-1] + \u0027)\u0027\n\t\tresult \u003d system.db.runPrepQuery(\"SELECT participantId FROM lodging.BedLog where participantId in \"+str(checkInParticipants)+\" and eventEnd IS NULL\")\t\n\t\tcheckInParticipantsList \u003d result.getColumnAsList(result.getColumnIndex(\"participantId\"))\t\t\n\t\tsystem.perspective.print(checkInParticipantsList)\n\t\t\t\n\t\t## check for date validations\n\t\tif (system.date.isAfter(system.date.midnight(self.session.custom.selectedServeDate), system.date.midnight(system.date.now()))):\n\t\t\tself.parent.parent.getChild(\"Error\").props.text \u003d \"Check-in for future dates not allowed.\"\n\t\telse:\n\t\t\t## call named query to insert Campus store category if not exists\n\t\t\tpath \u003d \u0027Event/ParticipantEvents/CheckIn/GetOrCreateCampusStoreCategory\u0027\n\t\t\tparams \u003d {\u0027eventName\u0027:self.view.custom.selectedEvent.name}\n\t\t\tcategoryId \u003d system.db.runNamedQuery(path\u003dpath, parameters \u003d params)\n\t\t\tsystem.perspective.print(\u0027categoryId\u0027)\n\t\t\tsystem.perspective.print(categoryId)\n\t\t\t\n\t\t\teventPoints \u003d self.view.custom.selectedEvent.points\n\t\t\t## add into the participants event attendance \n\t\t\tinsertQ \u003d \"INSERT INTO participant.EventAttendance (participantId, scheduleId, checkin, autonote, timeCreated) VALUES \"\n\t\t\tinsertCSQ \u003d \"INSERT INTO participant.CampusStore(Category, ParticipantId, timeCreated, TotalPoints, TransactionPoints, eventDate) VALUES \"\n\t\t\tisInsertCSQ \u003d False\n\t\t\tfor participant in participantsList:\n\t\t\t\tinsertQ \u003d insertQ + \"(\" + str(participant[\u0027participantId\u0027]) + \",\"\n\t\t\t\tinsertQ \u003d insertQ + str(self.view.custom.selectedEvent.scheduleId).strip() + \",\"\n\t\t\t\tinsertQ \u003d insertQ + \"\u0027\" + str(self.view.custom.selectedEvent.scheduleDate)+ \"\u0027,\"\n\t\t\t\tinsertQ \u003d insertQ + \"\u0027\u0027,CURRENT_TIMESTAMP),\"\n\t\t\t\t\n\t\t\t\t#check if participant is checkIn if checkIn then don\u0027t add\n\t\t\t\t#result \u003d system.db.runPrepQuery(\"SELECT * FROM lodging.BedLog where participantId \u003d \"+str(participant[\u0027participantId\u0027])+\" and eventEnd IS NULL\")\n\t\t\t\t#if result.getRowCount() \u003c 1:\n\t\t\t\tif participant[\u0027participantId\u0027] not in checkInParticipantsList and eventPoints !\u003d None and eventPoints !\u003d \u0027\u0027:\n\t\t\t\t\tisInsertCSQ \u003d True\n\t\t\t\t\tinsertCSQ \u003d insertCSQ + \"(\" + str(categoryId) + \",\"\n\t\t\t\t\tinsertCSQ \u003d insertCSQ + str(participant[\u0027participantId\u0027]) + \", CURRENT_TIMESTAMP, \"\n\t\t\t\t\tinsertCSQ \u003d insertCSQ + \"(SELECT COALESCE( (SELECT TOP 1 store.TotalPoints FROM participant.CampusStore AS store WHERE store.ParticipantId \u003d \" + str(participant[\u0027participantId\u0027]) + \" ORDER BY timeCreated DESC), 0) AS points) + \" + str(eventPoints) + \", \"\n\t\t\t\t\tinsertCSQ \u003d insertCSQ + str(eventPoints) + \", \u0027\" + str(self.view.custom.selectedEvent.scheduleDate) + \"\u0027),\"\n\t\t\t\t\n\t\t\t\n\t\t\tinsertQ \u003d insertQ[:-1]\n\t\t\tinsertCSQ \u003d insertCSQ[:-1]\n\t\n\t\t\ttry:\n\t\t\t\tsystem.db.runUpdateQuery(insertQ)\n\t\t\t\tself.view.custom.selectedEvent.status \u003d \"Checked-In\"\n\t\t\t\t\n\t\t\t\t## we also need to insert campus store points for the participant\n\t\t\t\tif isInsertCSQ \u003d\u003d True:\n\t\t\t\t\tsystem.db.runUpdateQuery(insertCSQ)\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tsystem.perspective.sendMessage(\"participantCheckedIn\",payload\u003d{}, scope\u003d\"session\")\n\t\t\t\tself.parent.parent.getChild(\"participantsList\").refreshBinding(\"props.instances\")\n\t\t\t\tself.parent.parent.getChild(\"Error\").props.text \u003d \"Check-in successful.\"\n\t\t\texcept Exception as e:\n\t\t\t\tsystem.perspective.print(str(e))\n\t\t\t\tself.parent.parent.getChild(\"Error\").props.text \u003d \"Error in Check-in. Please try again ...\"\n\t\t\n\t\ttime.sleep(3)\n\t\tself.parent.parent.getChild(\"Error\").props.text \u003d \"\"\n\t\t\t\n\t\t\t\n\t\t\n\t\t"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "CheckIn"
                },
                "position": {
                  "basis": "100px"
                },
                "propConfig": {
                  "position.display": {
                    "binding": {
                      "config": {
                        "expression": "{view.custom.selectedEvent.status} !\u003d \"Checked-In\" \u0026\u0026 ({session.custom.isAdministrator} || {session.custom.isWSManager} || {session.custom.isWSSupportCoordinator} || {session.custom.isSupportCoordinator} || {session.custom.isManager})"
                      },
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "style": {
                    "classes": "Buttons/Main",
                    "margin": 2
                  },
                  "text": "Check-In"
                },
                "type": "ia.input.button"
              },
              {
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {
                        "script": "\timport time\n\tparticipantsList \u003d \tself.parent.parent.getChild(\"participantsList\").props.instances\n\tif participantsList is not None and len(participantsList) \u003e 0:\n\t\t\n\t\ttry:\n\t\t\t# get checkIn participants list\n\t\t\tcheckInParticipants \u003d \u0027\u0027\n\t\t\tfor participant in participantsList:\n\t\t\t\tcheckInParticipants \u003d  checkInParticipants + str(participant[\u0027participantId\u0027]) + \",\"\n\t\t\tcheckInParticipants \u003d \u0027(\u0027 + checkInParticipants[:-1] + \u0027)\u0027\n\t\t\tresult \u003d system.db.runPrepQuery(\"SELECT participantId FROM lodging.BedLog where participantId in \"+str(checkInParticipants)+\" and eventEnd IS NULL\")\t\n\t\t\tcheckInParticipantsList \u003d result.getColumnAsList(result.getColumnIndex(\"participantId\"))\t\t\n\t\t\tsystem.perspective.print(checkInParticipantsList)\n\t\t\t\t\t\n\t\t\titemsToDelete \u003d filter(lambda x: (x.fromDB \u003d\u003d True and x.markedForDelete \u003d\u003d True), participantsList) ## that were stored and now marked for delete \n\t\t\titemsToAdd \u003d filter(lambda x: (x.fromDB \u003d\u003d False and x.markedForDelete \u003d\u003d False), participantsList)  ## newly added paticipants\n\t\t\titemsDeleted \u003d False\n\t\t\titemsAdded \u003d False\n\t\t\tpath \u003d \u0027Event/ParticipantEvents/CheckIn/GetOrCreateCampusStoreCategory\u0027\n\t\t\tparams \u003d {\u0027eventName\u0027:self.view.custom.selectedEvent.name}\n\t\t\tcategoryId \u003d system.db.runNamedQuery(path\u003dpath, parameters \u003d params)\n\t\t\teventPoints \u003d self.view.custom.selectedEvent.points\n\t\t\tif itemsToDelete is not None and len(itemsToDelete) \u003e 0:\n\t\t\t\tparticipantIds \u003d [str(x.participantId) for x in itemsToDelete]\n\t\t\t\tupdateQ \u003d \"UPDATE participant.EventAttendance SET timeRetired \u003d CURRENT_TIMESTAMP WHERE \" \n\t\t\t\tupdateQ \u003d updateQ + \" scheduleId \u003d \" + str(self.view.custom.selectedEvent.scheduleId)\n\t\t\t\tupdateQ \u003d updateQ + \" AND participantId IN (\" + \",\".join(participantIds) + \")\"\n\t\t\t\t\n#\t\t\t\tsystem.perspective.print(updateQ)\n\t\t\t\tsystem.db.runUpdateQuery(updateQ)\n\t\t\t\t\n\t\t\t\t## also delete the campus store points \n\t\t\t\tinsertCSQ \u003d \"INSERT INTO participant.CampusStore(Category, ParticipantId, timeCreated, TotalPoints, TransactionPoints, eventDate) VALUES \"\n\t\t\t\tisInsertCSQ \u003d False\t\t\t\t\n\t\t\t\tfor participant in itemsToDelete:\n\t\t\t\t\t#check if participant is checkIn if checkIn then don\u0027t add\n\t\t\t\t\tif participant[\u0027participantId\u0027] not in checkInParticipantsList and eventPoints !\u003d None and eventPoints !\u003d \u0027\u0027:\n\t\t\t\t\t\tisInsertCSQ \u003d True\n\t\t\t\t\t\tinsertCSQ \u003d insertCSQ + \"(\" + str(categoryId) + \",\"\n\t\t\t\t\t\tinsertCSQ \u003d insertCSQ + str(participant[\u0027participantId\u0027]) + \",CURRENT_TIMESTAMP, \"\n\t\t\t\t\t\tinsertCSQ \u003d insertCSQ + \"(SELECT COALESCE( (SELECT TOP 1 store.TotalPoints FROM participant.CampusStore AS store WHERE store.ParticipantId \u003d \" + str(participant[\u0027participantId\u0027]) + \" ORDER BY timeCreated DESC), 0) AS points) - \" + str(eventPoints) + \", \"\n\t\t\t\t\t\tinsertCSQ \u003d insertCSQ + str(0 - eventPoints) + \",\u0027\" + str(self.view.custom.selectedEvent.scheduleDate) + \"\u0027),\"\n\t\t\t\t\n\t\t\t\tinsertCSQ \u003d insertCSQ[:-1]\n\t\t\t\tif isInsertCSQ \u003d\u003d True:\n\t\t\t\t\tsystem.db.runUpdateQuery(insertCSQ)\n\t\t\t\t\n\t\t\t\titemsDeleted \u003d True\n\t\t\t\t\n\t\t\tif itemsToAdd is not None and len(itemsToAdd) \u003e 0:\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tinsertQ \u003d \"INSERT INTO participant.EventAttendance (participantId, scheduleId, checkin, autonote, timeCreated) VALUES \"\n\t\t\t\tinsertCSQ \u003d \"INSERT INTO participant.CampusStore(Category, ParticipantId, timeCreated, TotalPoints, TransactionPoints, eventDate) VALUES \"\n\t\t\t\tisInsertCSQ \u003d False\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tfor participant in itemsToAdd:\n\t\t\t\t\tinsertQ \u003d insertQ + \"(\" + str(participant[\u0027participantId\u0027]) + \",\"\n\t\t\t\t\tinsertQ \u003d insertQ + str(self.view.custom.selectedEvent.scheduleId).strip() + \",\"\n\t\t\t\t\tinsertQ \u003d insertQ + \"\u0027\" + str(self.view.custom.selectedEvent.scheduleDate)+ \"\u0027,\"\n\t\t\t\t\tinsertQ \u003d insertQ + \"\u0027\u0027,CURRENT_TIMESTAMP),\"\n\t\t\t\t\t\n\t\t\t\t\t#check if participant is checkIn if checkIn then don\u0027t add\n\t\t\t\t\tif participant[\u0027participantId\u0027] not in checkInParticipantsList and eventPoints !\u003d None and eventPoints !\u003d \u0027\u0027:\n\t\t\t\t\t\tisInsertCSQ \u003d True\n\t\t\t\t\t\tinsertCSQ \u003d insertCSQ + \"(\" + str(categoryId) + \",\"\n\t\t\t\t\t\tinsertCSQ \u003d insertCSQ + str(participant[\u0027participantId\u0027]) + \",CURRENT_TIMESTAMP , \"\n\t\t\t\t\t\tinsertCSQ \u003d insertCSQ + \"(SELECT COALESCE( (SELECT TOP 1 store.TotalPoints FROM participant.CampusStore AS store WHERE store.ParticipantId \u003d \" + str(participant[\u0027participantId\u0027]) + \" ORDER BY timeCreated DESC), 0) AS points) + \" + str(eventPoints) + \", \"\n\t\t\t\t\t\tinsertCSQ \u003d insertCSQ + str(eventPoints) + \", \u0027\" + str(self.view.custom.selectedEvent.scheduleDate) + \"\u0027),\"\n\t\t\t\tinsertQ \u003d insertQ[:-1]\n\t\t\t\tinsertCSQ \u003d insertCSQ[:-1]\n#\t\t\t\tsystem.perspective.print(insertQ)\n\t\t\t\tsystem.db.runUpdateQuery(insertQ)\n\t\t\t\t## we also need to insert campus store points for the participant\n\t\t\t\tif isInsertCSQ \u003d\u003d True:\n\t\t\t\t\tsystem.db.runUpdateQuery(insertCSQ)\n\t\t\t\titemsAdded \u003d True\n\t\t\tif itemsAdded \u003d\u003d True or itemsDeleted \u003d\u003d True:\n\t\t\t\tself.parent.parent.getChild(\"Error\").props.text \u003d \"Update successful\"\n\t\t\t\tself.parent.parent.getChild(\"participantsList\").refreshBinding(\"props.instances\")\n\t\t\t\tsystem.perspective.sendMessage(\"participantCheckedIn\",payload\u003d{}, scope\u003d\"session\")\n\t\t\telse:\n\t\t\t\tself.parent.parent.getChild(\"Error\").props.text \u003d \"Please select participants to update\"\n\t\texcept Exception as e:\n\t\t\tsystem.perspective.print(str(e))\n\t\t\tself.parent.parent.getChild(\"Error\").props.text \u003d \"Update error. Try again ...\"\n\t\t\n\t\ttime.sleep(3)\n\t\t## clear the message\n\t\t\n\t\tself.parent.parent.getChild(\"Error\").props.text \u003d \"\"\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Update"
                },
                "position": {
                  "basis": "100px"
                },
                "propConfig": {
                  "position.display": {
                    "binding": {
                      "config": {
                        "expression": "{view.custom.selectedEvent.status} \u003d \"Checked-In\" \u0026\u0026 ({session.custom.isAdministrator} || {session.custom.isWSManager} || {session.custom.isWSSupportCoordinator} || {session.custom.isSupportCoordinator} || {session.custom.isManager})"
                      },
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "style": {
                    "classes": "Buttons/Main",
                    "margin": 2
                  },
                  "text": "Update"
                },
                "type": "ia.input.button"
              },
              {
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {
                        "script": "\tself.parent.parent.getChild(\"participantsList\").refreshBinding(\"props.instances\")"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Clear"
                },
                "position": {
                  "basis": "100px"
                },
                "propConfig": {
                  "meta.visible": {
                    "binding": {
                      "config": {
                        "expression": "{view.custom.selectedEvent.status} \u003d \"Checked-In\" \u0026\u0026 ({session.custom.isAdministrator} || {session.custom.isWSManager} || {session.custom.isWSSupportCoordinator})"
                      },
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "style": {
                    "classes": "Buttons/Delete",
                    "margin": 2
                  },
                  "text": "CANCEL"
                },
                "type": "ia.input.button"
              }
            ],
            "meta": {
              "name": "Buttons"
            },
            "position": {
              "basis": "40px"
            },
            "props": {
              "justify": "space-between",
              "style": {
                "overflow": "hidden",
                "paddingLeft": 13,
                "paddingRight": 13
              }
            },
            "type": "ia.container.flex"
          },
          {
            "meta": {
              "name": "Error"
            },
            "position": {
              "basis": "25px"
            },
            "props": {
              "style": {
                "classes": "Text/Error_Message"
              }
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "FlexContainer"
        },
        "position": {
          "basis": "200px",
          "grow": 1
        },
        "props": {
          "direction": "column",
          "style": {
            "classes": "Background/Default"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Alternative"
      }
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "eventSelected",
          "pageScope": true,
          "script": "\t# implement your handler here\n\tif payload is not None:\n\t\tself.view.custom.selectedEvent.id \u003d payload[\u0027eventId\u0027]\n\t\tself.view.custom.selectedEvent.scheduleId \u003d payload[\u0027scheduleId\u0027]\n\t\tself.view.custom.selectedEvent.location \u003d payload[\u0027eventLocations\u0027]\n\t\tself.view.custom.selectedEvent.name \u003d payload[\u0027eventName\u0027]\n\t\tself.view.custom.selectedEvent.status \u003d payload[\u0027status\u0027]\n\t\tself.view.custom.selectedEvent.noOfAttendees \u003d payload[\u0027noOfAttendees\u0027]\n\t\tself.view.custom.selectedEvent.points \u003d payload[\u0027points\u0027]\n\t\tif  payload[\u0027scheduleDate\u0027] is not None:\n\t\t\tself.view.custom.selectedEvent.scheduleDate \u003d system.date.format(system.date.fromMillis( payload[\u0027scheduleDate\u0027]),\u0027yyyy-MM-dd HH:mm:ss\u0027)\n\t\telse:\n\t\t\tself.view.custom.selectedEvent.scheduleDate \u003d None",
          "sessionScope": true,
          "viewScope": false
        },
        {
          "messageType": "AddParticipant",
          "pageScope": true,
          "script": "\t# implement your handler here\n\timport time\n\timport copy\n\tmessage \u003d \"\"\n\tsystem.perspective.print(\"AddParticipant\")\n\texistingParticipants \u003d self.getChild(\"FlexContainer\").getChild(\"participantsList\").props.instances\n\ttry:\n\t\tif payload is not None and payload[\u0027participantId\u0027] is not None:\n\t\t\t\n\t\t\tparticipantToAdd \u003d payload[\u0027participantId\u0027]\n\t\t\t\n\t\t\t## get the details of participant to check Gender and get name\n\t\t\tparticipantDetailsQ \u003d \"\"\"\n\t\t\tSELECT CONCAT(pd.firstName, \u0027 \u0027, pd.lastName) as participantName, pd.BirthDate, pd.suspension\n\t\t\tFROM participant.Dashboard pd where ID \u003d ?\n\t\t\t\"\"\"\n#\t\t\t\tsystem.perspective.print(participantDetailsQ)\n\t\t\tparticipantDetails \u003d system.db.runPrepQuery(participantDetailsQ, [participantToAdd])\n\t\t\t\n\t\t\tif participantDetails !\u003d None and participantDetails.getRowCount() \u003e 0:\n\t\t\t\t## check that the Gender matches\n\t\t\t\t\n\t\t\t\tparticipantName \u003d participantDetails.getValueAt(0,\u0027participantName\u0027)\n\t\t\t\tparticipantBirthDate \u003d participantDetails.getValueAt(0,\u0027BirthDate\u0027)\n\t\t\t\tparticipantInSuspension \u003d participantDetails.getValueAt(0,\u0027suspension\u0027)\n\t\t\t\tif participantInSuspension \u003d\u003d False:\t\n\t\t\t\t\tif participantToAdd in [instance.participantId for instance in existingParticipants]:\n\t\t\t\t\t\tmessage \u003d \"Participant is already added\"\n\t\t\t\t\telse: # add the participant to list\n\t\t\t\t\t\tinstanceStruct \u003d {\n\t\t\t\t\t\t  \"instanceStyle\": {\n\t\t\t\t\t\t    \"classes\": \"\"\n\t\t\t\t\t\t  },\n\t\t\t\t\t\t  \"instancePosition\": {},\n\t\t\t\t\t\t  \"participantId\": -1,\n\t\t\t\t\t\t  \"eventId\":self.view.custom.selectedEvent.id,\n\t\t\t\t\t\t  \"participantName\":\u0027\u0027,\n\t\t\t\t\t\t  \"birthDate\":None,\n\t\t\t\t\t\t  \"scheduleId\":self.view.custom.selectedEvent.scheduleId,\n\t\t\t\t\t\t  \"fromDB\": False,\n\t\t\t\t\t\t  \"markedForDelete\":False \n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\tinstanceStruct[\u0027participantId\u0027] \u003d participantToAdd\n\t\t\t\t\t\tinstanceStruct[\u0027participantName\u0027] \u003d participantName\n\t\t\t\t\t\tinstanceStruct[\u0027birthDate\u0027] \u003d participantBirthDate\n\t\t\t\t\t\tsystem.perspective.print(instanceStruct)\n\t\t\t\t\t\texistingParticipants.append(instanceStruct)\n\t\t\t\t\t\tself.getChild(\"FlexContainer\").getChild(\"participantsList\").props.instances \u003d existingParticipants\n\t\t\t\telse: ## participant is suspended\n\t\t\t\t\tself.view.custom.participantToAdd.id \u003d payload[\u0027participantId\u0027]\n\t\t\t\t\tself.view.custom.participantToAdd.name \u003d participantName\n\t\t\t\t\tself.view.custom.participantToAdd.dateOfBirth \u003d participantBirthDate\n\t\t\t\t\t## show a confirmation popup\n\t\t\t\t\tsystem.perspective.openPopup(\"checkInWarning\",\"Events/ParticipantEvents/CheckIn/Dashboard/Cards/CheckInWarning\",params\u003d{}, showCloseIcon \u003d False, resizable \u003d False, draggable \u003d False, overlayDismiss \u003d True, modal  \u003d True)\n\t\t\t\t\n\t\t\telse:\n\t\t\t\tmessage \u003d \"Participant details could not be retrieved\" \n\t\telse:\n\t\t\tmessage \u003d \"Payload not received\" \n\t\t\n\t\t\t \n\texcept:\n\t\tmessage \u003d \"Internal error, try again\"\n\t\n\tif message !\u003d \"\":\n\t\tself.getChild(\"FlexContainer\").getChild(\"Error\").props.text \u003d message\n\t\ttime.sleep(3)\n\t\tself.getChild(\"FlexContainer\").getChild(\"Error\").props.text \u003d \"\"",
          "sessionScope": true,
          "viewScope": false
        },
        {
          "messageType": "AllowSuspendedParticipant",
          "pageScope": true,
          "script": "\timport time\n\timport copy\n\tsystem.perspective.print(\"Add Suspended Participant OK\")\n\tparticipantToAdd \u003d self.view.custom.participantToAdd.id\n\tparticipantName \u003d self.view.custom.participantToAdd.name\n\tparticipantBirthDate \u003d self.view.custom.participantToAdd.dateOfBirth\n\texistingParticipants \u003d  self.getChild(\"FlexContainer\").getChild(\"participantsList\").props.instances\n\tif participantToAdd in [instance.participantId for instance in existingParticipants]:\n\t\tself.getChild(\"FlexContainer\").getChild(\"Error\").props.text \u003d \"Participant is already added\"\n\t\ttime.sleep(3)\n\t\tself.getChild(\"FlexContainer\").getChild(\"Error\").props.text \u003d \"\"\n\telse: # add the participant to list\n\t\tinstanceStruct \u003d {\n\t\t  \"instanceStyle\": {\n\t\t    \"classes\": \"\"\n\t\t  },\n\t\t  \"instancePosition\": {},\n\t\t  \"participantId\": -1,\n\t\t  \"eventId\":self.view.custom.selectedEvent.id,\n\t\t  \"participantName\":\u0027\u0027,\n\t\t  \"birthDate\":None,\n\t\t  \"scheduleId\":self.view.custom.selectedEvent.scheduleId,\n\t\t  \"fromDB\": False,\n\t\t  \"markedForDelete\":False \n\t\t}\n\t\t\n\t\n\t\tinstanceStruct[\u0027participantId\u0027] \u003d participantToAdd\n\t\tinstanceStruct[\u0027participantName\u0027] \u003d participantName\n\t\tinstanceStruct[\u0027birthDate\u0027] \u003d participantBirthDate\n\t\tsystem.perspective.print(instanceStruct)\n\t\texistingParticipants.append(instanceStruct)\n\t\tself.getChild(\"FlexContainer\").getChild(\"participantsList\").props.instances \u003d existingParticipants\n\t\n\t\t",
          "sessionScope": true,
          "viewScope": false
        },
        {
          "messageType": "ServeDateSelected",
          "pageScope": true,
          "script": "\t# implement your handler here\n\tself.view.custom.selectedEvent.id \u003d -1\n\tself.view.custom.selectedEvent.scheduleId \u003d -1\n\tself.view.custom.selectedEvent.location \u003d \u0027\u0027\n\tself.view.custom.selectedEvent.name \u003d \u0027\u0027\n\tself.view.custom.selectedEvent.status \u003d \u0027\u0027\n\tself.view.custom.selectedEvent.noOfAttendees \u003d -1\n\tself.view.custom.selectedEvent.scheduleDate \u003d \u0027\u0027",
          "sessionScope": true,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}