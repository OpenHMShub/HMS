{
  "custom": {},
  "events": {
    "system": {
      "onShutdown": {
        "config": {
          "script": "\troot \u003d self.getChild(\"root\")\n\temvActivityRange \u003d root.getChild(\"emvActivityRange\")\n\temvCheckIO \u003d root.getChild(\"emvCheckIO\")\t\n\temvActivityRange.props.params.actionPerformedPulse \u003d False\n\temvCheckIO.props.params.actionPerformedPulse \u003d False"
        },
        "scope": "G",
        "type": "script"
      },
      "onStartup": {
        "config": {
          "script": "\ttry:\n\t\troot \u003d self.getChild(\"root\")\n\t\troot.setPropsDropdowns()\t\t\t\t\t\n\texcept:\n\t\timport traceback\n\t\tlogger \u003d system.util.getLogger(\"Events\")\n\t\tmsg \u003d self.name + \u0027:\\n\u0027\n\t\tmsg +\u003d traceback.format_exc()\n\t\tlogger.error(msg)\t\t\t"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "ActivityRange": {
      "$": [
        "ts",
        192,
        1747663668444
      ],
      "$ts": 1716127668442
    },
    "CategoryId": null,
    "EventName": null,
    "beginDate": null,
    "endDate": null,
    "facilitatorId": null,
    "gender": null,
    "programId": null,
    "search": "",
    "selectedAttendeeCategories": null,
    "summary": false
  },
  "propConfig": {
    "params.ActivityRange": {
      "binding": {
        "config": {
          "path": "/root/emvActivityRange.props.params.selection"
        },
        "transforms": [
          {
            "code": "\tdays \u003d 365\n\tif value \u003d\u003d 0 or value \u003d\u003d None:\n\t\tdays \u003d 36500 \n\telif value \u003d\u003d -1:\n\t\t## month to date\n\t\tdays \u003d  system.date.getDayOfMonth(system.date.now()) - 1\n\telif value \u003d\u003d -2:\n\t\t## year to date\n\t\tdays \u003d  system.date.getDayOfYear(system.date.now()) -1\n\telse:\n\t\tdays \u003d  value\n\treturn system.date.addDays(system.date.now(), -days)",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.CategoryId": {
      "binding": {
        "config": {
          "path": "/root/emvCategoryId.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.EventName": {
      "binding": {
        "config": {
          "path": "/root/emvEventName.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.beginDate": {
      "binding": {
        "config": {
          "path": "/root/emvDateRange.props.params.BeginDate"
        },
        "transforms": [
          {
            "code": "\tif value is not None:\n\t\treturn system.date.setTime(value, 0, 0, 0)\n\telse:\n\t\treturn value\n",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.endDate": {
      "binding": {
        "config": {
          "path": "/root/emvDateRange.props.params.EndDate"
        },
        "transforms": [
          {
            "code": "\tif value is not None:\n\t\treturn system.date.setTime(value, 23, 59, 59)\n\telse:\n\t\treturn value",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.facilitatorId": {
      "binding": {
        "config": {
          "path": "/root/emvFacilitator.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.gender": {
      "binding": {
        "config": {
          "path": "/root/emvGender.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.programId": {
      "binding": {
        "config": {
          "path": "/root/Programs/filter.props.value"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.search": {
      "binding": {
        "config": {
          "path": "/root/emvSearch.props.params.searchText"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.selectedAttendeeCategories": {
      "binding": {
        "config": {
          "path": "/root/emvAttendeeCategory.props.params.selection"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.summary": {
      "binding": {
        "config": {
          "path": "/root/summary.props.params.checked"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 30,
      "width": 1820
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "emvActivityRange"
        },
        "position": {
          "basis": "105px",
          "shrink": 0
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [
              {
                "label": "Yesterday",
                "value": 1
              },
              {
                "label": "7 Days",
                "value": 7
              },
              {
                "label": "14 Days",
                "value": 14
              },
              {
                "label": "Month to Date",
                "value": -1
              },
              {
                "label": "30 Days",
                "value": 30
              },
              {
                "label": "60 Days",
                "value": 60
              },
              {
                "label": "90 Days",
                "value": 90
              },
              {
                "label": "180 Days",
                "value": 180
              },
              {
                "label": "Year to Date",
                "value": -2
              },
              {
                "label": "1 Year",
                "value": 365
              },
              {
                "label": "2 Years",
                "value": 730
              },
              {
                "label": "3 Years",
                "value": 1095
              },
              {
                "label": "4 Years",
                "value": 1460
              },
              {
                "label": "5 Years",
                "value": 1825
              },
              {
                "label": "All Time",
                "value": 0
              }
            ],
            "placeholder": "Activity Range",
            "selection": 365,
            "selectionIn": 365
          },
          "path": "Events/Templates/DropDown_TealBlue_ActivityRange",
          "style": {
            "classes": "Filter/Filter_Container",
            "marginLeft": "40px"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\tmidnight \u003d system.date.midnight(system.date.now())\n\tnintyDaysValue \u003d system.date.addDays(midnight,-90)\n\tlstDateFrom \u003d \t[\n\t[1, \u0027Yesterday\u0027],\n\t[7, \u00277 Days\u0027],\n\t[14, \u002714 Days\u0027],\n\t[-1,\u0027Month to Date\u0027],\n\t[30, \u002730 Days\u0027],\n\t[60, \u002760 Days\u0027],\n\t[90, \u002790 Days\u0027],\n\t[180, \u0027180 Days\u0027],\n\t[-2,\u0027Year to Date\u0027],\n\t[365, \u00271 Year\u0027],\n\t[730, \u00272 Years\u0027],\n\t[1095, \u00273 Years\u0027],\n\t[1460, \u00274 Years\u0027],\n\t[1825, \u00275 Years\u0027],\n\t[0, \u0027All Time\u0027]\t\n\t]\n\t\t\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[1]) for x in lstDateFrom]\n\n\tself.props.params.selectionIn \u003d 365\n\t\t"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvDateRange"
        },
        "position": {
          "basis": "190px",
          "shrink": 0
        },
        "props": {
          "params": {
            "BeginDate": null,
            "EndDate": null,
            "placeholder": "Date Range"
          },
          "path": "Events/ParticipantEvents/Attendance/Detail/component/Filters/DateRangePicker",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvCategoryId"
        },
        "position": {
          "shrink": 0
        },
        "propConfig": {
          "position.basis": {
            "binding": {
              "config": {
                "path": "../summary.props.params.checked"
              },
              "transforms": [
                {
                  "code": "\tif value \u003d\u003d True:\n\t\treturn \u0027250px\u0027\n\telse:\n\t\treturn \u0027180px\u0027",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [
              {
                "label": "New Category!",
                "value": 1
              },
              {
                "label": "Test Category",
                "value": 2
              }
            ],
            "placeholder": "Category",
            "selection": null
          },
          "path": "Events/ParticipantEvents/Attendance/Detail/component/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\tquery \u003d \"\"\"\nSELECT [id]\n  ,[name]\nFROM [participant].[EventCategories]\nORDER BY [name]\n\t\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[1]) for x in result]\n\t\n\t# Version 2 set options as dataset\n\t#self.props.params.options \u003d result\n\t\n\t"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvEventName"
        },
        "position": {
          "shrink": 0
        },
        "propConfig": {
          "position.basis": {
            "binding": {
              "config": {
                "path": "../summary.props.params.checked"
              },
              "transforms": [
                {
                  "code": "\tif value \u003d\u003d True:\n\t\treturn \u0027300px\u0027\n\telse:\n\t\treturn \u0027180px\u0027",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": true,
            "options": [
              {
                "label": "Event",
                "value": "Event"
              },
              {
                "label": "Friday13",
                "value": "Friday13"
              },
              {
                "label": "NewEvent3",
                "value": "NewEvent3"
              },
              {
                "label": "Test1",
                "value": "Test1"
              }
            ],
            "placeholder": "Event Name",
            "selection": null
          },
          "path": "Events/ParticipantEvents/Attendance/Detail/component/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\tquery \u003d \"\"\"\nSELECT \n\t [name] AS [lable]\n\t,[name] AS [value]\nFROM [participant].[Events]\nORDER BY [name] \n\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[1]) for x in result]\n\t\n\t# Version 2 set options as dataset\n\t#self.props.params.options \u003d result\n\t\n\t"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvCheckIO"
        },
        "position": {
          "basis": "400px",
          "display": false
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [
              {
                "label": "checkout",
                "value": 0
              },
              {
                "label": "checkin",
                "value": 1
              }
            ],
            "placeholder": "Check-In / Out",
            "selection": 1
          },
          "path": "Events/ParticipantEvents/Attendance/Detail/component/Filters/Conditional_DropDown_InitValue",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\tquery \u003d \"\"\"\nSELECT 0, \u0027checkout\u0027\nUNION ALL \nSELECT 1, \u0027checkin\u0027\n\t\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[1]) for x in result]\n\t\n\t# Version 2 set options as dataset\n\t#self.props.params.options \u003d result\n\t\n\tself.props.params.selection \u003d 1"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvAttendeeCategory"
        },
        "position": {
          "basis": "140px",
          "shrink": 0
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "path": "../summary.props.params.checked"
              },
              "transforms": [
                {
                  "code": "\tif value \u003d\u003d True:\n\t\treturn False\n\telse:\n\t\treturn True",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": true,
            "options": [
              {
                "label": "Guest House",
                "value": "Guest House"
              },
              {
                "label": "Hope U",
                "value": "Hope U"
              },
              {
                "label": "Residents (Apartments)",
                "value": "Residents (Apartments)"
              }
            ],
            "placeholder": "Attendee",
            "selection": null
          },
          "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container",
            "marginLeft": "4px"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\t\n#\tquery \u003d \"\"\"\n#\tSELECT \n#\t\t [id] AS [value]\n#\t\t,[name] AS [label]\n#\tFROM participant.EventAttendeeCategories\n#\n#\t\"\"\"\n#\t\t\n#\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n#\t\t\n#\t# Version 1 set options as list of dictionaries\n#\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[1]) for x in result]\n\n\tself.props.params.options \u003d [{\"value\":\"Guest House\", \"label\":\"Guest House\"},{\"value\":\"Hope U\", \"label\":\"Hope U\"},{\"value\":\"Residents (Apartments)\", \"label\":\"Residents (Apartments)\"}]\n\t\n"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvGender"
        },
        "position": {
          "basis": "400px"
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "path": "../summary.props.params.checked"
              },
              "transforms": [
                {
                  "code": "\tif value \u003d\u003d True:\n\t\treturn False\n\telse:\n\t\treturn True",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [
              {
                "label": "Male",
                "value": 0
              },
              {
                "label": "Female",
                "value": 1
              },
              {
                "label": "Transgender Male to Female",
                "value": 2
              },
              {
                "label": "Transgender Female to Male",
                "value": 3
              },
              {
                "label": "Client refused",
                "value": 4
              },
              {
                "label": "Data not collected",
                "value": 5
              },
              {
                "label": "Client doesn\u0027t know",
                "value": 7
              },
              {
                "label": "Non-Binary",
                "value": 8
              }
            ],
            "placeholder": "Gender",
            "selection": null
          },
          "path": "Events/ParticipantEvents/Attendance/Detail/component/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\tquery \u003d \"\"\"\nSELECT [id]\n\t  ,[genderName]\nFROM [humans].[Gender]\nORDER BY [id]\n\t\"\"\"\n\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[1]) for x in result]\n\t\n\t# Version 2 set options as dataset\n\t#self.props.params.options \u003d result\n\t\n\t"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvFacilitator"
        },
        "position": {
          "basis": "115px",
          "shrink": 0
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [
              {
                "label": "ASDF ZXCV",
                "value": 66
              },
              {
                "label": "AtendMB MB",
                "value": 15
              },
              {
                "label": "AtendMB MB",
                "value": 16
              },
              {
                "label": "AtendMB MB",
                "value": 17
              },
              {
                "label": "AtendMB MB",
                "value": 18
              },
              {
                "label": "AtendMB MB",
                "value": 19
              },
              {
                "label": "AtendMB MB",
                "value": 20
              },
              {
                "label": "AtendMB MB",
                "value": 21
              },
              {
                "label": "AtendMB MB",
                "value": 22
              },
              {
                "label": "AtendMB MB",
                "value": 23
              },
              {
                "label": "LAst001 V last",
                "value": 69
              },
              {
                "label": "New123VVV vvv",
                "value": 74
              },
              {
                "label": "SDfg SDFG",
                "value": 32
              },
              {
                "label": "Staff2 Last2",
                "value": 3
              },
              {
                "label": "Staff2 Last2",
                "value": 4
              },
              {
                "label": "Staff2 Last2",
                "value": 5
              },
              {
                "label": "Staff2 Last2",
                "value": 6
              },
              {
                "label": "Staff2 Last2",
                "value": 7
              },
              {
                "label": "Staff2 Last2",
                "value": 8
              },
              {
                "label": "Staff2 Last2",
                "value": 9
              },
              {
                "label": "Staffff mid Lastt",
                "value": 10
              },
              {
                "label": "Staffff mid Lastt",
                "value": 11
              },
              {
                "label": "Staffff mid Lastt",
                "value": 12
              },
              {
                "label": "Staffff mid Lastt",
                "value": 13
              },
              {
                "label": "Test V VVV",
                "value": 71
              },
              {
                "label": "Test3 VVV",
                "value": 70
              },
              {
                "label": "TestV asdf Name",
                "value": 68
              },
              {
                "label": "TestV VVV VVV",
                "value": 67
              },
              {
                "label": "Volodya Coor Coordinator Coordinator",
                "value": 2
              },
              {
                "label": "xcvbnb zdfgmnbvcxz",
                "value": 65
              }
            ],
            "placeholder": "Facilitator",
            "selection": null
          },
          "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Text_TeelBlue Filter/Filter_Container",
            "marginLeft": "4px"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "setOptions",
              "params": [],
              "script": "\t\n\tquery \u003d \"\"\"\n\t\tSELECT f.humanId as id, f.name FROM(\n\t\tSELECT \n\t\t\ts.humanId, \n\t\t\tconcat(h.firstName,\n\t\t\t\tCASE when (h.middleName IS NULL or h.middleName\u003d\u0027\u0027) then \u0027\u0027 else \u0027 \u0027 end,\n\t\t\t\th.middleName,\n\t\t\t\tCASE when (h.lastName IS NULL or h.lastName\u003d\u0027\u0027) then \u0027\u0027 else \u0027 \u0027 end,\n\t\t\t\th.lastName\n\t\t\t) as name\n\t\tFROM \n\t\t\tstaff.Employee s\n\t\tLEFT JOIN\n\t\t\thumans.Human h ON s.humanId \u003d h.id\n\t\t--WHERE \n\t\t--\ts.isFacilitator \u003d 1\n\t\tUNION\n\t\tSELECT \n\t\t\tv.humanId, \n\t\t\tconcat(h.firstName,\n\t\t\t\tCASE when (h.middleName IS NULL or h.middleName\u003d\u0027\u0027) then \u0027\u0027 else \u0027 \u0027 end,\n\t\t\t\th.middleName,\n\t\t\t\tCASE when (h.lastName IS NULL or h.lastName\u003d\u0027\u0027) then \u0027\u0027 else \u0027 \u0027 end,\n\t\t\t\th.lastName\n\t\t\t) as name\n\t\tFROM \n\t\t\t[staff].[Volunteer] v\n\t\tLEFT JOIN\n\t\t\thumans.Human h ON v.humanId \u003d h.id\n\t\t) f\n\t\torder by f.name asc\n\t\"\"\"\n\t\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027HMSOps\u0027)\n\t\t\n\t# Version 1 set options as list of dictionaries\n\tself.props.params.options \u003d [ dict(value \u003d x[0],label \u003d x[1]) for x in result]\n\t\n"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "custom": {
              "selecting": true
            },
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "script": "\tmessageType \u003d \u0027selecting\u0027\n\tpayload \u003d {\u0027current\u0027: self.props.placeholder.text}\n\tsystem.perspective.sendMessage(messageType,payload)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "filter"
            },
            "position": {
              "basis": "100%"
            },
            "propConfig": {
              "props.options": {
                "binding": {
                  "config": {
                    "queryPath": "Participants/Dashboard/Get_participantProgram"
                  },
                  "type": "query"
                }
              },
              "props.style.classes": {
                "binding": {
                  "config": {
                    "path": "this.props.value"
                  },
                  "transforms": [
                    {
                      "code": "\tif value \u003d\u003d -1 or value \u003d\u003d None:\n\t\treturn \"Dropdowns/DD_Default\"\n\telse:\n\t\treturn \"Dropdowns/DD_TeelBlue\"",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "dropdownOptionStyle": {
                "classes": "Dropdowns/DD_Options"
              },
              "placeholder": {
                "text": "(All Programs)"
              },
              "search": {
                "enabled": false
              },
              "showClearIcon": true,
              "style": {},
              "value": null,
              "wrapMultiSelectValues": false
            },
            "type": "ia.input.dropdown"
          }
        ],
        "meta": {
          "name": "Programs"
        },
        "position": {
          "basis": "150px",
          "shrink": 0
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "path": "../summary.props.params.checked"
              },
              "transforms": [
                {
                  "code": "\tif value \u003d\u003d True:\n\t\treturn False\n\telse:\n\t\treturn True",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "direction": "column",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "scripts": {
          "customMethods": [],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "clearFilter",
              "pageScope": true,
              "script": "\tself.getChild(\"filter\").props.value \u003d None",
              "sessionScope": false,
              "viewScope": true
            }
          ]
        },
        "type": "ia.container.flex"
      },
      {
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "script": "\tsystem.perspective.sendMessage (\u0027mhExportToExcel\u0027, payload \u003d {})\n"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "toExcel"
        },
        "position": {
          "basis": "30px",
          "shrink": 0
        },
        "props": {
          "params": {
            "dataset": null,
            "defaultFilePrefix": "Participants"
          },
          "path": "1_TEMPLATES/Tables/TableToExcel"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "summary"
        },
        "position": {
          "basis": "180px",
          "shrink": 0
        },
        "props": {
          "params": {
            "checked": false,
            "text": "Summary"
          },
          "path": "1_TEMPLATES/60px/top/Input_Checkbox",
          "useDefaultViewHeight": true,
          "useDefaultViewWidth": true
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Placeholder"
        },
        "position": {
          "basis": "10px",
          "grow": 1
        },
        "props": {
          "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "lblSearch"
        },
        "position": {
          "basis": "50px",
          "grow": 1,
          "shrink": 0
        },
        "props": {
          "style": {
            "classes": "Table/Filter_Header",
            "paddingRight": "10px",
            "textAlign": "right"
          },
          "text": "Search:"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "emvSearch"
        },
        "position": {
          "basis": "220px",
          "shrink": 0
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "keyUpPulse": false,
            "searchText": ""
          },
          "path": "Events/ParticipantEvents/Attendance/Detail/component/Filters/Search_Bar",
          "style": {
            "classes": "Table/Search_Bar"
          },
          "useDefaultViewWidth": true
        },
        "type": "ia.display.view"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\troot \u003d self.parent\n\t\n\temvCategoryId \u003d root.getChild(\"emvCategoryId\")\n\temvEventName \u003d root.getChild(\"emvEventName\")\n\temvFacilitator \u003d self.getSibling(\"emvFacilitator\")\n\temvActivityRange \u003d root.getChild(\"emvActivityRange\")\n\temvGender \u003d root.getChild(\"emvGender\")\n\temvMinAge \u003d root.getChild(\"emvMinAge\")\n\temvMaxAge \u003d root.getChild(\"emvMaxAge\")\n\temvSearch \u003d root.getChild(\"emvSearch\")\n\temvAttendeeCategory \u003d self.getSibling(\"emvAttendeeCategory\")\n\t\n\temvCategoryId.props.params.clear \u003d True\n\temvEventName.props.params.clear \u003d True\n\temvFacilitator.props.params.clear \u003d True\n\temvGender.props.params.clear \u003d True\n\temvMinAge.props.params.clear \u003d True\n\temvMaxAge.props.params.clear \u003d True\n\temvSearch.props.params.clear \u003d True\n\temvAttendeeCategory.props.params.clear \u003d True\n\t\n\t\n\tpayload \u003d {}\n\tpayload[\u0027calendarId\u0027] \u003d None\n\tpayload[\u0027calEventName\u0027] \u003d None\n\t\n\tpayload[\u0027activityRange\u0027] \u003d None\n\tpayload[\u0027genderId\u0027] \u003d None\n\tpayload[\u0027minAge\u0027] \u003d None\n\tpayload[\u0027maxAge\u0027] \u003d None\n\tpayload[\u0027searchText\u0027] \u003d None\n\tpayload[\u0027beginDate\u0027] \u003d None\n\tpayload[\u0027endDate\u0027] \u003d None\n\tsystem.perspective.sendMessage(\"clearFilter\", payload\u003d{}, scope\u003d\"page\")\n\t"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "clearConditions"
        },
        "position": {
          "basis": "30px",
          "shrink": 0
        },
        "props": {
          "image": {
            "height": 16,
            "icon": {
              "color": "#0C4E8B",
              "path": "material/close"
            },
            "position": "center",
            "width": 16
          },
          "style": {
            "classes": "Filter/Filter_Border_Default Filter/Filter_Container",
            "marginRight": "0px"
          },
          "text": "",
          "textStyle": {
            "classes": "GreyColor"
          }
        },
        "type": "ia.input.button"
      }
    ],
    "custom": {
      "_devClean": false,
      "_devPulse": false,
      "_isDev": false
    },
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "custom._devClean": {
        "onChange": {
          "enabled": null,
          "script": "\t\n\temvCalendarId \u003d self.getChild(\"emvCalendarId\")\n\temvEventName \u003d self.getChild(\"emvEventName\")\n\temvCheckIO \u003d self.getChild(\"emvCheckIO\")\n\temvActivityRange \u003d self.getChild(\"emvActivityRange\")\n\temvGender \u003d self.getChild(\"emvGender\")\n\temvMinAge \u003d self.getChild(\"emvMinAge\")\n\temvMaxAge \u003d self.getChild(\"emvMaxAge\")\n\temvSearch \u003d self.getChild(\"emvSearch\")\n\t\n\temvCalendarId.props.params.clear \u003d True\n\temvEventName.props.params.clear \u003d True\n\temvCheckIO.props.params.clear \u003d True\n\temvActivityRange.props.params.clear \u003d True\n\temvGender.props.params.clear \u003d True\n\temvMinAge.props.params.clear \u003d True\n\temvMaxAge.props.params.clear \u003d True\n\temvSearch.props.params.clear \u003d True\n\n\temvCalendarId.props.params.actionPerformedPulse \u003d False\n\temvEventName.props.params.actionPerformedPulse \u003d False\n\temvCheckIO.props.params.actionPerformedPulse \u003d False\n\temvActivityRange.props.params.actionPerformedPulse \u003d False\n\temvGender.props.params.actionPerformedPulse \u003d False\n\temvMinAge.props.params.actionPerformedPulse \u003d False\n\temvMaxAge.props.params.actionPerformedPulse \u003d False\n\temvSearch.props.params.actionPerformedPulse \u003d False\t\n\n\t\n\tif self.custom._devClean:\n\t\tself.custom._devClean \u003d False"
        }
      },
      "custom._devPulse": {
        "onChange": {
          "enabled": null,
          "script": "\t\n\temvCalendarId \u003d self.getChild(\"emvCalendarId\")\n\temvEventName \u003d self.getChild(\"emvEventName\")\n\temvCheckIO \u003d self.getChild(\"emvCheckIO\")\n\temvActivityRange \u003d self.getChild(\"emvActivityRange\")\n\temvGender \u003d self.getChild(\"emvGender\")\n\temvMinAge \u003d self.getChild(\"emvMinAge\")\n\temvMaxAge \u003d self.getChild(\"emvMaxAge\")\n\temvSearch \u003d self.getChild(\"emvSearch\")\n\n\n\t\n\t\n\tif self.custom._isDev:\n\t\tif currentValue.value is True:\n\t\t\tself.setPropsDropdowns()\n\t\telse:\n\t\t\temvCalendarId.props.params.options \u003d False\n\t\t\temvEventName.props.params.options \u003d False\n\t\t\temvCheckIO.props.params.options \u003d False\n\t\t\temvActivityRange.props.params.options \u003d False\n\t\t\temvGender.props.params.options \u003d False\n\t\t\temvMinAge.props.params.options \u003d False\n\t\t\temvMaxAge.props.params.options \u003d False\n\t\t\temvSearch.props.params.searchText \u003d None\n\t\t\t\n\temvCalendarId.props.params.actionPerformedPulse \u003d False\n\temvEventName.props.params.actionPerformedPulse \u003d False\n\temvCheckIO.props.params.actionPerformedPulse \u003d False\n\temvActivityRange.props.params.actionPerformedPulse \u003d False\n\temvGender.props.params.actionPerformedPulse \u003d False\n\temvMinAge.props.params.actionPerformedPulse \u003d False\n\temvMaxAge.props.params.actionPerformedPulse \u003d False\n\temvSearch.props.params.actionPerformedPulse \u003d False\t"
        }
      }
    },
    "props": {
      "style": {
        "classes": "Filter/Header_Text"
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "setPropsDropdowns",
          "params": [],
          "script": "\temvCategoryId \u003d self.getChild(\"emvCategoryId\")\n\temvEventName \u003d self.getChild(\"emvEventName\")\n#\temvCheckIO \u003d self.getChild(\"emvCheckIO\")\n\temvActivityRange \u003d self.getChild(\"emvActivityRange\")\n\temvGender \u003d self.getChild(\"emvGender\")\n\temvMinAge \u003d self.getChild(\"emvMinAge\")\n\temvMaxAge \u003d self.getChild(\"emvMaxAge\")\n\temvFacilitator \u003d self.getChild(\"emvFacilitator\")\n\temvAttendeeCategory \u003d self.getChild(\"emvAttendeeCategory\")\n\t\n\temvCategoryId.setOptions()\n\temvEventName.setOptions()\n#\temvCheckIO.setOptions()\n\temvActivityRange.setOptions()\n\temvGender.setOptions()\n\temvFacilitator.setOptions()\n\temvAttendeeCategory.setOptions()"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": []
    },
    "type": "ia.container.flex"
  }
}