{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\ttry:\n\t\tpayload \u003d{} #\u0027offset\u0027:0,\u0027fetch\u0027 : 100 }\n\t\t#system.perspective.sendMessage(\u0027mhByCondition\u0027, payload \u003d payload)\n\n\texcept:\n\t\timport traceback\n\t\tlogger \u003d system.util.getLogger(\"{}\".format(\u0027Providers_Table onStartUp\u0027))\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)\t\n\n"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "fetch": null,
    "resultRowCount": 18
  },
  "propConfig": {
    "params.fetch": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.resultRowCount": {
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 1053,
      "width": 1918
    }
  },
  "root": {
    "children": [
      {
        "custom": {
          "_dev2Excel": false,
          "_devPulse": false,
          "_isDev": false,
          "jsonLastPayload": null,
          "lastPayload": {
            "calEventName": null,
            "calendarId": null,
            "checkIO": null,
            "dateFrom": null,
            "dateTo": null,
            "genderId": null,
            "maxAge": null,
            "minAge": null,
            "searchText": null
          }
        },
        "events": {
          "component": {
            "onRowClick": {
              "config": {
                "script": "\tselectedColumn \u003d self.props.selection.selectedColumn \n\n\ttrackID \u003d event.value.get(\u0027id\u0027)\n\t\n\t#ystem.perspective.print((\u0027trackID : {} {}\u0027.format(trackID , type(trackID)) ))\n\t\n\tif trackID is None:\n\t\t#ystem.perspective.print((\u0027trackID is None : {} {}\u0027.format(trackID , type(trackID)) ))\n\t\treturn\n\t\n\t#ystem.perspective.print((\u0027selectedColumn: \u0027, selectedColumn ))\n\t\n\tif selectedColumn \u003d\u003d \"id\":\n\t\tid \u003d \"PreviewParticipant\" \n\t\tparams \u003d {\"participantID\":trackID}\n\t\tsystem.perspective.openDock(id\u003did, params\u003dparams)\n\n\telse:\n\t\tpass\n\n\n\ttoDelete \u003d \"\"\"\n\n\t\telif selectedColumn \u003d\u003d \"Participant Name\" or selectedColumn is None:\n\t\t\tsystem.perspective.print((\u00272\u0027))\n\t\t\ttab_id \u003d 1\n\t\t\tsystem.perspective.print((\u0027col is name : {} {}\u0027.format(trackID , tab_id) ))\n\t\t\tsystem.perspective.navigate(\"Participants/Detail/\" + str(trackID) + \"/\" + str(tab_id))\t\n\t\ndef runAction(self, event):\n\t\tselectedColumn \u003d self.props.selection.selectedColumn\n\t\t#system.perspective.print(self.props.data[event.row])\t\n\t\tif selectedColumn \u003d\u003d \"participant_name\": \n\t\t\t##Display the detail screen\n\t\t\tparticipantID \u003d str(self.props.data[event.row].value.participant_id)\n\t\t\tsystem.perspective.print(participantID)\n\t\t\ttab_id \u003d 3\n\t\t\tsystem.perspective.navigate(\"Participants/Detail/\" + str(participantID) + \"/\" + str(tab_id))\n\t\telif selectedColumn \u003d\u003d \"participant_id\":\n\t\t\tparticipantID \u003d str(self.props.data[event.row].value.participant_id)\n\t\t\tsystem.perspective.print(participantID)\n\t\t\tid \u003d \"PreviewParticipant\" \n\t\t\tparams \u003d {\"participantID\":participantID}\n\t\t\tsystem.perspective.openDock(id\u003did,params\u003dparams)\n\t\telse:\n\t\t\t#Close the search window\n\t\t\tself.view.params.participant_search \u003d False\n\t\t\t#Highlight the select row\n\t\t\tfor item in range(len(self.props.data)):\n\t\t\t\tif item \u003d\u003d event.row:\n\t\t\t\t\tself.props.data[item].style.classes \u003d \u0027Table/Row_Select_Dashboard\u0027\n\t\t\t\telse:\n\t\t\t\t\tself.props.data[item].style.classes \u003d \u0027Table/Cell_Dashboard\u0027\t\n\t\ndef runAction(self, event):\n\t\timport traceback\n\t\ttry:\n\t\t\tselectedColumn \u003d self.props.selection.selectedColumn\n\t\t\tparticipantID \u003d self.props.data.getValueAt(event.row,\u0027ID\u0027)\n\t\t\tshelterID \u003d self.props.data.getValueAt(event.row,\u0027shelterId\u0027)\n\t\t\t#system.perspective.print(selectedColumn)\n\t\t\t#system.perspective.print(participantID)\n\t\t\tsystem.perspective.print(shelterID)\n\t\t\tif selectedColumn \u003d\u003d \"Detail\" or selectedColumn \u003d\u003d \"Name\": \n\t\t\t\t#Display the detail screen\n\t\t\t\t#system.perspective.print(\u0027Participant Detail\u0027)\n\t\t\t\ttab_id \u003d 1\n\t\t\t\tsystem.perspective.navigate(\"Participants/Detail/\" + str(participantID) + \"/\" + str(tab_id))\n\t\t\t#elif selectedColumn \u003d\u003d \"Options\":\n\t\t\telif selectedColumn \u003d\u003d \"ID\":\n\t\t\t\tid \u003d \"PreviewParticipant\" \n\t\t\t\tparams \u003d {\"participantID\":participantID}\n\t\t\t\tsystem.perspective.openDock(id\u003did,params\u003dparams)\n\t\t\telif selectedColumn \u003d\u003d \"Shelter\": \n\t\t\t\t#system.perspective.navigate(\"Shelter/0\")\n\t\t\t\tsystem.perspective.navigate(view \u003d \u0027Shelter/Detail/Shelter_Detail\u0027, params \u003d {\u0027shelterID\u0027:shelterID})\n\t\t\telif selectedColumn \u003d\u003d \"reservation\": \n\t\t\t\tsystem.perspective.navigate(\"Shelter/20\")\n\t\t\telse:\n\t\t\t\tpass\n\t\texcept:\n\t\t\tlogger \u003d system.util.getLogger(\"Participants Dashboard Participants_table OnRowClick\")\n\t\t\tmsg \u003d traceback.format_exc()\n\t\t\tlogger.error(msg)\t\n\t\n\t\"\"\""
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Table"
        },
        "position": {
          "grow": 1,
          "shrink": 0
        },
        "propConfig": {
          "custom._dev2Excel": {
            "onChange": {
              "enabled": null,
              "script": "\tif self.custom._isDev and currentValue.value:\n\t\tself.exportToExcel()"
            }
          },
          "custom._devPulse": {
            "onChange": {
              "enabled": null,
              "script": "\tif self.custom._isDev:\n\t\tif currentValue.value is True:\n\t\t\tpayload \u003d {}\n\t\t\tpayload[\u0027dateFrom\u0027] \u003d None\n\t\t\tpayload[\u0027dateTo\u0027] \u003d None\n\t\t\tpayload[\u0027calendarId\u0027] \u003d None\n\t\t\tpayload[\u0027calEventName\u0027] \u003d None\n\t\t\tpayload[\u0027checkIO\u0027] \u003d None\n\t\t\tpayload[\u0027genderId\u0027] \u003d None\n\t\t\tpayload[\u0027minAge\u0027] \u003d None\n\t\t\tpayload[\u0027maxAge\u0027] \u003d None\n\t\t\tpayload[\u0027searchText\u0027] \u003d None\t\t\n\t\t\t\n\t\t\tsystem.perspective.sendMessage(\u0027mhByCondition\u0027, payload \u003d payload)\n\t\t\tself.custom.jsonLastPayload \u003d system.util.jsonEncode(payload)\n\n\t\telse:\n\t\t\t#payload \u003d {}\n\t\t\t#payload[\u0027providerTypeId\u0027] \u003d [-1]\n\t\t\t#payload[\u0027searchText\u0027] \u003d self.custom._devTxt\n\t\t\t#payload[\u0027fetch\u0027] \u003d 12\n\t\t\t\n\t\t\t#system.perspective.sendMessage(\u0027mhByCondition\u0027, payload \u003d payload)\n\t\t\t#self.custom.jsonLastPayload \u003d system.util.jsonEncode(payload)\n\n\t\t\t#self.props.data \u003d [{key: \u0027\u0027 if key \u003d\u003d \u0027providerName\u0027 else None for key in self.props.data[0]}]\n\t\t\tself.props.data \u003d [{key: None for key in self.props.data[0]}]\n\t\t\tself.custom.jsonLastPayload \u003d None\n\n\n"
            }
          },
          "props.filter.text": {
            "access": "PUBLIC"
          },
          "props.selection.style.backgroundColor": {
            "binding": {
              "config": {
                "path": "this.props.selection.selectedRow"
              },
              "transforms": [
                {
                  "code": "\treturn \"#FFFFFF00\" if value is None or value \u003d\u003d -1 else \"#9AF4EB4D\"",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "cells": {
            "style": {
              "classes": "Table/Cell_Dashboard"
            }
          },
          "columns": [
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "id",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": " "
              },
              "justify": "center",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "view",
              "resizable": false,
              "sort": "none",
              "sortable": false,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "Events/AttendanceHistory/Components/Tables/Templates/TableOptions",
              "visible": true,
              "width": 40
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "Participant Name",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header",
                  "color": "#0C4E8B",
                  "fontFamily": "Proxima Nova ExCn Light",
                  "fontSize": "20px"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "color": "#0c4e85",
                "cursor": "pointer",
                "fontFamily": "Proxima Nova ExCn Medium",
                "text-align": "left"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "Event",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "Check In/Out",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "Date",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "Birth Date",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "Age",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "Gender",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "EventAttendanceId",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "eventId",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "checkIO",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "humanId",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "genderId",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "calendarId",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": ""
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            }
          ],
          "data": [
            {
              "Age": null,
              "Birth Date": null,
              "Check In/Out": null,
              "Date": null,
              "Event": null,
              "EventAttendanceId": null,
              "Gender": null,
              "Participant Name": null,
              "calendarId": null,
              "checkIO": null,
              "eventId": null,
              "genderId": null,
              "humanId": null,
              "id": null
            }
          ],
          "pager": {
            "initialOption": 100
          },
          "rows": {
            "striped": {
              "enabled": false
            }
          },
          "style": {
            "classes": "Background/Default",
            "overflowX": "hidden"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "getDataDb",
              "params": [
                "payload"
              ],
              "script": "\timport extend.query\n\t\n\tdeclaration, queryCte, query, orderBy, fetchOffset \u003d self.getQuery()\n\n\targs \u003d []\t\n\t###############################################\n\tactivity_start\u003d payload.get(\u0027activityRange\u0027)\n\tdateFrom \u003d payload.get(\u0027dateFrom\u0027)\n\tif activity_start and (dateFrom is None or activity_start \u003e dateFrom):\n\t\tdateFrom \u003d activity_start\n\targs +\u003d [dateFrom]\n\t###############################################\n\tdateTo \u003d payload.get(\u0027dateTo\u0027)\n\targs +\u003d [dateTo]\n\t###############################################\n\tcalendarId \u003d payload.get(\u0027calendarId\u0027)\n\targs +\u003d [calendarId]\n\t###############################################\n\tcalEventName \u003d payload.get(\u0027calEventName\u0027)\n\targs +\u003d [calEventName]\n\t###############################################\n\tcheckIO \u003d payload.get(\u0027checkIO\u0027)\n\targs +\u003d [checkIO]\n\t###############################################\n\tgenderId \u003d payload.get(\u0027genderId\u0027)\n\targs +\u003d [genderId]\n\t###############################################\n\tminAge \u003d payload.get(\u0027minAge\u0027)\n\targs +\u003d [minAge]\n\t###############################################\n\tmaxAge \u003d payload.get(\u0027maxAge\u0027)\n\targs +\u003d [maxAge]\n\t###############################################\n\tsearch_text \u003d payload.get(\u0027searchText\u0027)\n\t\n\tif search_text is None:\n\t\tsearch_text \u003d \u0027\u0027\n\t\n\targs +\u003d [search_text]\n\n\t###############################################\n\toffset \u003d payload.get(\u0027offset\u0027)\n\tfetch \u003d payload.get(\u0027fetch\u0027)\n\tif offset is not None and fetch is not None:\n\t\t#counterQuery \u003d \u0027{}; WITH cte AS ({}) SELECT COUNT(1) cnt FROM cte\u0027.format(declaration, query)\n\t\t# declaration, queryCte, query, orderBy, fetchOffset\n\t\tcounterQuery \u003d \u0027{} {} ,cte AS ({}) SELECT COUNT(1) cnt FROM cte\u0027.format(declaration, queryCte, query)\n\t\tresultRowCount \u003d system.db.runScalarPrepQuery(counterQuery, args, \u0027HMSOps\u0027)\n\t\targs +\u003d [offset]\n\t\targs +\u003d [fetch]\t\n\t\n\t\tquery \u003d \u0027{} {} {} {} {}\u0027.format(declaration, queryCte, query, orderBy, fetchOffset)\n#\t\tsystem.perspective.print(query)\n\t\tresult \u003d system.db.runPrepQuery(query, args, \u0027HMSOps\u0027)\n\t\n\telse:\n\t\tquery \u003d \u0027{} {} {} {}\u0027.format(declaration, queryCte, query, orderBy)\n#\t\tsystem.perspective.print(query)\n\t\tresult \u003d system.db.runPrepQuery(query, args, \u0027HMSOps\u0027)\t\n\t\tresultRowCount \u003d result.rowCount\n\t\n\tsystem.perspective.print((\u0027Exec: args\u0027,args)) \n\n\treturn result, resultRowCount\n"
            },
            {
              "name": "getPropsColumns",
              "params": [
                "dataset"
              ],
              "script": "\tjsonDefaultColumn \u003d \"\"\"\n  {\n\t    \"field\": \"\",\n\t    \"visible\": true,\n\t    \"editable\": false,\n\t    \"render\": \"auto\",\n\t    \"justify\": \"left\",\n\t    \"align\": \"center\",\n\t    \"resizable\": true,\n\t    \"sortable\": true,\n\t    \"sort\": \"none\",\n\t    \"viewPath\": \"\",\n\t    \"viewParams\": {},\n\t    \"boolean\": \"checkbox\",\n\t    \"number\": \"value\",\n\t    \"progressBar\": {\n\t      \"max\": 100,\n\t      \"bar\": {\n\t        \"color\": \"#62A3F6\",\n\t        \"linecap\": \"round\",\n\t        \"width\": 5\n\t      },\n\t      \"track\": {\n\t        \"color\": \"#DADADA\",\n\t        \"linecap\": \"round\",\n\t        \"width\": 2\n\t      },\n\t      \"value\": {\n\t        \"color\": \"#7D7D7D\",\n\t        \"show\": true\n\t      }\n\t    },\n\t    \"toggleSwitch\": {\n\t      \"color\": {\n\t        \"selected\": \"#2196F3\",\n\t        \"unselected\": \"#FFFFFF\"\n\t      }\n\t    },\n\t    \"numberFormat\": \"0,0.##\",\n\t    \"dateFormat\": \"MM/DD/YYYY\",\n\t    \"width\": \"\",\n\t    \"strictWidth\": false,\n\t    \"header\": {\n\t      \"title\": \"\",\n\t      \"justify\": \"left\",\n\t      \"align\": \"center\",\n\t      \"style\": {\n\t        \"classes\": \"Table/Column_Header\"\n\t      }\n\t    },\n\t    \"footer\": {\n\t      \"title\": \"\",\n\t      \"justify\": \"left\",\n\t      \"align\": \"center\",\n\t      \"style\": {\n\t        \"classes\": \"\"\n\t      }\n\t    },\n\t    \"style\": {\n\t      \"classes\": \"Table/Column_Normal\"\n\t    }\n\t  },\t\n\t\"\"\"\n\n\tcolumnsForced \u003d [\n\t  {\n\t    \"field\": \"id\",\n\t    \"width\": 40,\n\t    \"title\": \"\"\n\t  },\n\t  {\n\t    \"field\": \"Options\",\n\t    \"width\": 40,\n\t    \"title\": \"\"\n\t  },\n  \t  {\n  \t    \"field\": \"dob\",\n  \t    \"width\": 40,\n  \t    \"title\": \"BirthDate\"\n  \t  },\n\n\t]\n\n\tcolNames \u003d system.dataset.getColumnHeaders(dataset)\n\n\t_columns \u003d []\n\tfor col in colNames:\n\t\t# This conversion json_\u003edict create actually deepcopy\n\t\tpyColumn \u003d system.util.jsonDecode(jsonDefaultColumn)\n\t\t\n\t\t# Note: Field must contain only letters and numbers.\n\t\tpyColumn[\u0027field\u0027] \u003d col\n\t\t\n\t\t_dictCol \u003d None\n\t\tfor item in columnsForced:\n\t\t\tif item[\u0027field\u0027] \u003d\u003d pyColumn[\u0027field\u0027]:\n\t\t\t\t_dictCol \u003d item.copy() \n\t\t\t\n\t\t\n\t\t#ystem.perspective.print((_dictCol))\n\t\t\n\t\tpyColumn[\u0027header\u0027][\u0027title\u0027] \u003d _dictCol[\u0027title\u0027] if _dictCol else \u0027\u0027\n\t\t\n\t\tif _dictCol and _dictCol.get(\u0027width\u0027):\n\t\t\tpyColumn[\u0027width\u0027] \u003d _dictCol[\u0027width\u0027]\n\t\t\tpyColumn[\u0027strictWidth\u0027] \u003d True\n\n\t\tif col in [\u0027checkIO\u0027,\u0027EventAttendanceId\u0027,\u0027calendarId\u0027,\u0027humanId\u0027,\u0027genderId\u0027,\u0027Age\u0027,\u0027eventId\u0027]:\n\t\t\tpyColumn[\u0027visible\u0027] \u003d False\t\n\n\t\tif col \u003d\u003d \u0027id\u0027:\n\t\t\tpyColumn[\u0027header\u0027][\u0027title\u0027] \u003d \u0027 \u0027\n\t\t\tpyColumn[\"render\"] \u003d \"view\"\n\t\t\tpyColumn[\"justify\"] \u003d \"center\"\n\t\t\tpyColumn[\"resizable\"] \u003d False\n\t\t\tpyColumn[\"sortable\"] \u003d False\n\t\t\tpyColumn[\"viewPath\"] \u003d \"Events/AttendanceHistory/Components/Tables/Templates/TableOptions\"\t\n\t\t\n\t\tif col \u003d\u003d \u0027Participant Name\u0027:\n\t\t\t_style \u003d{\n\t\t\t  \"color\": \"#0c4e85\",\n\t\t\t  \"fontFamily\": \"Proxima Nova ExCn Medium\",\n\t\t\t  \"cursor\": \"pointer\",\n\t\t\t  \"text-align\": \"left\"\n\t\t\t}\n\t\t\t_headerStyle \u003d {\n\t\t\t  \"classes\": \"Table/Column_Header\",\n\t\t\t  \"color\": \"#0C4E8B\",\n\t\t\t  \"fontFamily\": \"Proxima Nova ExCn Light\",\n\t\t\t  \"fontSize\": \"20px\"\n\t\t\t}\n\t\t\tpyColumn[\"header\"][\"style\"] \u003d _headerStyle\n\t\t\tpyColumn[\"style\"] \u003d _style\n\t\t_columns.append(pyColumn)\n\t\n\t#ystem.perspective.print((\"_columns: \",_columns))\n\t\n\treturn _columns"
            },
            {
              "name": "correctTimeForClient",
              "params": [
                "pyds",
                "columnsToCorrect"
              ],
              "script": "\t\n\t# !!!!!!!!!!!  NOT TESTED !!!!!!!!!!!!!!!!!!!!!!!\n\t\n\t# Table automaticaly change datetime according to client timezone, \n\t# For this table we don\u0027t need automatic conversion, we must recorrect datetimes, according client timezone.\n\t# Actually to see same values like in db.\n\t\n\t# This is correction client against ignition server\n\t# TODO add correction to SQL server\n\tcorrectionTime \u003d int(60*(system.date.getTimezoneOffset() - self.session.props.device.timezone.utcOffset)) \n\t\n\tlistDateFix \u003d [[]*len(columnsToCorrect)]\n\tfor rowIndex, row in enumerate(pyds):\n\t\tfor colIndex, col in enumerate(columnsToCorrect):\n\t\t\tlistDateFix[colIndex].append(system.date.addMinutes(row[col], correctionTime))\n\t\n\n\tfor index, item in enumerate(listDateFix):\n\t\tcolNames \u003d system.dataset.getColumnHeaders(pyds)\n\t\tcolPosition \u003d colNames.index(columnsToCorrect[index])\n\t\tpyds \u003d system.dataset.filterColumns(pyds, [ x for x in colNames if x !\u003d columnsToCorrect[index]])\n\t\tpyds \u003d system.dataset.addColumn(pyds,colPosition,item,columnsToCorrect[index])\n\t\n\treturn pyds\n"
            },
            {
              "name": "setMisc",
              "params": [],
              "script": "\t\n\tself.props.cells.style\u003d {\n\t    \"classes\": \"Table/Cell_Dashboard\"\n\t}\n\t\n\tself.props.style \u003d {\n\t  \"classes\": \"Background/Default\",\n\t  \"overflowX\": \"hidden\"\n\t}\n"
            },
            {
              "name": "doByCondition",
              "params": [
                "payload"
              ],
              "script": "\timport java.lang\n\n\t# 1. Add fetch to payload if not exist. We can send from pager or use value self.view.params.fetch.\n\t# This should be step before offset\n\tfetch \u003d payload.get(\u0027fetch\u0027)\n\t\n\tif not(fetch):\n\t\tfetch \u003d self.view.params.fetch\n\t\n\t# If fetch value is integer greater then 0, pager exist\n\tif fetch and fetch \u003e 1:\n\t\tpayload[\u0027fetch\u0027] \u003d fetch\n\n\t\t#  2. If payload has \u0027offset\u0027, it means that comming from pager. Then take lastPayload \n\t\t# stored as json string, deserialize to python dict and  add node\u0027 offset\u0027\n\t\t# Else means payload is comming from conditions. Don\u0027t do anything just continue\n\t\tif payload.get(\u0027offset\u0027) is not None:\n\t\t\toffset \u003d payload[\u0027offset\u0027]\n\t\t\tpayload \u003d {}\n\t\t\tfor key in self.custom.lastPayload:\n\t\t\t\tpayload[key] \u003d self.custom.lastPayload[key]\n\t\t\t\n\t\t\t\n\t\t\tpayload[\u0027offset\u0027] \u003d offset\n\t\t\tpayload[\u0027fetch\u0027] \u003d fetch\n\t\telse:\n\t\t\tpayload[\u0027offset\u0027] \u003d 0\n\t\n\t# 3. Get data from DB. Data is dataset which contain only fetch number of rows. \n\t# _resultRowCount is scalar value which represent number of rows in case the that query is executed without  OFFSET ... FETCH...\n\t_data, _resultRowCount \u003d self.getDataDb(payload)\n\t\n\tself.view.params.resultRowCount \u003d _resultRowCount\n\n\t# 4. Set some misc props if necessary (explicit)\n\tself.setMisc()\n\n\t# 5. Step get columns props (explicit adjustment)\n\tself.props.columns \u003d self.getPropsColumns(_data)\n\n\t# 6. Correct values in datetime column according client timezone. (check comments inside function)\n\t#_data \u003d self.correctTimeForClient(_data, [\u0027dob\u0027])\n\n\t# 7. Send message to Kpis\n\tself.sendMessageToKpis(_data)\n\n\t# 8. Add dummy empty raw if result is empty dataset. Reason to do that is to avoid loosing focus on search cell in filters.\n\t_colNames \u003d system.dataset.getColumnHeaders(_data)\n\t\n\tif _data.rowCount \u003d\u003d 0:\n\t\t_lstData \u003d [{col: None for col in _colNames}]\n\telse:\n\t\t_pyds \u003d system.dataset.toPyDataSet(_data)\n\t\t_lstData \u003d [{col: row[col] for col in _colNames} for row in _pyds]\n\n\t#ystem.perspective.print((\u0027_lstData: \u0027,_lstData))\n\t\n\t_makeUped \u003d self.getMakeUpData(_lstData)\n\n\tself.props.data \u003d _makeUped\n\t\n\tself.custom.jsonLastPayload \u003d system.util.jsonEncode(payload)\n\t\n\t# Remove fetch and offset, it is not necessary to store.\n\tpayload.pop(\u0027offset\u0027,None)\n\tpayload.pop(\u0027fetch\u0027,None)\n\tself.custom.lastPayload \u003d payload\n\t\n\t\n\t\n\n\n"
            },
            {
              "name": "getQuery",
              "params": [],
              "script": "\tdeclaration \u003d \t\"\"\"\nDECLARE @dateFrom date \u003d ?,\n\t\t\t@dateTo date \u003d ?,\n\t\t\t@calendarId int \u003d ?, \n\t\t\t@calEventName nvarchar(100) \u003d ?,\n\t\t\t@checkIO int \u003d ?,\n\t\t\t@genderId int \u003d ?,\n\t\t\t@minAge int \u003d ?,\n\t\t\t@maxAge int \u003d ?,\n\t\t\t@searchText nvarchar(100) \u003d ?;\n\"\"\"\n\t\n\tqueryCte \u003d \"\"\"\n\n;WITH cteEvent AS (\nSELECT \n\t [EventAttendance].[id]\n\t,[EventAttendance].[eventId]\n\t,[EventAttendance].[humanId]\n\t,[EventAttendance].[checkin]\n\t,[EventAttendance].[checkout]\n\t,[EventAttendance].[autonote]\n\t,[Gender].[genderName]\n\t,[Employee].[id] AS [Employee_id]\n\t,CONCAT_WS(\u0027 \u0027, [Human].[firstName],[Human].[middleName],[Human].[lastName]) AS [StaffName]\n\t,[Human].[genderId]\n\t,[Human].[dob]\n\t,DATEDIFF(year,[Human].[dob],GETDATE()) AS [Age]\n\t,[CalendarEvents].[calendarId]\n\t,[CalendarEvents].[name] AS [CalendarEvents_name]\nFROM [calendar].[EventAttendance]\n\tINNER JOIN [humans].[Human] ON [Human].[id] \u003d [EventAttendance].[humanId]\n\t-- INNER JOIN [participant].[Participant] ON [Participant].[humanId] \u003d [Human].[id]\n\tINNER JOIN [staff].[Employee] ON [Human].[id] \u003d [Employee].[humanId]\n\tINNER JOIN [humans].[Gender] ON [Gender].[id] \u003d [Human].[genderId]\n\n\tLEFT JOIN [calendar].[CalendarEvents] ON [CalendarEvents].[id] \u003d [EventAttendance].[eventId]\n)\n\n,cteInOut AS (\nSELECT \n\t [id] AS [EventAttendanceId]\n\t,[eventId]\n\t,[humanId]\n\t,[genderId]\n\t,[dob]\n\t,[Age]\n\t,[Employee_id]\n\t,[checkin] AS [TimeStamp]\n\t,[StaffName]\n\t,[calendarId]\n\t,[CalendarEvents_name]\n\t,1 AS [checkIO]\n\t,\u0027checkin\u0027 AS [CheckInOut]\n\t,[genderName]\nFROM cteEvent\nWHERE checkin IS NOT NULL\nUNION ALL\nSELECT \n\t [id] AS [EventAttendanceId]\n\t,[eventId]\n\t,[humanId]\n\t,[genderId]\n\t,[dob]\n\t,[Age]\n\t,[Employee_id]\n\t,[checkout] AS [TimeStamp]\n\t,[StaffName]\n\t,[calendarId]\n\t,[CalendarEvents_name]\n\t,0 AS [checkIO]\n\t,\u0027checkout\u0027 AS [CheckInOut]\n\t,[genderName]\nFROM cteEvent\nWHERE checkout IS NOT NULL\n)\n\n\"\"\"\n\n\tquery \u003d \"\"\"\n\nSELECT \n\t[Employee_id] AS [id]\n\t,[StaffName] AS [Staff Name]\n\t,[CalendarEvents_name]  AS [Event]\n\t,[CheckInOut] AS [Check In/Out]\n\t,[TimeStamp] AS [Date]\n\t-- ,[dob] AS [Birth Date]\n\t,[Age]\n\t-- ,[genderName] AS [Gender]\n\t,[EventAttendanceId]\n\t,[eventId]\n\t,[checkIO]\n\t,[humanId]\n\t,[genderId]\n\t,[calendarId]\nFROM cteInOut\nWHERE 1\u003d1\n\tAND ([calendarId] \u003d @calendarId OR @calendarId IS NULL)\n\tAND ([CalendarEvents_name] \u003d @calEventName OR @calEventName IS NULL)\n\tAND ([checkIO] \u003d @checkIO OR @checkIO IS NULL)\n\tAND ([TimeStamp] \u003e\u003d @dateFrom OR @dateFrom IS NULL)\n\tAND ([TimeStamp] \u003c\u003d @dateTo OR @dateTo IS NULL)\n\tAND ([genderId] \u003d @genderId OR @genderId IS NULL)\n\tAND ([Age] \u003e\u003d @minAge OR @minAge IS NULL)\n\tAND ([Age] \u003c\u003d @maxAge OR @maxAge IS NULL)\n\tAND (\n\t\t@searchText \u003d \u0027\u0027 \n\t\tOR @searchText IS NULL \n\t\tOR [StaffName] LIKE CONCAT(\u0027%\u0027,@searchText,\u0027%\u0027) \n\t\tOR [CalendarEvents_name] LIKE CONCAT(\u0027%\u0027,@searchText,\u0027%\u0027) \n\t\tOR [genderName] LIKE CONCAT(\u0027%\u0027,@searchText,\u0027%\u0027) \n\t\tOR [checkInOut] LIKE CONCAT(\u0027%\u0027,@searchText,\u0027%\u0027)\n)\n\t\"\"\"\n\torderBy \u003d \"\"\"\nORDER BY [TimeStamp] desc\n\t\"\"\"\n\n\tfetchOffset \u003d \"\"\"\nOFFSET ? ROWS \nFETCH NEXT ? ROWS ONLY;  \n\t\"\"\"\t\n\treturn declaration, queryCte, query, orderBy, fetchOffset\n\n\t\t"
            },
            {
              "name": "sendMessageToKpis",
              "params": [
                "data"
              ],
              "script": "\t# Send message to KPIs\n\tpyds \u003d system.dataset.toPyDataSet(data)\n\tpayload \u003d {}\n\tpayload[\u0027TotalEventAttendees\u0027] \u003d 0\n\tpayload[\u0027ActiveParticipants\u0027] \u003d 0\n\tnow \u003d system.date.now()\n\tthisMonthFirstDay  \u003d system.date.getDate(system.date.getYear(now),system.date.getMonth(now),1)\n\tpayload[\u0027EventAttendanceMonthly\u0027] \u003d [dict(time \u003d system.date.addMonths(thisMonthFirstDay,x), applicants \u003d 0) for x in range(-5,1)]\t\n\t\n\tif data.rowCount \u003e 0:\n\t\tactiveParticipantsSet \u003d set()\n\t\ttotalEvents \u003d 0\n\t\tfor rowIndex, row in enumerate(pyds):\n\t\t\tactiveParticipantsSet.add(row[\u0027humanId\u0027])\n\t\t\tif row[\u0027checkIO\u0027] \u003d\u003d 1:\n\t\t\t\ttotalEvents +\u003d 1\n\t\t\t\t_firstMonthDay \u003d system.date.getDate(system.date.getYear(row[\u0027Date\u0027]),system.date.getMonth(row[\u0027Date\u0027]),1)\n\t\t\t\t#inserted \u003d 0\n\t\t\t\tfor p in payload[\u0027EventAttendanceMonthly\u0027]:\n\t\t\t\t\tif p.get(\u0027time\u0027) and p.get(\u0027time\u0027) \u003d\u003d _firstMonthDay:\n\t\t\t\t\t\tp[\u0027applicants\u0027] +\u003d 1\n\t\t\t\t\t\t#inserted \u003d 1\n\t\t\t\t\t\tbreak\n\t\t\t\t#if inserted \u003d\u003d 0:\n\t\t\t\t\t#payload[\u0027EventAttendanceMonthly\u0027].append(dict(time \u003d _firstMonthDay, applicants \u003d 1))\n\t\t\n\t\tpayload[\u0027TotalEventAttendees\u0027] \u003d totalEvents\t\t\n\t\tpayload[\u0027ActiveParticipants\u0027] \u003d len(activeParticipantsSet)\n\t\n\t#ystem.perspective.print((\u0027kpipayload: \u0027,payload))\n\tsystem.perspective.sendMessage(\u0027mhEvAttendHistoryKpiHeader\u0027,payload)\n\t\n\t#sendMessageToKpis"
            },
            {
              "name": "getMakeUpData",
              "params": [
                "lstData"
              ],
              "script": "\t\n\n\t_style \u003d {\t\"color\": \"#0c4e85\",\n\t\t\t\t\"cursor\": \"pointer\",\n\t\t\t\t\"fontFamily\": \"Proxima Nova ExCn Medium\",\n\t\t\t\t\"text-align\": \"left\"}\n\t\t\t\t\t\n\n\n\tfor row in lstData:\n\t\tfor key in row:\n\t\t\tif key \u003d\u003d \u0027providerName\u0027:\n\t\t\t\trow[key] \u003d {\u0027value\u0027: row[key] if row[key] is not None else \u0027\u0027, \"style\": _style}\n\n\treturn lstData"
            },
            {
              "name": "exportToExcel",
              "params": [],
              "script": "\tdata \u003d self.props.data\n\t\t\n\t#Convert data to dataset, because data is array of objects (list of dict) and is not dataset type.\n\t#Solution 2 will be to load again data from DB as dataset, \n\t#Solution 3 during first loading keep in custom.props as dataset\n\tif not(data):\n\t\treturn\n\t\n\t#Check if data contain only one empty row. \n\t#Empty row is just dirty solution to avoid losing focus in filter \n\t#on search field if search field is empty\n\tif len(data) \u003d\u003d 1 and data[0][\u0027id\u0027] is None:\n\t\treturn\n\t\n\tlstData \u003d []\n\tfor rowIndex,row in enumerate(data):\n\t\tif rowIndex \u003d\u003d 0:\n\t\t\tcolNames \u003d [key for key in row]\n\t\t\t\n\t\tlstData.append([row[colName] \tfor colName in colNames])\n\t\n\tdatasetForExcel \u003d system.dataset.toDataSet(colNames, lstData)\n\n\txls \u003d system.dataset.toExcel(True, datasetForExcel)\n\tsystem.perspective.download(\"Attendance_History.xlsx\", xls)\n\t\n\tsystem.perspective.print((\u0027cnt:\u0027, datasetForExcel))\n\n\t\n\t\t\t\n\t_toDelete \u003d \"\"\"\n\tsystem.dataset.addColumn(dataset, [colIndex], col, colName, colType) ???\n\tdata \u003d self.props.data\n\t\t\t\n\t\t#convert data to dataset, because data is array of objects (list of dict)\n\t\t\n\t\tif not(data):\n\t\t\treturn\n\t\t\n\t\t#Check if data contain only one empty row. \n\t\t#Empty row is just dirty solution to avoid losing focus in filter \n\t\t#on search field if search field is empty\n\t\tif len(data) \u003d\u003d 1 and data[0][\u0027id\u0027] is None:\n\t\t\treturn\n\t\t\n\t\tlstData \u003d []\n\t\tfor rowIndex,row in enumerate(data):\n\t\t\tif rowIndex \u003d\u003d 0:\n\t\t\t\tcolNames \u003d [key for key in row]\n\t\t\t\tcolTypes \u003d [type(val) for val in row.values()]\n\t\t\t\tlstColumns \u003d [dict(name \u003d key, type \u003d type(row[key])) for key in row]\n\t\t\t\tsystem.perspective.print((\u0027aa\u0027,type(row[\u0027Gender\u0027]))) \n\t\t\t\tsystem.perspective.print((\u0027age\u0027,type(row[\u0027Age\u0027])))\n\t\t\t\tsystem.perspective.print((\u0027dir:\u0027,type(row[\u0027Date\u0027])))\n\t\t\t\t\n\t\t\tlstData.append([row[colName] \tfor colName in colNames])\n\t\t\n\t\tdatasetForExcel1 \u003d system.dataset.toDataSet(colNames, lstData)\n\t\tdictDs \u003d dict(columns \u003d lstColumns, rows \u003d lstData)\n\t\tjds \u003d system.util.jsonEncode(dictDs)\n\t\tsystem.perspective.print((\u0027jds:\u0027, jds))\n\t\tdatasetForExcel \u003d system.util.jsonDecode(jds)\n\t\t#xls \u003d system.dataset.toExcel(True, datasetForExcel)\n\t\t#system.perspective.download(\"Attendance_History.xlsx\", xls)\n\t\t\n\t\tsystem.perspective.print((\u0027cnt:\u0027, type(datasetForExcel)))\t\n\t\n\"\"\"\n\t"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "mhByCondition",
              "pageScope": true,
              "script": "\t#ystem.perspective.print((\u0027Msgstep1\u0027))\n\tself.doByCondition(payload)",
              "sessionScope": false,
              "viewScope": false
            },
            {
              "messageType": "mhExportToExcel",
              "pageScope": true,
              "script": "\t# implement your handler here\n\tself.exportToExcel()",
              "sessionScope": false,
              "viewScope": false
            }
          ]
        },
        "type": "ia.display.table"
      }
    ],
    "custom": {
      "_test": false
    },
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "custom._test": {
        "onChange": {
          "enabled": null,
          "script": "\tif previousValue is not None and currentValue is not None:\n\t\tif previousValue.value \u003d\u003d 0 and currentValue.value \u003d\u003d 1:\n\t\t\tself.getChild(\"Table\").doByCondition({})"
        }
      }
    },
    "props": {
      "direction": "column",
      "justify": "space-around",
      "style": {
        "overflow": "visible"
      }
    },
    "type": "ia.container.flex"
  }
}